var Eo=Object.create,Or=Object.defineProperty,Io=Object.defineProperties,To=Object.getOwnPropertyDescriptor,Ro=Object.getOwnPropertyDescriptors,Bo=Object.getOwnPropertyNames,Qr=Object.getOwnPropertySymbols,Po=Object.getPrototypeOf,Qi=Object.prototype.hasOwnProperty,vf=Object.prototype.propertyIsEnumerable,ei=Math.pow,mf=(r,e,t)=>e in r?Or(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,K=(r,e)=>{for(var t in e||(e={}))Qi.call(e,t)&&mf(r,t,e[t]);if(Qr)for(var t of Qr(e))vf.call(e,t)&&mf(r,t,e[t]);return r},st=(r,e)=>Io(r,Ro(e)),yf=r=>Or(r,"__esModule",{value:!0});var Ye=(r,e)=>{var t={};for(var i in r)Qi.call(r,i)&&e.indexOf(i)<0&&(t[i]=r[i]);if(r!=null&&Qr)for(var i of Qr(r))e.indexOf(i)<0&&vf.call(r,i)&&(t[i]=r[i]);return t};var P=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),Fo=(r,e)=>{for(var t in e)Or(r,t,{get:e[t],enumerable:!0})},Oo=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of Bo(e))!Qi.call(r,i)&&i!=="default"&&Or(r,i,{get:()=>e[i],enumerable:!(t=To(e,i))||t.enumerable});return r},lt=r=>Oo(yf(Or(r!=null?Eo(Po(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);var ti=(r,e,t)=>new Promise((i,n)=>{var f=h=>{try{o(t.next(h))}catch(b){n(b)}},c=h=>{try{o(t.throw(h))}catch(b){n(b)}},o=h=>h.done?i(h.value):Promise.resolve(h.value).then(f,c);o((t=t.apply(r,e)).next())});var Mf=P(zt=>{"use strict";Object.defineProperty(zt,"__esModule",{value:!0});function dr(r,e,t){var i;if(t===void 0&&(t={}),!e.codes){e.codes={};for(var n=0;n<e.chars.length;++n)e.codes[e.chars[n]]=n}if(!t.loose&&r.length*e.bits&7)throw new SyntaxError("Invalid padding");for(var f=r.length;r[f-1]==="=";)if(--f,!t.loose&&!((r.length-f)*e.bits&7))throw new SyntaxError("Invalid padding");for(var c=new((i=t.out)!=null?i:Uint8Array)(f*e.bits/8|0),o=0,h=0,b=0,y=0;y<f;++y){var x=e.codes[r[y]];if(x===void 0)throw new SyntaxError("Invalid character "+r[y]);h=h<<e.bits|x,o+=e.bits,o>=8&&(o-=8,c[b++]=255&h>>o)}if(o>=e.bits||255&h<<8-o)throw new SyntaxError("Unexpected end of data");return c}function cr(r,e,t){t===void 0&&(t={});for(var i=t,n=i.pad,f=n===void 0?!0:n,c=(1<<e.bits)-1,o="",h=0,b=0,y=0;y<r.length;++y)for(b=b<<8|255&r[y],h+=8;h>e.bits;)h-=e.bits,o+=e.chars[c&b>>h];if(h&&(o+=e.chars[c&b<<e.bits-h]),f)for(;o.length*e.bits&7;)o+="=";return o}var gf={chars:"0123456789ABCDEF",bits:4},xf={chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bits:5},wf={chars:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bits:5},_f={chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bits:6},Sf={chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bits:6},No={parse:function(e,t){return dr(e.toUpperCase(),gf,t)},stringify:function(e,t){return cr(e,gf,t)}},Co={parse:function(e,t){return t===void 0&&(t={}),dr(t.loose?e.toUpperCase().replace(/0/g,"O").replace(/1/g,"L").replace(/8/g,"B"):e,xf,t)},stringify:function(e,t){return cr(e,xf,t)}},Uo={parse:function(e,t){return dr(e,wf,t)},stringify:function(e,t){return cr(e,wf,t)}},qo={parse:function(e,t){return dr(e,_f,t)},stringify:function(e,t){return cr(e,_f,t)}},zo={parse:function(e,t){return dr(e,Sf,t)},stringify:function(e,t){return cr(e,Sf,t)}},Ho={parse:dr,stringify:cr};zt.base16=No;zt.base32=Co;zt.base32hex=Uo;zt.base64=qo;zt.base64url=zo;zt.codec=Ho});var Of=P(hr=>{function Do(r,e){try{var t=r()}catch(i){return e(i)}return t&&t.then?t.then(void 0,e):t}function Ef(){let r=new Map;return function(e,t){try{let f=function(o){if(n)return o;let h=r.get(e.didUrl);return h!==void 0?h:Promise.resolve(t()).then(function(b){var y;return((y=b.didResolutionMetadata)==null?void 0:y.error)!=="notFound"&&r.set(e.didUrl,b),b})};var i=f;let n,c=function(){if(e.params&&e.params["no-cache"]==="true")return n=1,Promise.resolve(t())}();return Promise.resolve(c&&c.then?c.then(f):f(c))}catch(n){return Promise.reject(n)}}}function If(r,e){return e()}var ko="(?:%[0-9a-fA-F]{2})",Tf=`(?:[a-zA-Z0-9._-]|${ko})`,Lo="([a-z0-9]+)",$o=`((?:${Tf}*:)*(${Tf}+))`,Rf="[a-zA-Z0-9_.:%-]",Wo=`;${Rf}+=${Rf}*`,Vo=`((${Wo})*)`,Xo="(/[^#?]*)?",Go="([?][^#]*)?",jo="(#.*)?",Yo=new RegExp(`^did:${Lo}:${$o}${Vo}${Xo}${Go}${jo}$`);function Bf(r){if(r===""||!r)return null;let e=r.match(Yo);if(e){let t={did:`did:${e[1]}:${e[2]}`,method:e[1],id:e[2],didUrl:r};if(e[4]){let i=e[4].slice(1).split(";");t.params={};for(let n of i){let f=n.split("=");t.params[f[0]]=f[1]}}return e[6]&&(t.path=e[6]),e[7]&&(t.query=e[7].slice(1)),e[8]&&(t.fragment=e[8].slice(1)),t}return null}var ri={didResolutionMetadata:{},didDocument:null,didDocumentMetadata:{}};function Pf(r){return function(e,t,i){try{return Promise.resolve(Do(function(){return Promise.resolve(r(e,t,i)).then(function(n){return st(K({},ri),{didResolutionMetadata:{contentType:"application/did+ld+json"},didDocument:n})})},function(n){return st(K({},ri),{didResolutionMetadata:{error:"notFound",message:n.toString()}})}))}catch(n){return Promise.reject(n)}}}var Ff=class{constructor(e={},t={}){this.registry=void 0,this.cache=void 0,this.registry=e,this.cache=t.cache===!0?Ef():t.cache||If,t.legacyResolvers&&Object.keys(t.legacyResolvers).map(i=>{this.registry[i]||(this.registry[i]=Pf(t.legacyResolvers[i]))})}resolve(e,t={}){try{let i=this,n=Bf(e);if(n===null)return Promise.resolve(st(K({},ri),{didResolutionMetadata:{error:"invalidDid"}}));let f=i.registry[n.method];return f?Promise.resolve(i.cache(n,()=>f(n.did,n,i,t))):Promise.resolve(st(K({},ri),{didResolutionMetadata:{error:"unsupportedDidMethod"}}))}catch(i){return Promise.reject(i)}}};hr.Resolver=Ff;hr.inMemoryCache=Ef;hr.noCache=If;hr.parse=Bf;hr.wrapLegacyResolver=Pf});var Wf=P((bt,$f)=>{"use strict";Object.defineProperty(bt,"__esModule",{value:!0});function Nr(r){return r&&typeof r=="object"&&"default"in r?r.default:r}var ot=Nr(require("stream")),Nf=Nr(require("http")),en=Nr(require("url")),Ko=Nr(require("https")),Jt=Nr(require("zlib")),Jo=ot.Readable,At=Symbol("buffer"),tn=Symbol("type"),Zt=class{constructor(){this[tn]="";let e=arguments[0],t=arguments[1],i=[],n=0;if(e){let c=e,o=Number(c.length);for(let h=0;h<o;h++){let b=c[h],y;b instanceof Buffer?y=b:ArrayBuffer.isView(b)?y=Buffer.from(b.buffer,b.byteOffset,b.byteLength):b instanceof ArrayBuffer?y=Buffer.from(b):b instanceof Zt?y=b[At]:y=Buffer.from(typeof b=="string"?b:String(b)),n+=y.length,i.push(y)}}this[At]=Buffer.concat(i);let f=t&&t.type!==void 0&&String(t.type).toLowerCase();f&&!/[^\u0020-\u007E]/.test(f)&&(this[tn]=f)}get size(){return this[At].length}get type(){return this[tn]}text(){return Promise.resolve(this[At].toString())}arrayBuffer(){let e=this[At],t=e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength);return Promise.resolve(t)}stream(){let e=new Jo;return e._read=function(){},e.push(this[At]),e.push(null),e}toString(){return"[object Blob]"}slice(){let e=this.size,t=arguments[0],i=arguments[1],n,f;t===void 0?n=0:t<0?n=Math.max(e+t,0):n=Math.min(t,e),i===void 0?f=e:i<0?f=Math.max(e+i,0):f=Math.min(i,e);let c=Math.max(f-n,0),h=this[At].slice(n,n+c),b=new Zt([],{type:arguments[2]});return b[At]=h,b}};Object.defineProperties(Zt.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}});Object.defineProperty(Zt.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0});function Ve(r,e,t){Error.call(this,r),this.message=r,this.type=e,t&&(this.code=this.errno=t.code),Error.captureStackTrace(this,this.constructor)}Ve.prototype=Object.create(Error.prototype);Ve.prototype.constructor=Ve;Ve.prototype.name="FetchError";var rn;try{rn=require("encoding").convert}catch(r){}var Et=Symbol("Body internals"),Cf=ot.PassThrough;function Ue(r){var e=this,t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i=t.size;let n=i===void 0?0:i;var f=t.timeout;let c=f===void 0?0:f;r==null?r=null:Uf(r)?r=Buffer.from(r.toString()):Cr(r)||Buffer.isBuffer(r)||(Object.prototype.toString.call(r)==="[object ArrayBuffer]"?r=Buffer.from(r):ArrayBuffer.isView(r)?r=Buffer.from(r.buffer,r.byteOffset,r.byteLength):r instanceof ot||(r=Buffer.from(String(r)))),this[Et]={body:r,disturbed:!1,error:null},this.size=n,this.timeout=c,r instanceof ot&&r.on("error",function(o){let h=o.name==="AbortError"?o:new Ve(`Invalid response body while trying to fetch ${e.url}: ${o.message}`,"system",o);e[Et].error=h})}Ue.prototype={get body(){return this[Et].body},get bodyUsed(){return this[Et].disturbed},arrayBuffer(){return ur.call(this).then(function(r){return r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength)})},blob(){let r=this.headers&&this.headers.get("content-type")||"";return ur.call(this).then(function(e){return Object.assign(new Zt([],{type:r.toLowerCase()}),{[At]:e})})},json(){var r=this;return ur.call(this).then(function(e){try{return JSON.parse(e.toString())}catch(t){return Ue.Promise.reject(new Ve(`invalid json response body at ${r.url} reason: ${t.message}`,"invalid-json"))}})},text(){return ur.call(this).then(function(r){return r.toString()})},buffer(){return ur.call(this)},textConverted(){var r=this;return ur.call(this).then(function(e){return Zo(e,r.headers)})}};Object.defineProperties(Ue.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}});Ue.mixIn=function(r){for(let e of Object.getOwnPropertyNames(Ue.prototype))if(!(e in r)){let t=Object.getOwnPropertyDescriptor(Ue.prototype,e);Object.defineProperty(r,e,t)}};function ur(){var r=this;if(this[Et].disturbed)return Ue.Promise.reject(new TypeError(`body used already for: ${this.url}`));if(this[Et].disturbed=!0,this[Et].error)return Ue.Promise.reject(this[Et].error);let e=this.body;if(e===null)return Ue.Promise.resolve(Buffer.alloc(0));if(Cr(e)&&(e=e.stream()),Buffer.isBuffer(e))return Ue.Promise.resolve(e);if(!(e instanceof ot))return Ue.Promise.resolve(Buffer.alloc(0));let t=[],i=0,n=!1;return new Ue.Promise(function(f,c){let o;r.timeout&&(o=setTimeout(function(){n=!0,c(new Ve(`Response timeout while trying to fetch ${r.url} (over ${r.timeout}ms)`,"body-timeout"))},r.timeout)),e.on("error",function(h){h.name==="AbortError"?(n=!0,c(h)):c(new Ve(`Invalid response body while trying to fetch ${r.url}: ${h.message}`,"system",h))}),e.on("data",function(h){if(!(n||h===null)){if(r.size&&i+h.length>r.size){n=!0,c(new Ve(`content size at ${r.url} over limit: ${r.size}`,"max-size"));return}i+=h.length,t.push(h)}}),e.on("end",function(){if(!n){clearTimeout(o);try{f(Buffer.concat(t,i))}catch(h){c(new Ve(`Could not create Buffer from response body for ${r.url}: ${h.message}`,"system",h))}}})})}function Zo(r,e){if(typeof rn!="function")throw new Error("The package `encoding` must be installed to use the textConverted() function");let t=e.get("content-type"),i="utf-8",n,f;return t&&(n=/charset=([^;]*)/i.exec(t)),f=r.slice(0,1024).toString(),!n&&f&&(n=/<meta.+?charset=(['"])(.+?)\1/i.exec(f)),!n&&f&&(n=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(f),n||(n=/<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(f),n&&n.pop()),n&&(n=/charset=(.*)/i.exec(n.pop()))),!n&&f&&(n=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(f)),n&&(i=n.pop(),(i==="gb2312"||i==="gbk")&&(i="gb18030")),rn(r,"UTF-8",i).toString()}function Uf(r){return typeof r!="object"||typeof r.append!="function"||typeof r.delete!="function"||typeof r.get!="function"||typeof r.getAll!="function"||typeof r.has!="function"||typeof r.set!="function"?!1:r.constructor.name==="URLSearchParams"||Object.prototype.toString.call(r)==="[object URLSearchParams]"||typeof r.sort=="function"}function Cr(r){return typeof r=="object"&&typeof r.arrayBuffer=="function"&&typeof r.type=="string"&&typeof r.stream=="function"&&typeof r.constructor=="function"&&typeof r.constructor.name=="string"&&/^(Blob|File)$/.test(r.constructor.name)&&/^(Blob|File)$/.test(r[Symbol.toStringTag])}function qf(r){let e,t,i=r.body;if(r.bodyUsed)throw new Error("cannot clone body after it is used");return i instanceof ot&&typeof i.getBoundary!="function"&&(e=new Cf,t=new Cf,i.pipe(e),i.pipe(t),r[Et].body=e,i=t),i}function zf(r){return r===null?null:typeof r=="string"?"text/plain;charset=UTF-8":Uf(r)?"application/x-www-form-urlencoded;charset=UTF-8":Cr(r)?r.type||null:Buffer.isBuffer(r)||Object.prototype.toString.call(r)==="[object ArrayBuffer]"||ArrayBuffer.isView(r)?null:typeof r.getBoundary=="function"?`multipart/form-data;boundary=${r.getBoundary()}`:r instanceof ot?null:"text/plain;charset=UTF-8"}function Hf(r){let e=r.body;return e===null?0:Cr(e)?e.size:Buffer.isBuffer(e)?e.length:e&&typeof e.getLengthSync=="function"&&(e._lengthRetrievers&&e._lengthRetrievers.length==0||e.hasKnownLength&&e.hasKnownLength())?e.getLengthSync():null}function Qo(r,e){let t=e.body;t===null?r.end():Cr(t)?t.stream().pipe(r):Buffer.isBuffer(t)?(r.write(t),r.end()):t.pipe(r)}Ue.Promise=global.Promise;var Df=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,nn=/[^\t\x20-\x7e\x80-\xff]/;function Ur(r){if(r=`${r}`,Df.test(r)||r==="")throw new TypeError(`${r} is not a legal HTTP header name`)}function kf(r){if(r=`${r}`,nn.test(r))throw new TypeError(`${r} is not a legal HTTP header value`)}function lr(r,e){e=e.toLowerCase();for(let t in r)if(t.toLowerCase()===e)return t}var Z=Symbol("map"),Ze=class{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0;if(this[Z]=Object.create(null),e instanceof Ze){let t=e.raw(),i=Object.keys(t);for(let n of i)for(let f of t[n])this.append(n,f);return}if(e!=null)if(typeof e=="object"){let t=e[Symbol.iterator];if(t!=null){if(typeof t!="function")throw new TypeError("Header pairs must be iterable");let i=[];for(let n of e){if(typeof n!="object"||typeof n[Symbol.iterator]!="function")throw new TypeError("Each header pair must be iterable");i.push(Array.from(n))}for(let n of i){if(n.length!==2)throw new TypeError("Each header pair must be a name/value tuple");this.append(n[0],n[1])}}else for(let i of Object.keys(e)){let n=e[i];this.append(i,n)}}else throw new TypeError("Provided initializer must be an object")}get(e){e=`${e}`,Ur(e);let t=lr(this[Z],e);return t===void 0?null:this[Z][t].join(", ")}forEach(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:void 0,i=fn(this),n=0;for(;n<i.length;){var f=i[n];let c=f[0],o=f[1];e.call(t,o,c,this),i=fn(this),n++}}set(e,t){e=`${e}`,t=`${t}`,Ur(e),kf(t);let i=lr(this[Z],e);this[Z][i!==void 0?i:e]=[t]}append(e,t){e=`${e}`,t=`${t}`,Ur(e),kf(t);let i=lr(this[Z],e);i!==void 0?this[Z][i].push(t):this[Z][e]=[t]}has(e){return e=`${e}`,Ur(e),lr(this[Z],e)!==void 0}delete(e){e=`${e}`,Ur(e);let t=lr(this[Z],e);t!==void 0&&delete this[Z][t]}raw(){return this[Z]}keys(){return sn(this,"key")}values(){return sn(this,"value")}[Symbol.iterator](){return sn(this,"key+value")}};Ze.prototype.entries=Ze.prototype[Symbol.iterator];Object.defineProperty(Ze.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0});Object.defineProperties(Ze.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});function fn(r){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"key+value";return Object.keys(r[Z]).sort().map(e==="key"?function(i){return i.toLowerCase()}:e==="value"?function(i){return r[Z][i].join(", ")}:function(i){return[i.toLowerCase(),r[Z][i].join(", ")]})}var an=Symbol("internal");function sn(r,e){let t=Object.create(on);return t[an]={target:r,kind:e,index:0},t}var on=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==on)throw new TypeError("Value of `this` is not a HeadersIterator");var r=this[an];let e=r.target,t=r.kind,i=r.index,n=fn(e,t),f=n.length;return i>=f?{value:void 0,done:!0}:(this[an].index=i+1,{value:n[i],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));Object.defineProperty(on,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});function ed(r){let e=Object.assign({__proto__:null},r[Z]),t=lr(r[Z],"Host");return t!==void 0&&(e[t]=e[t][0]),e}function td(r){let e=new Ze;for(let t of Object.keys(r))if(!Df.test(t))if(Array.isArray(r[t]))for(let i of r[t])nn.test(i)||(e[Z][t]===void 0?e[Z][t]=[i]:e[Z][t].push(i));else nn.test(r[t])||(e[Z][t]=[r[t]]);return e}var Ht=Symbol("Response internals"),rd=Nf.STATUS_CODES,it=class{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null,t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};Ue.call(this,e,t);let i=t.status||200,n=new Ze(t.headers);if(e!=null&&!n.has("Content-Type")){let f=zf(e);f&&n.append("Content-Type",f)}this[Ht]={url:t.url,status:i,statusText:t.statusText||rd[i],headers:n,counter:t.counter}}get url(){return this[Ht].url||""}get status(){return this[Ht].status}get ok(){return this[Ht].status>=200&&this[Ht].status<300}get redirected(){return this[Ht].counter>0}get statusText(){return this[Ht].statusText}get headers(){return this[Ht].headers}clone(){return new it(qf(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}};Ue.mixIn(it.prototype);Object.defineProperties(it.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}});Object.defineProperty(it.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});var It=Symbol("Request internals"),dn=en.parse,id=en.format,nd="destroy"in ot.Readable.prototype;function ii(r){return typeof r=="object"&&typeof r[It]=="object"}function fd(r){let e=r&&typeof r=="object"&&Object.getPrototypeOf(r);return!!(e&&e.constructor.name==="AbortSignal")}var Tt=class{constructor(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i;ii(e)?i=dn(e.url):(e&&e.href?i=dn(e.href):i=dn(`${e}`),e={});let n=t.method||e.method||"GET";if(n=n.toUpperCase(),(t.body!=null||ii(e)&&e.body!==null)&&(n==="GET"||n==="HEAD"))throw new TypeError("Request with GET/HEAD method cannot have body");let f=t.body!=null?t.body:ii(e)&&e.body!==null?qf(e):null;Ue.call(this,f,{timeout:t.timeout||e.timeout||0,size:t.size||e.size||0});let c=new Ze(t.headers||e.headers||{});if(f!=null&&!c.has("Content-Type")){let h=zf(f);h&&c.append("Content-Type",h)}let o=ii(e)?e.signal:null;if("signal"in t&&(o=t.signal),o!=null&&!fd(o))throw new TypeError("Expected signal to be an instanceof AbortSignal");this[It]={method:n,redirect:t.redirect||e.redirect||"follow",headers:c,parsedURL:i,signal:o},this.follow=t.follow!==void 0?t.follow:e.follow!==void 0?e.follow:20,this.compress=t.compress!==void 0?t.compress:e.compress!==void 0?e.compress:!0,this.counter=t.counter||e.counter||0,this.agent=t.agent||e.agent}get method(){return this[It].method}get url(){return id(this[It].parsedURL)}get headers(){return this[It].headers}get redirect(){return this[It].redirect}get signal(){return this[It].signal}clone(){return new Tt(this)}};Ue.mixIn(Tt.prototype);Object.defineProperty(Tt.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0});Object.defineProperties(Tt.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}});function ad(r){let e=r[It].parsedURL,t=new Ze(r[It].headers);if(t.has("Accept")||t.set("Accept","*/*"),!e.protocol||!e.hostname)throw new TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(e.protocol))throw new TypeError("Only HTTP(S) protocols are supported");if(r.signal&&r.body instanceof ot.Readable&&!nd)throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let i=null;if(r.body==null&&/^(POST|PUT)$/i.test(r.method)&&(i="0"),r.body!=null){let f=Hf(r);typeof f=="number"&&(i=String(f))}i&&t.set("Content-Length",i),t.has("User-Agent")||t.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),r.compress&&!t.has("Accept-Encoding")&&t.set("Accept-Encoding","gzip,deflate");let n=r.agent;return typeof n=="function"&&(n=n(e)),!t.has("Connection")&&!n&&t.set("Connection","close"),Object.assign({},e,{method:r.method,headers:ed(t),agent:n})}function qr(r){Error.call(this,r),this.type="aborted",this.message=r,Error.captureStackTrace(this,this.constructor)}qr.prototype=Object.create(Error.prototype);qr.prototype.constructor=qr;qr.prototype.name="AbortError";var Lf=ot.PassThrough,sd=en.resolve;function Dt(r,e){if(!Dt.Promise)throw new Error("native promise missing, set fetch.Promise to your favorite alternative");return Ue.Promise=Dt.Promise,new Dt.Promise(function(t,i){let n=new Tt(r,e),f=ad(n),c=(f.protocol==="https:"?Ko:Nf).request,o=n.signal,h=null,b=function(){let E=new qr("The user aborted a request.");i(E),n.body&&n.body instanceof ot.Readable&&n.body.destroy(E),!(!h||!h.body)&&h.body.emit("error",E)};if(o&&o.aborted){b();return}let y=function(){b(),S()},x=c(f),M;o&&o.addEventListener("abort",y);function S(){x.abort(),o&&o.removeEventListener("abort",y),clearTimeout(M)}n.timeout&&x.once("socket",function(A){M=setTimeout(function(){i(new Ve(`network timeout at: ${n.url}`,"request-timeout")),S()},n.timeout)}),x.on("error",function(A){i(new Ve(`request to ${n.url} failed, reason: ${A.message}`,"system",A)),S()}),x.on("response",function(A){clearTimeout(M);let E=td(A.headers);if(Dt.isRedirect(A.statusCode)){let Ne=E.get("Location"),$=Ne===null?null:sd(n.url,Ne);switch(n.redirect){case"error":i(new Ve(`uri requested responds with a redirect, redirect mode is set to error: ${n.url}`,"no-redirect")),S();return;case"manual":if($!==null)try{E.set("Location",$)}catch(Ge){i(Ge)}break;case"follow":if($===null)break;if(n.counter>=n.follow){i(new Ve(`maximum redirect reached at: ${n.url}`,"max-redirect")),S();return}let Ce={headers:new Ze(n.headers),follow:n.follow,counter:n.counter+1,agent:n.agent,compress:n.compress,method:n.method,body:n.body,signal:n.signal,timeout:n.timeout,size:n.size};if(A.statusCode!==303&&n.body&&Hf(n)===null){i(new Ve("Cannot follow redirect with body being a readable stream","unsupported-redirect")),S();return}(A.statusCode===303||(A.statusCode===301||A.statusCode===302)&&n.method==="POST")&&(Ce.method="GET",Ce.body=void 0,Ce.headers.delete("content-length")),t(Dt(new Tt($,Ce))),S();return}}A.once("end",function(){o&&o.removeEventListener("abort",y)});let O=A.pipe(new Lf),T={url:n.url,status:A.statusCode,statusText:A.statusMessage,headers:E,size:n.size,timeout:n.timeout,counter:n.counter},z=E.get("Content-Encoding");if(!n.compress||n.method==="HEAD"||z===null||A.statusCode===204||A.statusCode===304){h=new it(O,T),t(h);return}let H={flush:Jt.Z_SYNC_FLUSH,finishFlush:Jt.Z_SYNC_FLUSH};if(z=="gzip"||z=="x-gzip"){O=O.pipe(Jt.createGunzip(H)),h=new it(O,T),t(h);return}if(z=="deflate"||z=="x-deflate"){A.pipe(new Lf).once("data",function($){($[0]&15)==8?O=O.pipe(Jt.createInflate()):O=O.pipe(Jt.createInflateRaw()),h=new it(O,T),t(h)});return}if(z=="br"&&typeof Jt.createBrotliDecompress=="function"){O=O.pipe(Jt.createBrotliDecompress()),h=new it(O,T),t(h);return}h=new it(O,T),t(h)}),Qo(x,n)})}Dt.isRedirect=function(r){return r===301||r===302||r===303||r===307||r===308};Dt.Promise=global.Promise;$f.exports=bt=Dt;Object.defineProperty(bt,"__esModule",{value:!0});bt.default=bt;bt.Headers=Ze;bt.Request=Tt;bt.Response=it;bt.FetchError=Ve});var Xf=P((Qt,Vf)=>{var zr=Wf(),od=zr.default||zr,ni=function(r,e){return/^\/\//.test(r)&&(r="https:"+r),od.call(this,r,e)};ni.ponyfill=!0;Vf.exports=Qt=ni;Qt.fetch=ni;Qt.Headers=zr.Headers;Qt.Request=zr.Request;Qt.Response=zr.Response;Qt.default=ni});var jf=P(Gf=>{var dd=Xf();function cd(r){return r&&typeof r=="object"&&"default"in r?r:{default:r}}var hd=cd(dd);function ud(r,e){try{var t=r()}catch(i){return e(i)}return t&&t.then?t.then(void 0,e):t}var ld=function(r){try{return Promise.resolve(hd.default(r,{mode:"cors"})).then(function(e){if(e.status>=400)throw new Error(`Bad response ${e.statusText}`);return e.json()})}catch(e){return Promise.reject(e)}};function Qe(r,e,t){if(!r.s){if(t instanceof cn)if(t.s)e&1&&(e=t.s),t=t.v;else{t.o=Qe.bind(null,r,e);return}if(t&&t.then){t.then(Qe.bind(null,r,e),Qe.bind(null,r,2));return}r.s=e,r.v=t;let i=r.o;i&&i(r)}}var bd="/.well-known/did.json",cn=function(){function r(){}return r.prototype.then=function(e,t){let i=new r,n=this.s;if(n){let f=n&1?e:t;if(f){try{Qe(i,1,f(this.v))}catch(c){Qe(i,2,c)}return i}else return this}return this.o=function(f){try{let c=f.v;f.s&1?Qe(i,1,e?e(c):c):t?Qe(i,1,t(c)):Qe(i,2,c)}catch(c){Qe(i,2,c)}},i},r}();function br(r){return r instanceof cn&&r.s&1}function pd(r,e){var t;do{var i=r();if(i&&i.then)if(br(i))i=i.v;else{t=!0;break}var n=e();if(br(n)&&(n=n.v),!n)return i}while(!n.then);let f=new cn,c=Qe.bind(null,f,2);return(t?i.then(o):n.then(h)).then(void 0,c),f;function o(b){for(i=b;n=e(),br(n)&&(n=n.v),!!n;){if(n.then){n.then(h).then(void 0,c);return}if(i=r(),i&&i.then)if(br(i))i=i.v;else{i.then(o).then(void 0,c);return}}Qe(f,1,i)}function h(b){if(b){do{if(i=r(),i&&i.then)if(br(i))i=i.v;else{i.then(o).then(void 0,c);return}if(b=e(),br(b)&&(b=b.v),!b){Qe(f,1,i);return}}while(!b.then);b.then(h).then(void 0,c)}else Qe(f,1,i)}}function vd(){return{web:function(e,t){try{let f=function(){var S;let A=typeof((S=x)==null?void 0:S["@context"])!="undefined"?"application/did+ld+json":"application/did+json";return c?{didDocument:x,didDocumentMetadata:y,didResolutionMetadata:{error:"notFound",message:c}}:{didDocument:x,didDocumentMetadata:y,didResolutionMetadata:{contentType:A}}};var i=f;let n,c=null,o=decodeURIComponent(t.id)+bd,h=t.id.split(":");h.length>1&&(o=h.map(decodeURIComponent).join("/")+"/did.json");let b=`https://${o}`,y={},x=null,M=pd(function(){function S(){if(!n){var E;((E=x)==null?void 0:E.id)===e||(c="resolver_error: DID document id does not match requested did")}}let A=ud(function(){return Promise.resolve(ld(b)).then(function(E){x=E})},function(E){c=`resolver_error: DID must resolve to a valid https URL containing a JSON document: ${E}`,n=1});return A&&A.then?A.then(S):S(A)},function(){return!n&&!1});return Promise.resolve(M&&M.then?M.then(f):f(M))}catch(n){return Promise.reject(n)}}}}Gf.getResolver=vd});var Qf=P((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer!="undefined",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,e){return function(t){return new Sha256(e,!0).update(t)[r]()}},createMethod=function(r){var e=createOutputMethod("hex",r);NODE_JS&&(e=nodeWrap(e,r)),e.create=function(){return new Sha256(r)},e.update=function(n){return e.create().update(n)};for(var t=0;t<OUTPUT_TYPES.length;++t){var i=OUTPUT_TYPES[t];e[i]=createOutputMethod(i,r)}return e},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,e){return function(t,i){return new HmacSha256(t,e,!0).update(i)[r]()}},createHmacMethod=function(r){var e=createHmacOutputMethod("hex",r);e.create=function(n){return new HmacSha256(n,r)},e.update=function(n,f){return e.create(n).update(f)};for(var t=0;t<OUTPUT_TYPES.length;++t){var i=OUTPUT_TYPES[t];e[i]=createHmacOutputMethod(i,r)}return e};function Sha256(r,e){e?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var e,t=typeof r;if(t!=="string"){if(t==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);e=!0}for(var i,n=0,f,c=r.length,o=this.blocks;n<c;){if(this.hashed&&(this.hashed=!1,o[0]=this.block,o[16]=o[1]=o[2]=o[3]=o[4]=o[5]=o[6]=o[7]=o[8]=o[9]=o[10]=o[11]=o[12]=o[13]=o[14]=o[15]=0),e)for(f=this.start;n<c&&f<64;++n)o[f>>2]|=r[n]<<SHIFT[f++&3];else for(f=this.start;n<c&&f<64;++n)i=r.charCodeAt(n),i<128?o[f>>2]|=i<<SHIFT[f++&3]:i<2048?(o[f>>2]|=(192|i>>6)<<SHIFT[f++&3],o[f>>2]|=(128|i&63)<<SHIFT[f++&3]):i<55296||i>=57344?(o[f>>2]|=(224|i>>12)<<SHIFT[f++&3],o[f>>2]|=(128|i>>6&63)<<SHIFT[f++&3],o[f>>2]|=(128|i&63)<<SHIFT[f++&3]):(i=65536+((i&1023)<<10|r.charCodeAt(++n)&1023),o[f>>2]|=(240|i>>18)<<SHIFT[f++&3],o[f>>2]|=(128|i>>12&63)<<SHIFT[f++&3],o[f>>2]|=(128|i>>6&63)<<SHIFT[f++&3],o[f>>2]|=(128|i&63)<<SHIFT[f++&3]);this.lastByteIndex=f,this.bytes+=f-this.start,f>=64?(this.block=o[16],this.start=f-64,this.hash(),this.hashed=!0):this.start=f}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,e=this.lastByteIndex;r[16]=this.block,r[e>>2]|=EXTRA[e&3],this.block=r[16],e>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,e=this.h1,t=this.h2,i=this.h3,n=this.h4,f=this.h5,c=this.h6,o=this.h7,h=this.blocks,b,y,x,M,S,A,E,O,T,z,H;for(b=16;b<64;++b)S=h[b-15],y=(S>>>7|S<<25)^(S>>>18|S<<14)^S>>>3,S=h[b-2],x=(S>>>17|S<<15)^(S>>>19|S<<13)^S>>>10,h[b]=h[b-16]+y+h[b-7]+x<<0;for(H=e&t,b=0;b<64;b+=4)this.first?(this.is224?(O=300032,S=h[0]-1413257819,o=S-150054599<<0,i=S+24177077<<0):(O=704751109,S=h[0]-210244248,o=S-1521486534<<0,i=S+143694565<<0),this.first=!1):(y=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),x=(n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7),O=r&e,M=O^r&t^H,E=n&f^~n&c,S=o+x+E+K[b]+h[b],A=y+M,o=i+S<<0,i=S+A<<0),y=(i>>>2|i<<30)^(i>>>13|i<<19)^(i>>>22|i<<10),x=(o>>>6|o<<26)^(o>>>11|o<<21)^(o>>>25|o<<7),T=i&r,M=T^i&e^O,E=o&n^~o&f,S=c+x+E+K[b+1]+h[b+1],A=y+M,c=t+S<<0,t=S+A<<0,y=(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),x=(c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7),z=t&i,M=z^t&r^T,E=c&o^~c&n,S=f+x+E+K[b+2]+h[b+2],A=y+M,f=e+S<<0,e=S+A<<0,y=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),x=(f>>>6|f<<26)^(f>>>11|f<<21)^(f>>>25|f<<7),H=e&t,M=H^e&i^z,E=f&c^~f&o,S=n+x+E+K[b+3]+h[b+3],A=y+M,n=r+S<<0,r=S+A<<0;this.h0=this.h0+r<<0,this.h1=this.h1+e<<0,this.h2=this.h2+t<<0,this.h3=this.h3+i<<0,this.h4=this.h4+n<<0,this.h5=this.h5+f<<0,this.h6=this.h6+c<<0,this.h7=this.h7+o<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,e=this.h1,t=this.h2,i=this.h3,n=this.h4,f=this.h5,c=this.h6,o=this.h7,h=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[t&15]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[f>>28&15]+HEX_CHARS[f>>24&15]+HEX_CHARS[f>>20&15]+HEX_CHARS[f>>16&15]+HEX_CHARS[f>>12&15]+HEX_CHARS[f>>8&15]+HEX_CHARS[f>>4&15]+HEX_CHARS[f&15]+HEX_CHARS[c>>28&15]+HEX_CHARS[c>>24&15]+HEX_CHARS[c>>20&15]+HEX_CHARS[c>>16&15]+HEX_CHARS[c>>12&15]+HEX_CHARS[c>>8&15]+HEX_CHARS[c>>4&15]+HEX_CHARS[c&15];return this.is224||(h+=HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15]),h},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,e=this.h1,t=this.h2,i=this.h3,n=this.h4,f=this.h5,c=this.h6,o=this.h7,h=[r>>24&255,r>>16&255,r>>8&255,r&255,e>>24&255,e>>16&255,e>>8&255,e&255,t>>24&255,t>>16&255,t>>8&255,t&255,i>>24&255,i>>16&255,i>>8&255,i&255,n>>24&255,n>>16&255,n>>8&255,n&255,f>>24&255,f>>16&255,f>>8&255,f&255,c>>24&255,c>>16&255,c>>8&255,c&255];return this.is224||h.push(o>>24&255,o>>16&255,o>>8&255,o&255),h},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),e=new DataView(r);return e.setUint32(0,this.h0),e.setUint32(4,this.h1),e.setUint32(8,this.h2),e.setUint32(12,this.h3),e.setUint32(16,this.h4),e.setUint32(20,this.h5),e.setUint32(24,this.h6),this.is224||e.setUint32(28,this.h7),r};function HmacSha256(r,e,t){var i,n=typeof r;if(n==="string"){var f=[],c=r.length,o=0,h;for(i=0;i<c;++i)h=r.charCodeAt(i),h<128?f[o++]=h:h<2048?(f[o++]=192|h>>6,f[o++]=128|h&63):h<55296||h>=57344?(f[o++]=224|h>>12,f[o++]=128|h>>6&63,f[o++]=128|h&63):(h=65536+((h&1023)<<10|r.charCodeAt(++i)&1023),f[o++]=240|h>>18,f[o++]=128|h>>12&63,f[o++]=128|h>>6&63,f[o++]=128|h&63);r=f}else if(n==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(e,!0).update(r).array());var b=[],y=[];for(i=0;i<64;++i){var x=r[i]||0;b[i]=92^x,y[i]=54^x}Sha256.call(this,e,t),this.update(y),this.oKeyPad=b,this.inner=!0,this.sharedMemory=t}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var ea=P((Fh,xd)=>{xd.exports={name:"elliptic",version:"6.5.4",description:"EC cryptography",main:"lib/elliptic.js",files:["lib"],scripts:{lint:"eslint lib test","lint:fix":"npm run lint -- --fix",unit:"istanbul test _mocha --reporter=spec test/index.js",test:"npm run lint && npm run unit",version:"grunt dist && git add dist/"},repository:{type:"git",url:"git@github.com:indutny/elliptic"},keywords:["EC","Elliptic","curve","Cryptography"],author:"Fedor Indutny <fedor@indutny.com>",license:"MIT",bugs:{url:"https://github.com/indutny/elliptic/issues"},homepage:"https://github.com/indutny/elliptic",devDependencies:{brfs:"^2.0.2",coveralls:"^3.1.0",eslint:"^7.6.0",grunt:"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1",istanbul:"^0.4.5",mocha:"^8.0.1"},dependencies:{"bn.js":"^4.11.9",brorand:"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1",inherits:"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}});var pt=P((ta,un)=>{(function(r,e){"use strict";function t(g,a){if(!g)throw new Error(a||"Assertion failed")}function i(g,a){g.super_=a;var d=function(){};d.prototype=a.prototype,g.prototype=new d,g.prototype.constructor=g}function n(g,a,d){if(n.isBN(g))return g;this.negative=0,this.words=null,this.length=0,this.red=null,g!==null&&((a==="le"||a==="be")&&(d=a,a=10),this._init(g||0,a||10,d||"be"))}typeof r=="object"?r.exports=n:e.BN=n,n.BN=n,n.wordSize=26;var f;try{typeof window!="undefined"&&typeof window.Buffer!="undefined"?f=window.Buffer:f=require("buffer").Buffer}catch(g){}n.isBN=function(a){return a instanceof n?!0:a!==null&&typeof a=="object"&&a.constructor.wordSize===n.wordSize&&Array.isArray(a.words)},n.max=function(a,d){return a.cmp(d)>0?a:d},n.min=function(a,d){return a.cmp(d)<0?a:d},n.prototype._init=function(a,d,u){if(typeof a=="number")return this._initNumber(a,d,u);if(typeof a=="object")return this._initArray(a,d,u);d==="hex"&&(d=16),t(d===(d|0)&&d>=2&&d<=36),a=a.toString().replace(/\s+/g,"");var l=0;a[0]==="-"&&(l++,this.negative=1),l<a.length&&(d===16?this._parseHex(a,l,u):(this._parseBase(a,d,l),u==="le"&&this._initArray(this.toArray(),d,u)))},n.prototype._initNumber=function(a,d,u){a<0&&(this.negative=1,a=-a),a<67108864?(this.words=[a&67108863],this.length=1):a<4503599627370496?(this.words=[a&67108863,a/67108864&67108863],this.length=2):(t(a<9007199254740992),this.words=[a&67108863,a/67108864&67108863,1],this.length=3),u==="le"&&this._initArray(this.toArray(),d,u)},n.prototype._initArray=function(a,d,u){if(t(typeof a.length=="number"),a.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(a.length/3),this.words=new Array(this.length);for(var l=0;l<this.length;l++)this.words[l]=0;var m,w,_=0;if(u==="be")for(l=a.length-1,m=0;l>=0;l-=3)w=a[l]|a[l-1]<<8|a[l-2]<<16,this.words[m]|=w<<_&67108863,this.words[m+1]=w>>>26-_&67108863,_+=24,_>=26&&(_-=26,m++);else if(u==="le")for(l=0,m=0;l<a.length;l+=3)w=a[l]|a[l+1]<<8|a[l+2]<<16,this.words[m]|=w<<_&67108863,this.words[m+1]=w>>>26-_&67108863,_+=24,_>=26&&(_-=26,m++);return this.strip()};function c(g,a){var d=g.charCodeAt(a);return d>=65&&d<=70?d-55:d>=97&&d<=102?d-87:d-48&15}function o(g,a,d){var u=c(g,d);return d-1>=a&&(u|=c(g,d-1)<<4),u}n.prototype._parseHex=function(a,d,u){this.length=Math.ceil((a.length-d)/6),this.words=new Array(this.length);for(var l=0;l<this.length;l++)this.words[l]=0;var m=0,w=0,_;if(u==="be")for(l=a.length-1;l>=d;l-=2)_=o(a,d,l)<<m,this.words[w]|=_&67108863,m>=18?(m-=18,w+=1,this.words[w]|=_>>>26):m+=8;else{var p=a.length-d;for(l=p%2==0?d+1:d;l<a.length;l+=2)_=o(a,d,l)<<m,this.words[w]|=_&67108863,m>=18?(m-=18,w+=1,this.words[w]|=_>>>26):m+=8}this.strip()};function h(g,a,d,u){for(var l=0,m=Math.min(g.length,d),w=a;w<m;w++){var _=g.charCodeAt(w)-48;l*=u,_>=49?l+=_-49+10:_>=17?l+=_-17+10:l+=_}return l}n.prototype._parseBase=function(a,d,u){this.words=[0],this.length=1;for(var l=0,m=1;m<=67108863;m*=d)l++;l--,m=m/d|0;for(var w=a.length-u,_=w%l,p=Math.min(w,w-_)+u,s=0,v=u;v<p;v+=l)s=h(a,v,v+l,d),this.imuln(m),this.words[0]+s<67108864?this.words[0]+=s:this._iaddn(s);if(_!==0){var I=1;for(s=h(a,v,a.length,d),v=0;v<_;v++)I*=d;this.imuln(I),this.words[0]+s<67108864?this.words[0]+=s:this._iaddn(s)}this.strip()},n.prototype.copy=function(a){a.words=new Array(this.length);for(var d=0;d<this.length;d++)a.words[d]=this.words[d];a.length=this.length,a.negative=this.negative,a.red=this.red},n.prototype.clone=function(){var a=new n(null);return this.copy(a),a},n.prototype._expand=function(a){for(;this.length<a;)this.words[this.length++]=0;return this},n.prototype.strip=function(){for(;this.length>1&&this.words[this.length-1]===0;)this.length--;return this._normSign()},n.prototype._normSign=function(){return this.length===1&&this.words[0]===0&&(this.negative=0),this},n.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var b=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],y=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],x=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];n.prototype.toString=function(a,d){a=a||10,d=d|0||1;var u;if(a===16||a==="hex"){u="";for(var l=0,m=0,w=0;w<this.length;w++){var _=this.words[w],p=((_<<l|m)&16777215).toString(16);m=_>>>24-l&16777215,m!==0||w!==this.length-1?u=b[6-p.length]+p+u:u=p+u,l+=2,l>=26&&(l-=26,w--)}for(m!==0&&(u=m.toString(16)+u);u.length%d!=0;)u="0"+u;return this.negative!==0&&(u="-"+u),u}if(a===(a|0)&&a>=2&&a<=36){var s=y[a],v=x[a];u="";var I=this.clone();for(I.negative=0;!I.isZero();){var R=I.modn(v).toString(a);I=I.idivn(v),I.isZero()?u=R+u:u=b[s-R.length]+R+u}for(this.isZero()&&(u="0"+u);u.length%d!=0;)u="0"+u;return this.negative!==0&&(u="-"+u),u}t(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var a=this.words[0];return this.length===2?a+=this.words[1]*67108864:this.length===3&&this.words[2]===1?a+=4503599627370496+this.words[1]*67108864:this.length>2&&t(!1,"Number can only safely store up to 53 bits"),this.negative!==0?-a:a},n.prototype.toJSON=function(){return this.toString(16)},n.prototype.toBuffer=function(a,d){return t(typeof f!="undefined"),this.toArrayLike(f,a,d)},n.prototype.toArray=function(a,d){return this.toArrayLike(Array,a,d)},n.prototype.toArrayLike=function(a,d,u){var l=this.byteLength(),m=u||Math.max(1,l);t(l<=m,"byte array longer than desired length"),t(m>0,"Requested array length <= 0"),this.strip();var w=d==="le",_=new a(m),p,s,v=this.clone();if(w){for(s=0;!v.isZero();s++)p=v.andln(255),v.iushrn(8),_[s]=p;for(;s<m;s++)_[s]=0}else{for(s=0;s<m-l;s++)_[s]=0;for(s=0;!v.isZero();s++)p=v.andln(255),v.iushrn(8),_[m-s-1]=p}return _},Math.clz32?n.prototype._countBits=function(a){return 32-Math.clz32(a)}:n.prototype._countBits=function(a){var d=a,u=0;return d>=4096&&(u+=13,d>>>=13),d>=64&&(u+=7,d>>>=7),d>=8&&(u+=4,d>>>=4),d>=2&&(u+=2,d>>>=2),u+d},n.prototype._zeroBits=function(a){if(a===0)return 26;var d=a,u=0;return(d&8191)==0&&(u+=13,d>>>=13),(d&127)==0&&(u+=7,d>>>=7),(d&15)==0&&(u+=4,d>>>=4),(d&3)==0&&(u+=2,d>>>=2),(d&1)==0&&u++,u},n.prototype.bitLength=function(){var a=this.words[this.length-1],d=this._countBits(a);return(this.length-1)*26+d};function M(g){for(var a=new Array(g.bitLength()),d=0;d<a.length;d++){var u=d/26|0,l=d%26;a[d]=(g.words[u]&1<<l)>>>l}return a}n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var a=0,d=0;d<this.length;d++){var u=this._zeroBits(this.words[d]);if(a+=u,u!==26)break}return a},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(a){return this.negative!==0?this.abs().inotn(a).iaddn(1):this.clone()},n.prototype.fromTwos=function(a){return this.testn(a-1)?this.notn(a).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return this.negative!==0},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(a){for(;this.length<a.length;)this.words[this.length++]=0;for(var d=0;d<a.length;d++)this.words[d]=this.words[d]|a.words[d];return this.strip()},n.prototype.ior=function(a){return t((this.negative|a.negative)==0),this.iuor(a)},n.prototype.or=function(a){return this.length>a.length?this.clone().ior(a):a.clone().ior(this)},n.prototype.uor=function(a){return this.length>a.length?this.clone().iuor(a):a.clone().iuor(this)},n.prototype.iuand=function(a){var d;this.length>a.length?d=a:d=this;for(var u=0;u<d.length;u++)this.words[u]=this.words[u]&a.words[u];return this.length=d.length,this.strip()},n.prototype.iand=function(a){return t((this.negative|a.negative)==0),this.iuand(a)},n.prototype.and=function(a){return this.length>a.length?this.clone().iand(a):a.clone().iand(this)},n.prototype.uand=function(a){return this.length>a.length?this.clone().iuand(a):a.clone().iuand(this)},n.prototype.iuxor=function(a){var d,u;this.length>a.length?(d=this,u=a):(d=a,u=this);for(var l=0;l<u.length;l++)this.words[l]=d.words[l]^u.words[l];if(this!==d)for(;l<d.length;l++)this.words[l]=d.words[l];return this.length=d.length,this.strip()},n.prototype.ixor=function(a){return t((this.negative|a.negative)==0),this.iuxor(a)},n.prototype.xor=function(a){return this.length>a.length?this.clone().ixor(a):a.clone().ixor(this)},n.prototype.uxor=function(a){return this.length>a.length?this.clone().iuxor(a):a.clone().iuxor(this)},n.prototype.inotn=function(a){t(typeof a=="number"&&a>=0);var d=Math.ceil(a/26)|0,u=a%26;this._expand(d),u>0&&d--;for(var l=0;l<d;l++)this.words[l]=~this.words[l]&67108863;return u>0&&(this.words[l]=~this.words[l]&67108863>>26-u),this.strip()},n.prototype.notn=function(a){return this.clone().inotn(a)},n.prototype.setn=function(a,d){t(typeof a=="number"&&a>=0);var u=a/26|0,l=a%26;return this._expand(u+1),d?this.words[u]=this.words[u]|1<<l:this.words[u]=this.words[u]&~(1<<l),this.strip()},n.prototype.iadd=function(a){var d;if(this.negative!==0&&a.negative===0)return this.negative=0,d=this.isub(a),this.negative^=1,this._normSign();if(this.negative===0&&a.negative!==0)return a.negative=0,d=this.isub(a),a.negative=1,d._normSign();var u,l;this.length>a.length?(u=this,l=a):(u=a,l=this);for(var m=0,w=0;w<l.length;w++)d=(u.words[w]|0)+(l.words[w]|0)+m,this.words[w]=d&67108863,m=d>>>26;for(;m!==0&&w<u.length;w++)d=(u.words[w]|0)+m,this.words[w]=d&67108863,m=d>>>26;if(this.length=u.length,m!==0)this.words[this.length]=m,this.length++;else if(u!==this)for(;w<u.length;w++)this.words[w]=u.words[w];return this},n.prototype.add=function(a){var d;return a.negative!==0&&this.negative===0?(a.negative=0,d=this.sub(a),a.negative^=1,d):a.negative===0&&this.negative!==0?(this.negative=0,d=a.sub(this),this.negative=1,d):this.length>a.length?this.clone().iadd(a):a.clone().iadd(this)},n.prototype.isub=function(a){if(a.negative!==0){a.negative=0;var d=this.iadd(a);return a.negative=1,d._normSign()}else if(this.negative!==0)return this.negative=0,this.iadd(a),this.negative=1,this._normSign();var u=this.cmp(a);if(u===0)return this.negative=0,this.length=1,this.words[0]=0,this;var l,m;u>0?(l=this,m=a):(l=a,m=this);for(var w=0,_=0;_<m.length;_++)d=(l.words[_]|0)-(m.words[_]|0)+w,w=d>>26,this.words[_]=d&67108863;for(;w!==0&&_<l.length;_++)d=(l.words[_]|0)+w,w=d>>26,this.words[_]=d&67108863;if(w===0&&_<l.length&&l!==this)for(;_<l.length;_++)this.words[_]=l.words[_];return this.length=Math.max(this.length,_),l!==this&&(this.negative=1),this.strip()},n.prototype.sub=function(a){return this.clone().isub(a)};function S(g,a,d){d.negative=a.negative^g.negative;var u=g.length+a.length|0;d.length=u,u=u-1|0;var l=g.words[0]|0,m=a.words[0]|0,w=l*m,_=w&67108863,p=w/67108864|0;d.words[0]=_;for(var s=1;s<u;s++){for(var v=p>>>26,I=p&67108863,R=Math.min(s,a.length-1),B=Math.max(0,s-g.length+1);B<=R;B++){var C=s-B|0;l=g.words[C]|0,m=a.words[B]|0,w=l*m+I,v+=w/67108864|0,I=w&67108863}d.words[s]=I|0,p=v|0}return p!==0?d.words[s]=p|0:d.length--,d.strip()}var A=function(a,d,u){var l=a.words,m=d.words,w=u.words,_=0,p,s,v,I=l[0]|0,R=I&8191,B=I>>>13,C=l[1]|0,k=C&8191,W=C>>>13,qt=l[2]|0,V=qt&8191,j=qt>>>13,Zn=l[3]|0,Q=Zn&8191,ee=Zn>>>13,Qn=l[4]|0,te=Qn&8191,re=Qn>>>13,ef=l[5]|0,ie=ef&8191,ne=ef>>>13,tf=l[6]|0,fe=tf&8191,ae=tf>>>13,rf=l[7]|0,se=rf&8191,oe=rf>>>13,nf=l[8]|0,de=nf&8191,ce=nf>>>13,ff=l[9]|0,he=ff&8191,ue=ff>>>13,af=m[0]|0,le=af&8191,be=af>>>13,sf=m[1]|0,pe=sf&8191,ve=sf>>>13,of=m[2]|0,me=of&8191,ye=of>>>13,df=m[3]|0,ge=df&8191,xe=df>>>13,cf=m[4]|0,we=cf&8191,_e=cf>>>13,hf=m[5]|0,Se=hf&8191,Me=hf>>>13,uf=m[6]|0,Ae=uf&8191,Ee=uf>>>13,lf=m[7]|0,Ie=lf&8191,Te=lf>>>13,bf=m[8]|0,Re=bf&8191,Be=bf>>>13,pf=m[9]|0,Pe=pf&8191,Fe=pf>>>13;u.negative=a.negative^d.negative,u.length=19,p=Math.imul(R,le),s=Math.imul(R,be),s=s+Math.imul(B,le)|0,v=Math.imul(B,be);var Ni=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Ni>>>26)|0,Ni&=67108863,p=Math.imul(k,le),s=Math.imul(k,be),s=s+Math.imul(W,le)|0,v=Math.imul(W,be),p=p+Math.imul(R,pe)|0,s=s+Math.imul(R,ve)|0,s=s+Math.imul(B,pe)|0,v=v+Math.imul(B,ve)|0;var Ci=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Ci>>>26)|0,Ci&=67108863,p=Math.imul(V,le),s=Math.imul(V,be),s=s+Math.imul(j,le)|0,v=Math.imul(j,be),p=p+Math.imul(k,pe)|0,s=s+Math.imul(k,ve)|0,s=s+Math.imul(W,pe)|0,v=v+Math.imul(W,ve)|0,p=p+Math.imul(R,me)|0,s=s+Math.imul(R,ye)|0,s=s+Math.imul(B,me)|0,v=v+Math.imul(B,ye)|0;var Ui=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Ui>>>26)|0,Ui&=67108863,p=Math.imul(Q,le),s=Math.imul(Q,be),s=s+Math.imul(ee,le)|0,v=Math.imul(ee,be),p=p+Math.imul(V,pe)|0,s=s+Math.imul(V,ve)|0,s=s+Math.imul(j,pe)|0,v=v+Math.imul(j,ve)|0,p=p+Math.imul(k,me)|0,s=s+Math.imul(k,ye)|0,s=s+Math.imul(W,me)|0,v=v+Math.imul(W,ye)|0,p=p+Math.imul(R,ge)|0,s=s+Math.imul(R,xe)|0,s=s+Math.imul(B,ge)|0,v=v+Math.imul(B,xe)|0;var qi=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(qi>>>26)|0,qi&=67108863,p=Math.imul(te,le),s=Math.imul(te,be),s=s+Math.imul(re,le)|0,v=Math.imul(re,be),p=p+Math.imul(Q,pe)|0,s=s+Math.imul(Q,ve)|0,s=s+Math.imul(ee,pe)|0,v=v+Math.imul(ee,ve)|0,p=p+Math.imul(V,me)|0,s=s+Math.imul(V,ye)|0,s=s+Math.imul(j,me)|0,v=v+Math.imul(j,ye)|0,p=p+Math.imul(k,ge)|0,s=s+Math.imul(k,xe)|0,s=s+Math.imul(W,ge)|0,v=v+Math.imul(W,xe)|0,p=p+Math.imul(R,we)|0,s=s+Math.imul(R,_e)|0,s=s+Math.imul(B,we)|0,v=v+Math.imul(B,_e)|0;var zi=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(zi>>>26)|0,zi&=67108863,p=Math.imul(ie,le),s=Math.imul(ie,be),s=s+Math.imul(ne,le)|0,v=Math.imul(ne,be),p=p+Math.imul(te,pe)|0,s=s+Math.imul(te,ve)|0,s=s+Math.imul(re,pe)|0,v=v+Math.imul(re,ve)|0,p=p+Math.imul(Q,me)|0,s=s+Math.imul(Q,ye)|0,s=s+Math.imul(ee,me)|0,v=v+Math.imul(ee,ye)|0,p=p+Math.imul(V,ge)|0,s=s+Math.imul(V,xe)|0,s=s+Math.imul(j,ge)|0,v=v+Math.imul(j,xe)|0,p=p+Math.imul(k,we)|0,s=s+Math.imul(k,_e)|0,s=s+Math.imul(W,we)|0,v=v+Math.imul(W,_e)|0,p=p+Math.imul(R,Se)|0,s=s+Math.imul(R,Me)|0,s=s+Math.imul(B,Se)|0,v=v+Math.imul(B,Me)|0;var Hi=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Hi>>>26)|0,Hi&=67108863,p=Math.imul(fe,le),s=Math.imul(fe,be),s=s+Math.imul(ae,le)|0,v=Math.imul(ae,be),p=p+Math.imul(ie,pe)|0,s=s+Math.imul(ie,ve)|0,s=s+Math.imul(ne,pe)|0,v=v+Math.imul(ne,ve)|0,p=p+Math.imul(te,me)|0,s=s+Math.imul(te,ye)|0,s=s+Math.imul(re,me)|0,v=v+Math.imul(re,ye)|0,p=p+Math.imul(Q,ge)|0,s=s+Math.imul(Q,xe)|0,s=s+Math.imul(ee,ge)|0,v=v+Math.imul(ee,xe)|0,p=p+Math.imul(V,we)|0,s=s+Math.imul(V,_e)|0,s=s+Math.imul(j,we)|0,v=v+Math.imul(j,_e)|0,p=p+Math.imul(k,Se)|0,s=s+Math.imul(k,Me)|0,s=s+Math.imul(W,Se)|0,v=v+Math.imul(W,Me)|0,p=p+Math.imul(R,Ae)|0,s=s+Math.imul(R,Ee)|0,s=s+Math.imul(B,Ae)|0,v=v+Math.imul(B,Ee)|0;var Di=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Di>>>26)|0,Di&=67108863,p=Math.imul(se,le),s=Math.imul(se,be),s=s+Math.imul(oe,le)|0,v=Math.imul(oe,be),p=p+Math.imul(fe,pe)|0,s=s+Math.imul(fe,ve)|0,s=s+Math.imul(ae,pe)|0,v=v+Math.imul(ae,ve)|0,p=p+Math.imul(ie,me)|0,s=s+Math.imul(ie,ye)|0,s=s+Math.imul(ne,me)|0,v=v+Math.imul(ne,ye)|0,p=p+Math.imul(te,ge)|0,s=s+Math.imul(te,xe)|0,s=s+Math.imul(re,ge)|0,v=v+Math.imul(re,xe)|0,p=p+Math.imul(Q,we)|0,s=s+Math.imul(Q,_e)|0,s=s+Math.imul(ee,we)|0,v=v+Math.imul(ee,_e)|0,p=p+Math.imul(V,Se)|0,s=s+Math.imul(V,Me)|0,s=s+Math.imul(j,Se)|0,v=v+Math.imul(j,Me)|0,p=p+Math.imul(k,Ae)|0,s=s+Math.imul(k,Ee)|0,s=s+Math.imul(W,Ae)|0,v=v+Math.imul(W,Ee)|0,p=p+Math.imul(R,Ie)|0,s=s+Math.imul(R,Te)|0,s=s+Math.imul(B,Ie)|0,v=v+Math.imul(B,Te)|0;var ki=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(ki>>>26)|0,ki&=67108863,p=Math.imul(de,le),s=Math.imul(de,be),s=s+Math.imul(ce,le)|0,v=Math.imul(ce,be),p=p+Math.imul(se,pe)|0,s=s+Math.imul(se,ve)|0,s=s+Math.imul(oe,pe)|0,v=v+Math.imul(oe,ve)|0,p=p+Math.imul(fe,me)|0,s=s+Math.imul(fe,ye)|0,s=s+Math.imul(ae,me)|0,v=v+Math.imul(ae,ye)|0,p=p+Math.imul(ie,ge)|0,s=s+Math.imul(ie,xe)|0,s=s+Math.imul(ne,ge)|0,v=v+Math.imul(ne,xe)|0,p=p+Math.imul(te,we)|0,s=s+Math.imul(te,_e)|0,s=s+Math.imul(re,we)|0,v=v+Math.imul(re,_e)|0,p=p+Math.imul(Q,Se)|0,s=s+Math.imul(Q,Me)|0,s=s+Math.imul(ee,Se)|0,v=v+Math.imul(ee,Me)|0,p=p+Math.imul(V,Ae)|0,s=s+Math.imul(V,Ee)|0,s=s+Math.imul(j,Ae)|0,v=v+Math.imul(j,Ee)|0,p=p+Math.imul(k,Ie)|0,s=s+Math.imul(k,Te)|0,s=s+Math.imul(W,Ie)|0,v=v+Math.imul(W,Te)|0,p=p+Math.imul(R,Re)|0,s=s+Math.imul(R,Be)|0,s=s+Math.imul(B,Re)|0,v=v+Math.imul(B,Be)|0;var Li=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Li>>>26)|0,Li&=67108863,p=Math.imul(he,le),s=Math.imul(he,be),s=s+Math.imul(ue,le)|0,v=Math.imul(ue,be),p=p+Math.imul(de,pe)|0,s=s+Math.imul(de,ve)|0,s=s+Math.imul(ce,pe)|0,v=v+Math.imul(ce,ve)|0,p=p+Math.imul(se,me)|0,s=s+Math.imul(se,ye)|0,s=s+Math.imul(oe,me)|0,v=v+Math.imul(oe,ye)|0,p=p+Math.imul(fe,ge)|0,s=s+Math.imul(fe,xe)|0,s=s+Math.imul(ae,ge)|0,v=v+Math.imul(ae,xe)|0,p=p+Math.imul(ie,we)|0,s=s+Math.imul(ie,_e)|0,s=s+Math.imul(ne,we)|0,v=v+Math.imul(ne,_e)|0,p=p+Math.imul(te,Se)|0,s=s+Math.imul(te,Me)|0,s=s+Math.imul(re,Se)|0,v=v+Math.imul(re,Me)|0,p=p+Math.imul(Q,Ae)|0,s=s+Math.imul(Q,Ee)|0,s=s+Math.imul(ee,Ae)|0,v=v+Math.imul(ee,Ee)|0,p=p+Math.imul(V,Ie)|0,s=s+Math.imul(V,Te)|0,s=s+Math.imul(j,Ie)|0,v=v+Math.imul(j,Te)|0,p=p+Math.imul(k,Re)|0,s=s+Math.imul(k,Be)|0,s=s+Math.imul(W,Re)|0,v=v+Math.imul(W,Be)|0,p=p+Math.imul(R,Pe)|0,s=s+Math.imul(R,Fe)|0,s=s+Math.imul(B,Pe)|0,v=v+Math.imul(B,Fe)|0;var $i=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+($i>>>26)|0,$i&=67108863,p=Math.imul(he,pe),s=Math.imul(he,ve),s=s+Math.imul(ue,pe)|0,v=Math.imul(ue,ve),p=p+Math.imul(de,me)|0,s=s+Math.imul(de,ye)|0,s=s+Math.imul(ce,me)|0,v=v+Math.imul(ce,ye)|0,p=p+Math.imul(se,ge)|0,s=s+Math.imul(se,xe)|0,s=s+Math.imul(oe,ge)|0,v=v+Math.imul(oe,xe)|0,p=p+Math.imul(fe,we)|0,s=s+Math.imul(fe,_e)|0,s=s+Math.imul(ae,we)|0,v=v+Math.imul(ae,_e)|0,p=p+Math.imul(ie,Se)|0,s=s+Math.imul(ie,Me)|0,s=s+Math.imul(ne,Se)|0,v=v+Math.imul(ne,Me)|0,p=p+Math.imul(te,Ae)|0,s=s+Math.imul(te,Ee)|0,s=s+Math.imul(re,Ae)|0,v=v+Math.imul(re,Ee)|0,p=p+Math.imul(Q,Ie)|0,s=s+Math.imul(Q,Te)|0,s=s+Math.imul(ee,Ie)|0,v=v+Math.imul(ee,Te)|0,p=p+Math.imul(V,Re)|0,s=s+Math.imul(V,Be)|0,s=s+Math.imul(j,Re)|0,v=v+Math.imul(j,Be)|0,p=p+Math.imul(k,Pe)|0,s=s+Math.imul(k,Fe)|0,s=s+Math.imul(W,Pe)|0,v=v+Math.imul(W,Fe)|0;var Wi=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Wi>>>26)|0,Wi&=67108863,p=Math.imul(he,me),s=Math.imul(he,ye),s=s+Math.imul(ue,me)|0,v=Math.imul(ue,ye),p=p+Math.imul(de,ge)|0,s=s+Math.imul(de,xe)|0,s=s+Math.imul(ce,ge)|0,v=v+Math.imul(ce,xe)|0,p=p+Math.imul(se,we)|0,s=s+Math.imul(se,_e)|0,s=s+Math.imul(oe,we)|0,v=v+Math.imul(oe,_e)|0,p=p+Math.imul(fe,Se)|0,s=s+Math.imul(fe,Me)|0,s=s+Math.imul(ae,Se)|0,v=v+Math.imul(ae,Me)|0,p=p+Math.imul(ie,Ae)|0,s=s+Math.imul(ie,Ee)|0,s=s+Math.imul(ne,Ae)|0,v=v+Math.imul(ne,Ee)|0,p=p+Math.imul(te,Ie)|0,s=s+Math.imul(te,Te)|0,s=s+Math.imul(re,Ie)|0,v=v+Math.imul(re,Te)|0,p=p+Math.imul(Q,Re)|0,s=s+Math.imul(Q,Be)|0,s=s+Math.imul(ee,Re)|0,v=v+Math.imul(ee,Be)|0,p=p+Math.imul(V,Pe)|0,s=s+Math.imul(V,Fe)|0,s=s+Math.imul(j,Pe)|0,v=v+Math.imul(j,Fe)|0;var Vi=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Vi>>>26)|0,Vi&=67108863,p=Math.imul(he,ge),s=Math.imul(he,xe),s=s+Math.imul(ue,ge)|0,v=Math.imul(ue,xe),p=p+Math.imul(de,we)|0,s=s+Math.imul(de,_e)|0,s=s+Math.imul(ce,we)|0,v=v+Math.imul(ce,_e)|0,p=p+Math.imul(se,Se)|0,s=s+Math.imul(se,Me)|0,s=s+Math.imul(oe,Se)|0,v=v+Math.imul(oe,Me)|0,p=p+Math.imul(fe,Ae)|0,s=s+Math.imul(fe,Ee)|0,s=s+Math.imul(ae,Ae)|0,v=v+Math.imul(ae,Ee)|0,p=p+Math.imul(ie,Ie)|0,s=s+Math.imul(ie,Te)|0,s=s+Math.imul(ne,Ie)|0,v=v+Math.imul(ne,Te)|0,p=p+Math.imul(te,Re)|0,s=s+Math.imul(te,Be)|0,s=s+Math.imul(re,Re)|0,v=v+Math.imul(re,Be)|0,p=p+Math.imul(Q,Pe)|0,s=s+Math.imul(Q,Fe)|0,s=s+Math.imul(ee,Pe)|0,v=v+Math.imul(ee,Fe)|0;var Xi=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Xi>>>26)|0,Xi&=67108863,p=Math.imul(he,we),s=Math.imul(he,_e),s=s+Math.imul(ue,we)|0,v=Math.imul(ue,_e),p=p+Math.imul(de,Se)|0,s=s+Math.imul(de,Me)|0,s=s+Math.imul(ce,Se)|0,v=v+Math.imul(ce,Me)|0,p=p+Math.imul(se,Ae)|0,s=s+Math.imul(se,Ee)|0,s=s+Math.imul(oe,Ae)|0,v=v+Math.imul(oe,Ee)|0,p=p+Math.imul(fe,Ie)|0,s=s+Math.imul(fe,Te)|0,s=s+Math.imul(ae,Ie)|0,v=v+Math.imul(ae,Te)|0,p=p+Math.imul(ie,Re)|0,s=s+Math.imul(ie,Be)|0,s=s+Math.imul(ne,Re)|0,v=v+Math.imul(ne,Be)|0,p=p+Math.imul(te,Pe)|0,s=s+Math.imul(te,Fe)|0,s=s+Math.imul(re,Pe)|0,v=v+Math.imul(re,Fe)|0;var Gi=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Gi>>>26)|0,Gi&=67108863,p=Math.imul(he,Se),s=Math.imul(he,Me),s=s+Math.imul(ue,Se)|0,v=Math.imul(ue,Me),p=p+Math.imul(de,Ae)|0,s=s+Math.imul(de,Ee)|0,s=s+Math.imul(ce,Ae)|0,v=v+Math.imul(ce,Ee)|0,p=p+Math.imul(se,Ie)|0,s=s+Math.imul(se,Te)|0,s=s+Math.imul(oe,Ie)|0,v=v+Math.imul(oe,Te)|0,p=p+Math.imul(fe,Re)|0,s=s+Math.imul(fe,Be)|0,s=s+Math.imul(ae,Re)|0,v=v+Math.imul(ae,Be)|0,p=p+Math.imul(ie,Pe)|0,s=s+Math.imul(ie,Fe)|0,s=s+Math.imul(ne,Pe)|0,v=v+Math.imul(ne,Fe)|0;var ji=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(ji>>>26)|0,ji&=67108863,p=Math.imul(he,Ae),s=Math.imul(he,Ee),s=s+Math.imul(ue,Ae)|0,v=Math.imul(ue,Ee),p=p+Math.imul(de,Ie)|0,s=s+Math.imul(de,Te)|0,s=s+Math.imul(ce,Ie)|0,v=v+Math.imul(ce,Te)|0,p=p+Math.imul(se,Re)|0,s=s+Math.imul(se,Be)|0,s=s+Math.imul(oe,Re)|0,v=v+Math.imul(oe,Be)|0,p=p+Math.imul(fe,Pe)|0,s=s+Math.imul(fe,Fe)|0,s=s+Math.imul(ae,Pe)|0,v=v+Math.imul(ae,Fe)|0;var Yi=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Yi>>>26)|0,Yi&=67108863,p=Math.imul(he,Ie),s=Math.imul(he,Te),s=s+Math.imul(ue,Ie)|0,v=Math.imul(ue,Te),p=p+Math.imul(de,Re)|0,s=s+Math.imul(de,Be)|0,s=s+Math.imul(ce,Re)|0,v=v+Math.imul(ce,Be)|0,p=p+Math.imul(se,Pe)|0,s=s+Math.imul(se,Fe)|0,s=s+Math.imul(oe,Pe)|0,v=v+Math.imul(oe,Fe)|0;var Ki=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Ki>>>26)|0,Ki&=67108863,p=Math.imul(he,Re),s=Math.imul(he,Be),s=s+Math.imul(ue,Re)|0,v=Math.imul(ue,Be),p=p+Math.imul(de,Pe)|0,s=s+Math.imul(de,Fe)|0,s=s+Math.imul(ce,Pe)|0,v=v+Math.imul(ce,Fe)|0;var Ji=(_+p|0)+((s&8191)<<13)|0;_=(v+(s>>>13)|0)+(Ji>>>26)|0,Ji&=67108863,p=Math.imul(he,Pe),s=Math.imul(he,Fe),s=s+Math.imul(ue,Pe)|0,v=Math.imul(ue,Fe);var Zi=(_+p|0)+((s&8191)<<13)|0;return _=(v+(s>>>13)|0)+(Zi>>>26)|0,Zi&=67108863,w[0]=Ni,w[1]=Ci,w[2]=Ui,w[3]=qi,w[4]=zi,w[5]=Hi,w[6]=Di,w[7]=ki,w[8]=Li,w[9]=$i,w[10]=Wi,w[11]=Vi,w[12]=Xi,w[13]=Gi,w[14]=ji,w[15]=Yi,w[16]=Ki,w[17]=Ji,w[18]=Zi,_!==0&&(w[19]=_,u.length++),u};Math.imul||(A=S);function E(g,a,d){d.negative=a.negative^g.negative,d.length=g.length+a.length;for(var u=0,l=0,m=0;m<d.length-1;m++){var w=l;l=0;for(var _=u&67108863,p=Math.min(m,a.length-1),s=Math.max(0,m-g.length+1);s<=p;s++){var v=m-s,I=g.words[v]|0,R=a.words[s]|0,B=I*R,C=B&67108863;w=w+(B/67108864|0)|0,C=C+_|0,_=C&67108863,w=w+(C>>>26)|0,l+=w>>>26,w&=67108863}d.words[m]=_,u=w,w=l}return u!==0?d.words[m]=u:d.length--,d.strip()}function O(g,a,d){var u=new T;return u.mulp(g,a,d)}n.prototype.mulTo=function(a,d){var u,l=this.length+a.length;return this.length===10&&a.length===10?u=A(this,a,d):l<63?u=S(this,a,d):l<1024?u=E(this,a,d):u=O(this,a,d),u};function T(g,a){this.x=g,this.y=a}T.prototype.makeRBT=function(a){for(var d=new Array(a),u=n.prototype._countBits(a)-1,l=0;l<a;l++)d[l]=this.revBin(l,u,a);return d},T.prototype.revBin=function(a,d,u){if(a===0||a===u-1)return a;for(var l=0,m=0;m<d;m++)l|=(a&1)<<d-m-1,a>>=1;return l},T.prototype.permute=function(a,d,u,l,m,w){for(var _=0;_<w;_++)l[_]=d[a[_]],m[_]=u[a[_]]},T.prototype.transform=function(a,d,u,l,m,w){this.permute(w,a,d,u,l,m);for(var _=1;_<m;_<<=1)for(var p=_<<1,s=Math.cos(2*Math.PI/p),v=Math.sin(2*Math.PI/p),I=0;I<m;I+=p)for(var R=s,B=v,C=0;C<_;C++){var k=u[I+C],W=l[I+C],qt=u[I+C+_],V=l[I+C+_],j=R*qt-B*V;V=R*V+B*qt,qt=j,u[I+C]=k+qt,l[I+C]=W+V,u[I+C+_]=k-qt,l[I+C+_]=W-V,C!==p&&(j=s*R-v*B,B=s*B+v*R,R=j)}},T.prototype.guessLen13b=function(a,d){var u=Math.max(d,a)|1,l=u&1,m=0;for(u=u/2|0;u;u=u>>>1)m++;return 1<<m+1+l},T.prototype.conjugate=function(a,d,u){if(!(u<=1))for(var l=0;l<u/2;l++){var m=a[l];a[l]=a[u-l-1],a[u-l-1]=m,m=d[l],d[l]=-d[u-l-1],d[u-l-1]=-m}},T.prototype.normalize13b=function(a,d){for(var u=0,l=0;l<d/2;l++){var m=Math.round(a[2*l+1]/d)*8192+Math.round(a[2*l]/d)+u;a[l]=m&67108863,m<67108864?u=0:u=m/67108864|0}return a},T.prototype.convert13b=function(a,d,u,l){for(var m=0,w=0;w<d;w++)m=m+(a[w]|0),u[2*w]=m&8191,m=m>>>13,u[2*w+1]=m&8191,m=m>>>13;for(w=2*d;w<l;++w)u[w]=0;t(m===0),t((m&~8191)==0)},T.prototype.stub=function(a){for(var d=new Array(a),u=0;u<a;u++)d[u]=0;return d},T.prototype.mulp=function(a,d,u){var l=2*this.guessLen13b(a.length,d.length),m=this.makeRBT(l),w=this.stub(l),_=new Array(l),p=new Array(l),s=new Array(l),v=new Array(l),I=new Array(l),R=new Array(l),B=u.words;B.length=l,this.convert13b(a.words,a.length,_,l),this.convert13b(d.words,d.length,v,l),this.transform(_,w,p,s,l,m),this.transform(v,w,I,R,l,m);for(var C=0;C<l;C++){var k=p[C]*I[C]-s[C]*R[C];s[C]=p[C]*R[C]+s[C]*I[C],p[C]=k}return this.conjugate(p,s,l),this.transform(p,s,B,w,l,m),this.conjugate(B,w,l),this.normalize13b(B,l),u.negative=a.negative^d.negative,u.length=a.length+d.length,u.strip()},n.prototype.mul=function(a){var d=new n(null);return d.words=new Array(this.length+a.length),this.mulTo(a,d)},n.prototype.mulf=function(a){var d=new n(null);return d.words=new Array(this.length+a.length),O(this,a,d)},n.prototype.imul=function(a){return this.clone().mulTo(a,this)},n.prototype.imuln=function(a){t(typeof a=="number"),t(a<67108864);for(var d=0,u=0;u<this.length;u++){var l=(this.words[u]|0)*a,m=(l&67108863)+(d&67108863);d>>=26,d+=l/67108864|0,d+=m>>>26,this.words[u]=m&67108863}return d!==0&&(this.words[u]=d,this.length++),this},n.prototype.muln=function(a){return this.clone().imuln(a)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(a){var d=M(a);if(d.length===0)return new n(1);for(var u=this,l=0;l<d.length&&d[l]===0;l++,u=u.sqr());if(++l<d.length)for(var m=u.sqr();l<d.length;l++,m=m.sqr())d[l]!==0&&(u=u.mul(m));return u},n.prototype.iushln=function(a){t(typeof a=="number"&&a>=0);var d=a%26,u=(a-d)/26,l=67108863>>>26-d<<26-d,m;if(d!==0){var w=0;for(m=0;m<this.length;m++){var _=this.words[m]&l,p=(this.words[m]|0)-_<<d;this.words[m]=p|w,w=_>>>26-d}w&&(this.words[m]=w,this.length++)}if(u!==0){for(m=this.length-1;m>=0;m--)this.words[m+u]=this.words[m];for(m=0;m<u;m++)this.words[m]=0;this.length+=u}return this.strip()},n.prototype.ishln=function(a){return t(this.negative===0),this.iushln(a)},n.prototype.iushrn=function(a,d,u){t(typeof a=="number"&&a>=0);var l;d?l=(d-d%26)/26:l=0;var m=a%26,w=Math.min((a-m)/26,this.length),_=67108863^67108863>>>m<<m,p=u;if(l-=w,l=Math.max(0,l),p){for(var s=0;s<w;s++)p.words[s]=this.words[s];p.length=w}if(w!==0)if(this.length>w)for(this.length-=w,s=0;s<this.length;s++)this.words[s]=this.words[s+w];else this.words[0]=0,this.length=1;var v=0;for(s=this.length-1;s>=0&&(v!==0||s>=l);s--){var I=this.words[s]|0;this.words[s]=v<<26-m|I>>>m,v=I&_}return p&&v!==0&&(p.words[p.length++]=v),this.length===0&&(this.words[0]=0,this.length=1),this.strip()},n.prototype.ishrn=function(a,d,u){return t(this.negative===0),this.iushrn(a,d,u)},n.prototype.shln=function(a){return this.clone().ishln(a)},n.prototype.ushln=function(a){return this.clone().iushln(a)},n.prototype.shrn=function(a){return this.clone().ishrn(a)},n.prototype.ushrn=function(a){return this.clone().iushrn(a)},n.prototype.testn=function(a){t(typeof a=="number"&&a>=0);var d=a%26,u=(a-d)/26,l=1<<d;if(this.length<=u)return!1;var m=this.words[u];return!!(m&l)},n.prototype.imaskn=function(a){t(typeof a=="number"&&a>=0);var d=a%26,u=(a-d)/26;if(t(this.negative===0,"imaskn works only with positive numbers"),this.length<=u)return this;if(d!==0&&u++,this.length=Math.min(u,this.length),d!==0){var l=67108863^67108863>>>d<<d;this.words[this.length-1]&=l}return this.strip()},n.prototype.maskn=function(a){return this.clone().imaskn(a)},n.prototype.iaddn=function(a){return t(typeof a=="number"),t(a<67108864),a<0?this.isubn(-a):this.negative!==0?this.length===1&&(this.words[0]|0)<a?(this.words[0]=a-(this.words[0]|0),this.negative=0,this):(this.negative=0,this.isubn(a),this.negative=1,this):this._iaddn(a)},n.prototype._iaddn=function(a){this.words[0]+=a;for(var d=0;d<this.length&&this.words[d]>=67108864;d++)this.words[d]-=67108864,d===this.length-1?this.words[d+1]=1:this.words[d+1]++;return this.length=Math.max(this.length,d+1),this},n.prototype.isubn=function(a){if(t(typeof a=="number"),t(a<67108864),a<0)return this.iaddn(-a);if(this.negative!==0)return this.negative=0,this.iaddn(a),this.negative=1,this;if(this.words[0]-=a,this.length===1&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var d=0;d<this.length&&this.words[d]<0;d++)this.words[d]+=67108864,this.words[d+1]-=1;return this.strip()},n.prototype.addn=function(a){return this.clone().iaddn(a)},n.prototype.subn=function(a){return this.clone().isubn(a)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(a,d,u){var l=a.length+u,m;this._expand(l);var w,_=0;for(m=0;m<a.length;m++){w=(this.words[m+u]|0)+_;var p=(a.words[m]|0)*d;w-=p&67108863,_=(w>>26)-(p/67108864|0),this.words[m+u]=w&67108863}for(;m<this.length-u;m++)w=(this.words[m+u]|0)+_,_=w>>26,this.words[m+u]=w&67108863;if(_===0)return this.strip();for(t(_===-1),_=0,m=0;m<this.length;m++)w=-(this.words[m]|0)+_,_=w>>26,this.words[m]=w&67108863;return this.negative=1,this.strip()},n.prototype._wordDiv=function(a,d){var u=this.length-a.length,l=this.clone(),m=a,w=m.words[m.length-1]|0,_=this._countBits(w);u=26-_,u!==0&&(m=m.ushln(u),l.iushln(u),w=m.words[m.length-1]|0);var p=l.length-m.length,s;if(d!=="mod"){s=new n(null),s.length=p+1,s.words=new Array(s.length);for(var v=0;v<s.length;v++)s.words[v]=0}var I=l.clone()._ishlnsubmul(m,1,p);I.negative===0&&(l=I,s&&(s.words[p]=1));for(var R=p-1;R>=0;R--){var B=(l.words[m.length+R]|0)*67108864+(l.words[m.length+R-1]|0);for(B=Math.min(B/w|0,67108863),l._ishlnsubmul(m,B,R);l.negative!==0;)B--,l.negative=0,l._ishlnsubmul(m,1,R),l.isZero()||(l.negative^=1);s&&(s.words[R]=B)}return s&&s.strip(),l.strip(),d!=="div"&&u!==0&&l.iushrn(u),{div:s||null,mod:l}},n.prototype.divmod=function(a,d,u){if(t(!a.isZero()),this.isZero())return{div:new n(0),mod:new n(0)};var l,m,w;return this.negative!==0&&a.negative===0?(w=this.neg().divmod(a,d),d!=="mod"&&(l=w.div.neg()),d!=="div"&&(m=w.mod.neg(),u&&m.negative!==0&&m.iadd(a)),{div:l,mod:m}):this.negative===0&&a.negative!==0?(w=this.divmod(a.neg(),d),d!=="mod"&&(l=w.div.neg()),{div:l,mod:w.mod}):(this.negative&a.negative)!=0?(w=this.neg().divmod(a.neg(),d),d!=="div"&&(m=w.mod.neg(),u&&m.negative!==0&&m.isub(a)),{div:w.div,mod:m}):a.length>this.length||this.cmp(a)<0?{div:new n(0),mod:this}:a.length===1?d==="div"?{div:this.divn(a.words[0]),mod:null}:d==="mod"?{div:null,mod:new n(this.modn(a.words[0]))}:{div:this.divn(a.words[0]),mod:new n(this.modn(a.words[0]))}:this._wordDiv(a,d)},n.prototype.div=function(a){return this.divmod(a,"div",!1).div},n.prototype.mod=function(a){return this.divmod(a,"mod",!1).mod},n.prototype.umod=function(a){return this.divmod(a,"mod",!0).mod},n.prototype.divRound=function(a){var d=this.divmod(a);if(d.mod.isZero())return d.div;var u=d.div.negative!==0?d.mod.isub(a):d.mod,l=a.ushrn(1),m=a.andln(1),w=u.cmp(l);return w<0||m===1&&w===0?d.div:d.div.negative!==0?d.div.isubn(1):d.div.iaddn(1)},n.prototype.modn=function(a){t(a<=67108863);for(var d=(1<<26)%a,u=0,l=this.length-1;l>=0;l--)u=(d*u+(this.words[l]|0))%a;return u},n.prototype.idivn=function(a){t(a<=67108863);for(var d=0,u=this.length-1;u>=0;u--){var l=(this.words[u]|0)+d*67108864;this.words[u]=l/a|0,d=l%a}return this.strip()},n.prototype.divn=function(a){return this.clone().idivn(a)},n.prototype.egcd=function(a){t(a.negative===0),t(!a.isZero());var d=this,u=a.clone();d.negative!==0?d=d.umod(a):d=d.clone();for(var l=new n(1),m=new n(0),w=new n(0),_=new n(1),p=0;d.isEven()&&u.isEven();)d.iushrn(1),u.iushrn(1),++p;for(var s=u.clone(),v=d.clone();!d.isZero();){for(var I=0,R=1;(d.words[0]&R)==0&&I<26;++I,R<<=1);if(I>0)for(d.iushrn(I);I-- >0;)(l.isOdd()||m.isOdd())&&(l.iadd(s),m.isub(v)),l.iushrn(1),m.iushrn(1);for(var B=0,C=1;(u.words[0]&C)==0&&B<26;++B,C<<=1);if(B>0)for(u.iushrn(B);B-- >0;)(w.isOdd()||_.isOdd())&&(w.iadd(s),_.isub(v)),w.iushrn(1),_.iushrn(1);d.cmp(u)>=0?(d.isub(u),l.isub(w),m.isub(_)):(u.isub(d),w.isub(l),_.isub(m))}return{a:w,b:_,gcd:u.iushln(p)}},n.prototype._invmp=function(a){t(a.negative===0),t(!a.isZero());var d=this,u=a.clone();d.negative!==0?d=d.umod(a):d=d.clone();for(var l=new n(1),m=new n(0),w=u.clone();d.cmpn(1)>0&&u.cmpn(1)>0;){for(var _=0,p=1;(d.words[0]&p)==0&&_<26;++_,p<<=1);if(_>0)for(d.iushrn(_);_-- >0;)l.isOdd()&&l.iadd(w),l.iushrn(1);for(var s=0,v=1;(u.words[0]&v)==0&&s<26;++s,v<<=1);if(s>0)for(u.iushrn(s);s-- >0;)m.isOdd()&&m.iadd(w),m.iushrn(1);d.cmp(u)>=0?(d.isub(u),l.isub(m)):(u.isub(d),m.isub(l))}var I;return d.cmpn(1)===0?I=l:I=m,I.cmpn(0)<0&&I.iadd(a),I},n.prototype.gcd=function(a){if(this.isZero())return a.abs();if(a.isZero())return this.abs();var d=this.clone(),u=a.clone();d.negative=0,u.negative=0;for(var l=0;d.isEven()&&u.isEven();l++)d.iushrn(1),u.iushrn(1);do{for(;d.isEven();)d.iushrn(1);for(;u.isEven();)u.iushrn(1);var m=d.cmp(u);if(m<0){var w=d;d=u,u=w}else if(m===0||u.cmpn(1)===0)break;d.isub(u)}while(!0);return u.iushln(l)},n.prototype.invm=function(a){return this.egcd(a).a.umod(a)},n.prototype.isEven=function(){return(this.words[0]&1)==0},n.prototype.isOdd=function(){return(this.words[0]&1)==1},n.prototype.andln=function(a){return this.words[0]&a},n.prototype.bincn=function(a){t(typeof a=="number");var d=a%26,u=(a-d)/26,l=1<<d;if(this.length<=u)return this._expand(u+1),this.words[u]|=l,this;for(var m=l,w=u;m!==0&&w<this.length;w++){var _=this.words[w]|0;_+=m,m=_>>>26,_&=67108863,this.words[w]=_}return m!==0&&(this.words[w]=m,this.length++),this},n.prototype.isZero=function(){return this.length===1&&this.words[0]===0},n.prototype.cmpn=function(a){var d=a<0;if(this.negative!==0&&!d)return-1;if(this.negative===0&&d)return 1;this.strip();var u;if(this.length>1)u=1;else{d&&(a=-a),t(a<=67108863,"Number is too big");var l=this.words[0]|0;u=l===a?0:l<a?-1:1}return this.negative!==0?-u|0:u},n.prototype.cmp=function(a){if(this.negative!==0&&a.negative===0)return-1;if(this.negative===0&&a.negative!==0)return 1;var d=this.ucmp(a);return this.negative!==0?-d|0:d},n.prototype.ucmp=function(a){if(this.length>a.length)return 1;if(this.length<a.length)return-1;for(var d=0,u=this.length-1;u>=0;u--){var l=this.words[u]|0,m=a.words[u]|0;if(l!==m){l<m?d=-1:l>m&&(d=1);break}}return d},n.prototype.gtn=function(a){return this.cmpn(a)===1},n.prototype.gt=function(a){return this.cmp(a)===1},n.prototype.gten=function(a){return this.cmpn(a)>=0},n.prototype.gte=function(a){return this.cmp(a)>=0},n.prototype.ltn=function(a){return this.cmpn(a)===-1},n.prototype.lt=function(a){return this.cmp(a)===-1},n.prototype.lten=function(a){return this.cmpn(a)<=0},n.prototype.lte=function(a){return this.cmp(a)<=0},n.prototype.eqn=function(a){return this.cmpn(a)===0},n.prototype.eq=function(a){return this.cmp(a)===0},n.red=function(a){return new D(a)},n.prototype.toRed=function(a){return t(!this.red,"Already a number in reduction context"),t(this.negative===0,"red works only with positives"),a.convertTo(this)._forceRed(a)},n.prototype.fromRed=function(){return t(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(a){return this.red=a,this},n.prototype.forceRed=function(a){return t(!this.red,"Already a number in reduction context"),this._forceRed(a)},n.prototype.redAdd=function(a){return t(this.red,"redAdd works only with red numbers"),this.red.add(this,a)},n.prototype.redIAdd=function(a){return t(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,a)},n.prototype.redSub=function(a){return t(this.red,"redSub works only with red numbers"),this.red.sub(this,a)},n.prototype.redISub=function(a){return t(this.red,"redISub works only with red numbers"),this.red.isub(this,a)},n.prototype.redShl=function(a){return t(this.red,"redShl works only with red numbers"),this.red.shl(this,a)},n.prototype.redMul=function(a){return t(this.red,"redMul works only with red numbers"),this.red._verify2(this,a),this.red.mul(this,a)},n.prototype.redIMul=function(a){return t(this.red,"redMul works only with red numbers"),this.red._verify2(this,a),this.red.imul(this,a)},n.prototype.redSqr=function(){return t(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return t(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return t(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return t(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return t(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(a){return t(this.red&&!a.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,a)};var z={k256:null,p224:null,p192:null,p25519:null};function H(g,a){this.name=g,this.p=new n(a,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}H.prototype._tmp=function(){var a=new n(null);return a.words=new Array(Math.ceil(this.n/13)),a},H.prototype.ireduce=function(a){var d=a,u;do this.split(d,this.tmp),d=this.imulK(d),d=d.iadd(this.tmp),u=d.bitLength();while(u>this.n);var l=u<this.n?-1:d.ucmp(this.p);return l===0?(d.words[0]=0,d.length=1):l>0?d.isub(this.p):d.strip!==void 0?d.strip():d._strip(),d},H.prototype.split=function(a,d){a.iushrn(this.n,0,d)},H.prototype.imulK=function(a){return a.imul(this.k)};function Ne(){H.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}i(Ne,H),Ne.prototype.split=function(a,d){for(var u=4194303,l=Math.min(a.length,9),m=0;m<l;m++)d.words[m]=a.words[m];if(d.length=l,a.length<=9){a.words[0]=0,a.length=1;return}var w=a.words[9];for(d.words[d.length++]=w&u,m=10;m<a.length;m++){var _=a.words[m]|0;a.words[m-10]=(_&u)<<4|w>>>22,w=_}w>>>=22,a.words[m-10]=w,w===0&&a.length>10?a.length-=10:a.length-=9},Ne.prototype.imulK=function(a){a.words[a.length]=0,a.words[a.length+1]=0,a.length+=2;for(var d=0,u=0;u<a.length;u++){var l=a.words[u]|0;d+=l*977,a.words[u]=d&67108863,d=l*64+(d/67108864|0)}return a.words[a.length-1]===0&&(a.length--,a.words[a.length-1]===0&&a.length--),a};function $(){H.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}i($,H);function Ce(){H.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}i(Ce,H);function Ge(){H.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}i(Ge,H),Ge.prototype.imulK=function(a){for(var d=0,u=0;u<a.length;u++){var l=(a.words[u]|0)*19+d,m=l&67108863;l>>>=26,a.words[u]=m,d=l}return d!==0&&(a.words[a.length++]=d),a},n._prime=function(a){if(z[a])return z[a];var d;if(a==="k256")d=new Ne;else if(a==="p224")d=new $;else if(a==="p192")d=new Ce;else if(a==="p25519")d=new Ge;else throw new Error("Unknown prime "+a);return z[a]=d,d};function D(g){if(typeof g=="string"){var a=n._prime(g);this.m=a.p,this.prime=a}else t(g.gtn(1),"modulus must be greater than 1"),this.m=g,this.prime=null}D.prototype._verify1=function(a){t(a.negative===0,"red works only with positives"),t(a.red,"red works only with red numbers")},D.prototype._verify2=function(a,d){t((a.negative|d.negative)==0,"red works only with positives"),t(a.red&&a.red===d.red,"red works only with red numbers")},D.prototype.imod=function(a){return this.prime?this.prime.ireduce(a)._forceRed(this):a.umod(this.m)._forceRed(this)},D.prototype.neg=function(a){return a.isZero()?a.clone():this.m.sub(a)._forceRed(this)},D.prototype.add=function(a,d){this._verify2(a,d);var u=a.add(d);return u.cmp(this.m)>=0&&u.isub(this.m),u._forceRed(this)},D.prototype.iadd=function(a,d){this._verify2(a,d);var u=a.iadd(d);return u.cmp(this.m)>=0&&u.isub(this.m),u},D.prototype.sub=function(a,d){this._verify2(a,d);var u=a.sub(d);return u.cmpn(0)<0&&u.iadd(this.m),u._forceRed(this)},D.prototype.isub=function(a,d){this._verify2(a,d);var u=a.isub(d);return u.cmpn(0)<0&&u.iadd(this.m),u},D.prototype.shl=function(a,d){return this._verify1(a),this.imod(a.ushln(d))},D.prototype.imul=function(a,d){return this._verify2(a,d),this.imod(a.imul(d))},D.prototype.mul=function(a,d){return this._verify2(a,d),this.imod(a.mul(d))},D.prototype.isqr=function(a){return this.imul(a,a.clone())},D.prototype.sqr=function(a){return this.mul(a,a)},D.prototype.sqrt=function(a){if(a.isZero())return a.clone();var d=this.m.andln(3);if(t(d%2==1),d===3){var u=this.m.add(new n(1)).iushrn(2);return this.pow(a,u)}for(var l=this.m.subn(1),m=0;!l.isZero()&&l.andln(1)===0;)m++,l.iushrn(1);t(!l.isZero());var w=new n(1).toRed(this),_=w.redNeg(),p=this.m.subn(1).iushrn(1),s=this.m.bitLength();for(s=new n(2*s*s).toRed(this);this.pow(s,p).cmp(_)!==0;)s.redIAdd(_);for(var v=this.pow(s,l),I=this.pow(a,l.addn(1).iushrn(1)),R=this.pow(a,l),B=m;R.cmp(w)!==0;){for(var C=R,k=0;C.cmp(w)!==0;k++)C=C.redSqr();t(k<B);var W=this.pow(v,new n(1).iushln(B-k-1));I=I.redMul(W),v=W.redSqr(),R=R.redMul(v),B=k}return I},D.prototype.invm=function(a){var d=a._invmp(this.m);return d.negative!==0?(d.negative=0,this.imod(d).redNeg()):this.imod(d)},D.prototype.pow=function(a,d){if(d.isZero())return new n(1).toRed(this);if(d.cmpn(1)===0)return a.clone();var u=4,l=new Array(1<<u);l[0]=new n(1).toRed(this),l[1]=a;for(var m=2;m<l.length;m++)l[m]=this.mul(l[m-1],a);var w=l[0],_=0,p=0,s=d.bitLength()%26;for(s===0&&(s=26),m=d.length-1;m>=0;m--){for(var v=d.words[m],I=s-1;I>=0;I--){var R=v>>I&1;if(w!==l[0]&&(w=this.sqr(w)),R===0&&_===0){p=0;continue}_<<=1,_|=R,p++,!(p!==u&&(m!==0||I!==0))&&(w=this.mul(w,l[_]),p=0,_=0)}s=26}return w},D.prototype.convertTo=function(a){var d=a.umod(this.m);return d===a?d.clone():d},D.prototype.convertFrom=function(a){var d=a.clone();return d.red=null,d},n.mont=function(a){return new We(a)};function We(g){D.call(this,g),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}i(We,D),We.prototype.convertTo=function(a){return this.imod(a.ushln(this.shift))},We.prototype.convertFrom=function(a){var d=this.imod(a.mul(this.rinv));return d.red=null,d},We.prototype.imul=function(a,d){if(a.isZero()||d.isZero())return a.words[0]=0,a.length=1,a;var u=a.imul(d),l=u.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),m=u.isub(l).iushrn(this.shift),w=m;return m.cmp(this.m)>=0?w=m.isub(this.m):m.cmpn(0)<0&&(w=m.iadd(this.m)),w._forceRed(this)},We.prototype.mul=function(a,d){if(a.isZero()||d.isZero())return new n(0)._forceRed(this);var u=a.mul(d),l=u.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),m=u.isub(l).iushrn(this.shift),w=m;return m.cmp(this.m)>=0?w=m.isub(this.m):m.cmpn(0)<0&&(w=m.iadd(this.m)),w._forceRed(this)},We.prototype.invm=function(a){var d=this.imod(a._invmp(this.m).mul(this.r2));return d._forceRed(this)}})(typeof un=="undefined"||un,ta)});var kt=P((Oh,ia)=>{ia.exports=ra;function ra(r,e){if(!r)throw new Error(e||"Assertion failed")}ra.equal=function(e,t,i){if(e!=t)throw new Error(i||"Assertion failed: "+e+" != "+t)}});var ln=P(aa=>{"use strict";var fi=aa;function wd(r,e){if(Array.isArray(r))return r.slice();if(!r)return[];var t=[];if(typeof r!="string"){for(var i=0;i<r.length;i++)t[i]=r[i]|0;return t}if(e==="hex"){r=r.replace(/[^a-z0-9]+/ig,""),r.length%2!=0&&(r="0"+r);for(var i=0;i<r.length;i+=2)t.push(parseInt(r[i]+r[i+1],16))}else for(var i=0;i<r.length;i++){var n=r.charCodeAt(i),f=n>>8,c=n&255;f?t.push(f,c):t.push(c)}return t}fi.toArray=wd;function na(r){return r.length===1?"0"+r:r}fi.zero2=na;function fa(r){for(var e="",t=0;t<r.length;t++)e+=na(r[t].toString(16));return e}fi.toHex=fa;fi.encode=function(e,t){return t==="hex"?fa(e):e}});var et=P(sa=>{"use strict";var dt=sa,_d=pt(),Sd=kt(),ai=ln();dt.assert=Sd;dt.toArray=ai.toArray;dt.zero2=ai.zero2;dt.toHex=ai.toHex;dt.encode=ai.encode;function Md(r,e,t){var i=new Array(Math.max(r.bitLength(),t)+1);i.fill(0);for(var n=1<<e+1,f=r.clone(),c=0;c<i.length;c++){var o,h=f.andln(n-1);f.isOdd()?(h>(n>>1)-1?o=(n>>1)-h:o=h,f.isubn(o)):o=0,i[c]=o,f.iushrn(1)}return i}dt.getNAF=Md;function Ad(r,e){var t=[[],[]];r=r.clone(),e=e.clone();for(var i=0,n=0,f;r.cmpn(-i)>0||e.cmpn(-n)>0;){var c=r.andln(3)+i&3,o=e.andln(3)+n&3;c===3&&(c=-1),o===3&&(o=-1);var h;(c&1)==0?h=0:(f=r.andln(7)+i&7,(f===3||f===5)&&o===2?h=-c:h=c),t[0].push(h);var b;(o&1)==0?b=0:(f=e.andln(7)+n&7,(f===3||f===5)&&c===2?b=-o:b=o),t[1].push(b),2*i===h+1&&(i=1-i),2*n===b+1&&(n=1-n),r.iushrn(1),e.iushrn(1)}return t}dt.getJSF=Ad;function Ed(r,e,t){var i="_"+e;r.prototype[e]=function(){return this[i]!==void 0?this[i]:this[i]=t.call(this)}}dt.cachedProperty=Ed;function Id(r){return typeof r=="string"?dt.toArray(r,"hex"):r}dt.parseBytes=Id;function Td(r){return new _d(r,"hex","le")}dt.intFromLE=Td});var mn=P((Uh,vn)=>{var bn;vn.exports=function(e){return bn||(bn=new Lt(null)),bn.generate(e)};function Lt(r){this.rand=r}vn.exports.Rand=Lt;Lt.prototype.generate=function(e){return this._rand(e)};Lt.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),i=0;i<t.length;i++)t[i]=this.rand.getByte();return t};if(typeof self=="object")self.crypto&&self.crypto.getRandomValues?Lt.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?Lt.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:typeof window=="object"&&(Lt.prototype._rand=function(){throw new Error("Not implemented yet")});else try{if(pn=require("crypto"),typeof pn.randomBytes!="function")throw new Error("Not supported");Lt.prototype._rand=function(e){return pn.randomBytes(e)}}catch(r){}var pn});var Dr=P((qh,oa)=>{"use strict";var er=pt(),Hr=et(),si=Hr.getNAF,Rd=Hr.getJSF,oi=Hr.assert;function $t(r,e){this.type=r,this.p=new er(e.p,16),this.red=e.prime?er.red(e.prime):er.mont(this.p),this.zero=new er(0).toRed(this.red),this.one=new er(1).toRed(this.red),this.two=new er(2).toRed(this.red),this.n=e.n&&new er(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var t=this.n&&this.p.div(this.n);!t||t.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}oa.exports=$t;$t.prototype.point=function(){throw new Error("Not implemented")};$t.prototype.validate=function(){throw new Error("Not implemented")};$t.prototype._fixedNafMul=function(e,t){oi(e.precomputed);var i=e._getDoubles(),n=si(t,1,this._bitLength),f=(1<<i.step+1)-(i.step%2==0?2:1);f/=3;var c=[],o,h;for(o=0;o<n.length;o+=i.step){h=0;for(var b=o+i.step-1;b>=o;b--)h=(h<<1)+n[b];c.push(h)}for(var y=this.jpoint(null,null,null),x=this.jpoint(null,null,null),M=f;M>0;M--){for(o=0;o<c.length;o++)h=c[o],h===M?x=x.mixedAdd(i.points[o]):h===-M&&(x=x.mixedAdd(i.points[o].neg()));y=y.add(x)}return y.toP()};$t.prototype._wnafMul=function(e,t){var i=4,n=e._getNAFPoints(i);i=n.wnd;for(var f=n.points,c=si(t,i,this._bitLength),o=this.jpoint(null,null,null),h=c.length-1;h>=0;h--){for(var b=0;h>=0&&c[h]===0;h--)b++;if(h>=0&&b++,o=o.dblp(b),h<0)break;var y=c[h];oi(y!==0),e.type==="affine"?y>0?o=o.mixedAdd(f[y-1>>1]):o=o.mixedAdd(f[-y-1>>1].neg()):y>0?o=o.add(f[y-1>>1]):o=o.add(f[-y-1>>1].neg())}return e.type==="affine"?o.toP():o};$t.prototype._wnafMulAdd=function(e,t,i,n,f){var c=this._wnafT1,o=this._wnafT2,h=this._wnafT3,b=0,y,x,M;for(y=0;y<n;y++){M=t[y];var S=M._getNAFPoints(e);c[y]=S.wnd,o[y]=S.points}for(y=n-1;y>=1;y-=2){var A=y-1,E=y;if(c[A]!==1||c[E]!==1){h[A]=si(i[A],c[A],this._bitLength),h[E]=si(i[E],c[E],this._bitLength),b=Math.max(h[A].length,b),b=Math.max(h[E].length,b);continue}var O=[t[A],null,null,t[E]];t[A].y.cmp(t[E].y)===0?(O[1]=t[A].add(t[E]),O[2]=t[A].toJ().mixedAdd(t[E].neg())):t[A].y.cmp(t[E].y.redNeg())===0?(O[1]=t[A].toJ().mixedAdd(t[E]),O[2]=t[A].add(t[E].neg())):(O[1]=t[A].toJ().mixedAdd(t[E]),O[2]=t[A].toJ().mixedAdd(t[E].neg()));var T=[-3,-1,-5,-7,0,7,5,1,3],z=Rd(i[A],i[E]);for(b=Math.max(z[0].length,b),h[A]=new Array(b),h[E]=new Array(b),x=0;x<b;x++){var H=z[0][x]|0,Ne=z[1][x]|0;h[A][x]=T[(H+1)*3+(Ne+1)],h[E][x]=0,o[A]=O}}var $=this.jpoint(null,null,null),Ce=this._wnafT4;for(y=b;y>=0;y--){for(var Ge=0;y>=0;){var D=!0;for(x=0;x<n;x++)Ce[x]=h[x][y]|0,Ce[x]!==0&&(D=!1);if(!D)break;Ge++,y--}if(y>=0&&Ge++,$=$.dblp(Ge),y<0)break;for(x=0;x<n;x++){var We=Ce[x];We!==0&&(We>0?M=o[x][We-1>>1]:We<0&&(M=o[x][-We-1>>1].neg()),M.type==="affine"?$=$.mixedAdd(M):$=$.add(M))}}for(y=0;y<n;y++)o[y]=null;return f?$:$.toP()};function nt(r,e){this.curve=r,this.type=e,this.precomputed=null}$t.BasePoint=nt;nt.prototype.eq=function(){throw new Error("Not implemented")};nt.prototype.validate=function(){return this.curve.validate(this)};$t.prototype.decodePoint=function(e,t){e=Hr.toArray(e,t);var i=this.p.byteLength();if((e[0]===4||e[0]===6||e[0]===7)&&e.length-1==2*i){e[0]===6?oi(e[e.length-1]%2==0):e[0]===7&&oi(e[e.length-1]%2==1);var n=this.point(e.slice(1,1+i),e.slice(1+i,1+2*i));return n}else if((e[0]===2||e[0]===3)&&e.length-1===i)return this.pointFromX(e.slice(1,1+i),e[0]===3);throw new Error("Unknown point format")};nt.prototype.encodeCompressed=function(e){return this.encode(e,!0)};nt.prototype._encode=function(e){var t=this.curve.p.byteLength(),i=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(i):[4].concat(i,this.getY().toArray("be",t))};nt.prototype.encode=function(e,t){return Hr.encode(this._encode(t),e)};nt.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this};nt.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return t?t.points.length>=Math.ceil((e.bitLength()+1)/t.step):!1};nt.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var i=[this],n=this,f=0;f<t;f+=e){for(var c=0;c<e;c++)n=n.dbl();i.push(n)}return{step:e,points:i}};nt.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],i=(1<<e)-1,n=i===1?null:this.dbl(),f=1;f<i;f++)t[f]=t[f-1].add(n);return{wnd:e,points:t}};nt.prototype._getBeta=function(){return null};nt.prototype.dblp=function(e){for(var t=this,i=0;i<e;i++)t=t.dbl();return t}});var da=P((zh,yn)=>{typeof Object.create=="function"?yn.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:yn.exports=function(e,t){if(t){e.super_=t;var i=function(){};i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e}}});var kr=P((Hh,xn)=>{try{if(gn=require("util"),typeof gn.inherits!="function")throw"";xn.exports=gn.inherits}catch(r){xn.exports=da()}var gn});var ha=P((Dh,ca)=>{"use strict";var Bd=et(),J=pt(),wn=kr(),pr=Dr(),Pd=Bd.assert;function ft(r){pr.call(this,"short",r),this.a=new J(r.a,16).toRed(this.red),this.b=new J(r.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=this.a.fromRed().cmpn(0)===0,this.threeA=this.a.fromRed().sub(this.p).cmpn(-3)===0,this.endo=this._getEndomorphism(r),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}wn(ft,pr);ca.exports=ft;ft.prototype._getEndomorphism=function(e){if(!(!this.zeroA||!this.g||!this.n||this.p.modn(3)!==1)){var t,i;if(e.beta)t=new J(e.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);t=n[0].cmp(n[1])<0?n[0]:n[1],t=t.toRed(this.red)}if(e.lambda)i=new J(e.lambda,16);else{var f=this._getEndoRoots(this.n);this.g.mul(f[0]).x.cmp(this.g.x.redMul(t))===0?i=f[0]:(i=f[1],Pd(this.g.mul(i).x.cmp(this.g.x.redMul(t))===0))}var c;return e.basis?c=e.basis.map(function(o){return{a:new J(o.a,16),b:new J(o.b,16)}}):c=this._getEndoBasis(i),{beta:t,lambda:i,basis:c}}};ft.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:J.mont(e),i=new J(2).toRed(t).redInvm(),n=i.redNeg(),f=new J(3).toRed(t).redNeg().redSqrt().redMul(i),c=n.redAdd(f).fromRed(),o=n.redSub(f).fromRed();return[c,o]};ft.prototype._getEndoBasis=function(e){for(var t=this.n.ushrn(Math.floor(this.n.bitLength()/2)),i=e,n=this.n.clone(),f=new J(1),c=new J(0),o=new J(0),h=new J(1),b,y,x,M,S,A,E,O=0,T,z;i.cmpn(0)!==0;){var H=n.div(i);T=n.sub(H.mul(i)),z=o.sub(H.mul(f));var Ne=h.sub(H.mul(c));if(!x&&T.cmp(t)<0)b=E.neg(),y=f,x=T.neg(),M=z;else if(x&&++O==2)break;E=T,n=i,i=T,o=f,f=z,h=c,c=Ne}S=T.neg(),A=z;var $=x.sqr().add(M.sqr()),Ce=S.sqr().add(A.sqr());return Ce.cmp($)>=0&&(S=b,A=y),x.negative&&(x=x.neg(),M=M.neg()),S.negative&&(S=S.neg(),A=A.neg()),[{a:x,b:M},{a:S,b:A}]};ft.prototype._endoSplit=function(e){var t=this.endo.basis,i=t[0],n=t[1],f=n.b.mul(e).divRound(this.n),c=i.b.neg().mul(e).divRound(this.n),o=f.mul(i.a),h=c.mul(n.a),b=f.mul(i.b),y=c.mul(n.b),x=e.sub(o).sub(h),M=b.add(y).neg();return{k1:x,k2:M}};ft.prototype.pointFromX=function(e,t){e=new J(e,16),e.red||(e=e.toRed(this.red));var i=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=i.redSqrt();if(n.redSqr().redSub(i).cmp(this.zero)!==0)throw new Error("invalid point");var f=n.fromRed().isOdd();return(t&&!f||!t&&f)&&(n=n.redNeg()),this.point(e,n)};ft.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,i=e.y,n=this.a.redMul(t),f=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return i.redSqr().redISub(f).cmpn(0)===0};ft.prototype._endoWnafMulAdd=function(e,t,i){for(var n=this._endoWnafT1,f=this._endoWnafT2,c=0;c<e.length;c++){var o=this._endoSplit(t[c]),h=e[c],b=h._getBeta();o.k1.negative&&(o.k1.ineg(),h=h.neg(!0)),o.k2.negative&&(o.k2.ineg(),b=b.neg(!0)),n[c*2]=h,n[c*2+1]=b,f[c*2]=o.k1,f[c*2+1]=o.k2}for(var y=this._wnafMulAdd(1,n,f,c*2,i),x=0;x<c*2;x++)n[x]=null,f[x]=null;return y};function qe(r,e,t,i){pr.BasePoint.call(this,r,"affine"),e===null&&t===null?(this.x=null,this.y=null,this.inf=!0):(this.x=new J(e,16),this.y=new J(t,16),i&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}wn(qe,pr.BasePoint);ft.prototype.point=function(e,t,i){return new qe(this,e,t,i)};ft.prototype.pointFromJSON=function(e,t){return qe.fromJSON(this,e,t)};qe.prototype._getBeta=function(){if(!!this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var i=this.curve,n=function(f){return i.point(f.x.redMul(i.endo.beta),f.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}};qe.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]};qe.fromJSON=function(e,t,i){typeof t=="string"&&(t=JSON.parse(t));var n=e.point(t[0],t[1],i);if(!t[2])return n;function f(o){return e.point(o[0],o[1],i)}var c=t[2];return n.precomputed={beta:null,doubles:c.doubles&&{step:c.doubles.step,points:[n].concat(c.doubles.points.map(f))},naf:c.naf&&{wnd:c.naf.wnd,points:[n].concat(c.naf.points.map(f))}},n};qe.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"};qe.prototype.isInfinity=function(){return this.inf};qe.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(this.x.cmp(e.x)===0)return this.curve.point(null,null);var t=this.y.redSub(e.y);t.cmpn(0)!==0&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var i=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(i)).redISub(this.y);return this.curve.point(i,n)};qe.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(e.cmpn(0)===0)return this.curve.point(null,null);var t=this.curve.a,i=this.x.redSqr(),n=e.redInvm(),f=i.redAdd(i).redIAdd(i).redIAdd(t).redMul(n),c=f.redSqr().redISub(this.x.redAdd(this.x)),o=f.redMul(this.x.redSub(c)).redISub(this.y);return this.curve.point(c,o)};qe.prototype.getX=function(){return this.x.fromRed()};qe.prototype.getY=function(){return this.y.fromRed()};qe.prototype.mul=function(e){return e=new J(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)};qe.prototype.mulAdd=function(e,t,i){var n=[this,t],f=[e,i];return this.curve.endo?this.curve._endoWnafMulAdd(n,f):this.curve._wnafMulAdd(1,n,f,2)};qe.prototype.jmulAdd=function(e,t,i){var n=[this,t],f=[e,i];return this.curve.endo?this.curve._endoWnafMulAdd(n,f,!0):this.curve._wnafMulAdd(1,n,f,2,!0)};qe.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||this.x.cmp(e.x)===0&&this.y.cmp(e.y)===0)};qe.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var i=this.precomputed,n=function(f){return f.neg()};t.precomputed={naf:i.naf&&{wnd:i.naf.wnd,points:i.naf.points.map(n)},doubles:i.doubles&&{step:i.doubles.step,points:i.doubles.points.map(n)}}}return t};qe.prototype.toJ=function(){if(this.inf)return this.curve.jpoint(null,null,null);var e=this.curve.jpoint(this.x,this.y,this.curve.one);return e};function ke(r,e,t,i){pr.BasePoint.call(this,r,"jacobian"),e===null&&t===null&&i===null?(this.x=this.curve.one,this.y=this.curve.one,this.z=new J(0)):(this.x=new J(e,16),this.y=new J(t,16),this.z=new J(i,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}wn(ke,pr.BasePoint);ft.prototype.jpoint=function(e,t,i){return new ke(this,e,t,i)};ke.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),i=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(i,n)};ke.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)};ke.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),i=this.z.redSqr(),n=this.x.redMul(t),f=e.x.redMul(i),c=this.y.redMul(t.redMul(e.z)),o=e.y.redMul(i.redMul(this.z)),h=n.redSub(f),b=c.redSub(o);if(h.cmpn(0)===0)return b.cmpn(0)!==0?this.curve.jpoint(null,null,null):this.dbl();var y=h.redSqr(),x=y.redMul(h),M=n.redMul(y),S=b.redSqr().redIAdd(x).redISub(M).redISub(M),A=b.redMul(M.redISub(S)).redISub(c.redMul(x)),E=this.z.redMul(e.z).redMul(h);return this.curve.jpoint(S,A,E)};ke.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),i=this.x,n=e.x.redMul(t),f=this.y,c=e.y.redMul(t).redMul(this.z),o=i.redSub(n),h=f.redSub(c);if(o.cmpn(0)===0)return h.cmpn(0)!==0?this.curve.jpoint(null,null,null):this.dbl();var b=o.redSqr(),y=b.redMul(o),x=i.redMul(b),M=h.redSqr().redIAdd(y).redISub(x).redISub(x),S=h.redMul(x.redISub(M)).redISub(f.redMul(y)),A=this.z.redMul(o);return this.curve.jpoint(M,S,A)};ke.prototype.dblp=function(e){if(e===0)return this;if(this.isInfinity())return this;if(!e)return this.dbl();var t;if(this.curve.zeroA||this.curve.threeA){var i=this;for(t=0;t<e;t++)i=i.dbl();return i}var n=this.curve.a,f=this.curve.tinv,c=this.x,o=this.y,h=this.z,b=h.redSqr().redSqr(),y=o.redAdd(o);for(t=0;t<e;t++){var x=c.redSqr(),M=y.redSqr(),S=M.redSqr(),A=x.redAdd(x).redIAdd(x).redIAdd(n.redMul(b)),E=c.redMul(M),O=A.redSqr().redISub(E.redAdd(E)),T=E.redISub(O),z=A.redMul(T);z=z.redIAdd(z).redISub(S);var H=y.redMul(h);t+1<e&&(b=b.redMul(S)),c=O,h=H,y=z}return this.curve.jpoint(c,y.redMul(f),h)};ke.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()};ke.prototype._zeroDbl=function(){var e,t,i;if(this.zOne){var n=this.x.redSqr(),f=this.y.redSqr(),c=f.redSqr(),o=this.x.redAdd(f).redSqr().redISub(n).redISub(c);o=o.redIAdd(o);var h=n.redAdd(n).redIAdd(n),b=h.redSqr().redISub(o).redISub(o),y=c.redIAdd(c);y=y.redIAdd(y),y=y.redIAdd(y),e=b,t=h.redMul(o.redISub(b)).redISub(y),i=this.y.redAdd(this.y)}else{var x=this.x.redSqr(),M=this.y.redSqr(),S=M.redSqr(),A=this.x.redAdd(M).redSqr().redISub(x).redISub(S);A=A.redIAdd(A);var E=x.redAdd(x).redIAdd(x),O=E.redSqr(),T=S.redIAdd(S);T=T.redIAdd(T),T=T.redIAdd(T),e=O.redISub(A).redISub(A),t=E.redMul(A.redISub(e)).redISub(T),i=this.y.redMul(this.z),i=i.redIAdd(i)}return this.curve.jpoint(e,t,i)};ke.prototype._threeDbl=function(){var e,t,i;if(this.zOne){var n=this.x.redSqr(),f=this.y.redSqr(),c=f.redSqr(),o=this.x.redAdd(f).redSqr().redISub(n).redISub(c);o=o.redIAdd(o);var h=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),b=h.redSqr().redISub(o).redISub(o);e=b;var y=c.redIAdd(c);y=y.redIAdd(y),y=y.redIAdd(y),t=h.redMul(o.redISub(b)).redISub(y),i=this.y.redAdd(this.y)}else{var x=this.z.redSqr(),M=this.y.redSqr(),S=this.x.redMul(M),A=this.x.redSub(x).redMul(this.x.redAdd(x));A=A.redAdd(A).redIAdd(A);var E=S.redIAdd(S);E=E.redIAdd(E);var O=E.redAdd(E);e=A.redSqr().redISub(O),i=this.y.redAdd(this.z).redSqr().redISub(M).redISub(x);var T=M.redSqr();T=T.redIAdd(T),T=T.redIAdd(T),T=T.redIAdd(T),t=A.redMul(E.redISub(e)).redISub(T)}return this.curve.jpoint(e,t,i)};ke.prototype._dbl=function(){var e=this.curve.a,t=this.x,i=this.y,n=this.z,f=n.redSqr().redSqr(),c=t.redSqr(),o=i.redSqr(),h=c.redAdd(c).redIAdd(c).redIAdd(e.redMul(f)),b=t.redAdd(t);b=b.redIAdd(b);var y=b.redMul(o),x=h.redSqr().redISub(y.redAdd(y)),M=y.redISub(x),S=o.redSqr();S=S.redIAdd(S),S=S.redIAdd(S),S=S.redIAdd(S);var A=h.redMul(M).redISub(S),E=i.redAdd(i).redMul(n);return this.curve.jpoint(x,A,E)};ke.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),i=this.z.redSqr(),n=t.redSqr(),f=e.redAdd(e).redIAdd(e),c=f.redSqr(),o=this.x.redAdd(t).redSqr().redISub(e).redISub(n);o=o.redIAdd(o),o=o.redAdd(o).redIAdd(o),o=o.redISub(c);var h=o.redSqr(),b=n.redIAdd(n);b=b.redIAdd(b),b=b.redIAdd(b),b=b.redIAdd(b);var y=f.redIAdd(o).redSqr().redISub(c).redISub(h).redISub(b),x=t.redMul(y);x=x.redIAdd(x),x=x.redIAdd(x);var M=this.x.redMul(h).redISub(x);M=M.redIAdd(M),M=M.redIAdd(M);var S=this.y.redMul(y.redMul(b.redISub(y)).redISub(o.redMul(h)));S=S.redIAdd(S),S=S.redIAdd(S),S=S.redIAdd(S);var A=this.z.redAdd(o).redSqr().redISub(i).redISub(h);return this.curve.jpoint(M,S,A)};ke.prototype.mul=function(e,t){return e=new J(e,t),this.curve._wnafMul(this,e)};ke.prototype.eq=function(e){if(e.type==="affine")return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),i=e.z.redSqr();if(this.x.redMul(i).redISub(e.x.redMul(t)).cmpn(0)!==0)return!1;var n=t.redMul(this.z),f=i.redMul(e.z);return this.y.redMul(f).redISub(e.y.redMul(n)).cmpn(0)===0};ke.prototype.eqXToP=function(e){var t=this.z.redSqr(),i=e.toRed(this.curve.red).redMul(t);if(this.x.cmp(i)===0)return!0;for(var n=e.clone(),f=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(i.redIAdd(f),this.x.cmp(i)===0)return!0}};ke.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"};ke.prototype.isInfinity=function(){return this.z.cmpn(0)===0}});var ba=P((kh,la)=>{"use strict";var vr=pt(),ua=kr(),di=Dr(),Fd=et();function mr(r){di.call(this,"mont",r),this.a=new vr(r.a,16).toRed(this.red),this.b=new vr(r.b,16).toRed(this.red),this.i4=new vr(4).toRed(this.red).redInvm(),this.two=new vr(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}ua(mr,di);la.exports=mr;mr.prototype.validate=function(e){var t=e.normalize().x,i=t.redSqr(),n=i.redMul(t).redAdd(i.redMul(this.a)).redAdd(t),f=n.redSqrt();return f.redSqr().cmp(n)===0};function ze(r,e,t){di.BasePoint.call(this,r,"projective"),e===null&&t===null?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new vr(e,16),this.z=new vr(t,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}ua(ze,di.BasePoint);mr.prototype.decodePoint=function(e,t){return this.point(Fd.toArray(e,t),1)};mr.prototype.point=function(e,t){return new ze(this,e,t)};mr.prototype.pointFromJSON=function(e){return ze.fromJSON(this,e)};ze.prototype.precompute=function(){};ze.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())};ze.fromJSON=function(e,t){return new ze(e,t[0],t[1]||e.one)};ze.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"};ze.prototype.isInfinity=function(){return this.z.cmpn(0)===0};ze.prototype.dbl=function(){var e=this.x.redAdd(this.z),t=e.redSqr(),i=this.x.redSub(this.z),n=i.redSqr(),f=t.redSub(n),c=t.redMul(n),o=f.redMul(n.redAdd(this.curve.a24.redMul(f)));return this.curve.point(c,o)};ze.prototype.add=function(){throw new Error("Not supported on Montgomery curve")};ze.prototype.diffAdd=function(e,t){var i=this.x.redAdd(this.z),n=this.x.redSub(this.z),f=e.x.redAdd(e.z),c=e.x.redSub(e.z),o=c.redMul(i),h=f.redMul(n),b=t.z.redMul(o.redAdd(h).redSqr()),y=t.x.redMul(o.redISub(h).redSqr());return this.curve.point(b,y)};ze.prototype.mul=function(e){for(var t=e.clone(),i=this,n=this.curve.point(null,null),f=this,c=[];t.cmpn(0)!==0;t.iushrn(1))c.push(t.andln(1));for(var o=c.length-1;o>=0;o--)c[o]===0?(i=i.diffAdd(n,f),n=n.dbl()):(n=i.diffAdd(n,f),i=i.dbl());return n};ze.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")};ze.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")};ze.prototype.eq=function(e){return this.getX().cmp(e.getX())===0};ze.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this};ze.prototype.getX=function(){return this.normalize(),this.x.fromRed()}});var ma=P((Lh,va)=>{"use strict";var Od=et(),Rt=pt(),pa=kr(),ci=Dr(),Nd=Od.assert;function vt(r){this.twisted=(r.a|0)!=1,this.mOneA=this.twisted&&(r.a|0)==-1,this.extended=this.mOneA,ci.call(this,"edwards",r),this.a=new Rt(r.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new Rt(r.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new Rt(r.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),Nd(!this.twisted||this.c.fromRed().cmpn(1)===0),this.oneC=(r.c|0)==1}pa(vt,ci);va.exports=vt;vt.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)};vt.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)};vt.prototype.jpoint=function(e,t,i,n){return this.point(e,t,i,n)};vt.prototype.pointFromX=function(e,t){e=new Rt(e,16),e.red||(e=e.toRed(this.red));var i=e.redSqr(),n=this.c2.redSub(this.a.redMul(i)),f=this.one.redSub(this.c2.redMul(this.d).redMul(i)),c=n.redMul(f.redInvm()),o=c.redSqrt();if(o.redSqr().redSub(c).cmp(this.zero)!==0)throw new Error("invalid point");var h=o.fromRed().isOdd();return(t&&!h||!t&&h)&&(o=o.redNeg()),this.point(e,o)};vt.prototype.pointFromY=function(e,t){e=new Rt(e,16),e.red||(e=e.toRed(this.red));var i=e.redSqr(),n=i.redSub(this.c2),f=i.redMul(this.d).redMul(this.c2).redSub(this.a),c=n.redMul(f.redInvm());if(c.cmp(this.zero)===0){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var o=c.redSqrt();if(o.redSqr().redSub(c).cmp(this.zero)!==0)throw new Error("invalid point");return o.fromRed().isOdd()!==t&&(o=o.redNeg()),this.point(o,e)};vt.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),i=e.y.redSqr(),n=t.redMul(this.a).redAdd(i),f=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(i)));return n.cmp(f)===0};function X(r,e,t,i,n){ci.BasePoint.call(this,r,"projective"),e===null&&t===null&&i===null?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new Rt(e,16),this.y=new Rt(t,16),this.z=i?new Rt(i,16):this.curve.one,this.t=n&&new Rt(n,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}pa(X,ci.BasePoint);vt.prototype.pointFromJSON=function(e){return X.fromJSON(this,e)};vt.prototype.point=function(e,t,i,n){return new X(this,e,t,i,n)};X.fromJSON=function(e,t){return new X(e,t[0],t[1],t[2])};X.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"};X.prototype.isInfinity=function(){return this.x.cmpn(0)===0&&(this.y.cmp(this.z)===0||this.zOne&&this.y.cmp(this.curve.c)===0)};X.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),i=this.z.redSqr();i=i.redIAdd(i);var n=this.curve._mulA(e),f=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),c=n.redAdd(t),o=c.redSub(i),h=n.redSub(t),b=f.redMul(o),y=c.redMul(h),x=f.redMul(h),M=o.redMul(c);return this.curve.point(b,y,M,x)};X.prototype._projDbl=function(){var e=this.x.redAdd(this.y).redSqr(),t=this.x.redSqr(),i=this.y.redSqr(),n,f,c,o,h,b;if(this.curve.twisted){o=this.curve._mulA(t);var y=o.redAdd(i);this.zOne?(n=e.redSub(t).redSub(i).redMul(y.redSub(this.curve.two)),f=y.redMul(o.redSub(i)),c=y.redSqr().redSub(y).redSub(y)):(h=this.z.redSqr(),b=y.redSub(h).redISub(h),n=e.redSub(t).redISub(i).redMul(b),f=y.redMul(o.redSub(i)),c=y.redMul(b))}else o=t.redAdd(i),h=this.curve._mulC(this.z).redSqr(),b=o.redSub(h).redSub(h),n=this.curve._mulC(e.redISub(o)).redMul(b),f=this.curve._mulC(o).redMul(t.redISub(i)),c=o.redMul(b);return this.curve.point(n,f,c)};X.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()};X.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),i=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),n=this.t.redMul(this.curve.dd).redMul(e.t),f=this.z.redMul(e.z.redAdd(e.z)),c=i.redSub(t),o=f.redSub(n),h=f.redAdd(n),b=i.redAdd(t),y=c.redMul(o),x=h.redMul(b),M=c.redMul(b),S=o.redMul(h);return this.curve.point(y,x,S,M)};X.prototype._projAdd=function(e){var t=this.z.redMul(e.z),i=t.redSqr(),n=this.x.redMul(e.x),f=this.y.redMul(e.y),c=this.curve.d.redMul(n).redMul(f),o=i.redSub(c),h=i.redAdd(c),b=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(n).redISub(f),y=t.redMul(o).redMul(b),x,M;return this.curve.twisted?(x=t.redMul(h).redMul(f.redSub(this.curve._mulA(n))),M=o.redMul(h)):(x=t.redMul(h).redMul(f.redSub(n)),M=this.curve._mulC(o).redMul(h)),this.curve.point(y,x,M)};X.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)};X.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)};X.prototype.mulAdd=function(e,t,i){return this.curve._wnafMulAdd(1,[this,t],[e,i],2,!1)};X.prototype.jmulAdd=function(e,t,i){return this.curve._wnafMulAdd(1,[this,t],[e,i],2,!0)};X.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this};X.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())};X.prototype.getX=function(){return this.normalize(),this.x.fromRed()};X.prototype.getY=function(){return this.normalize(),this.y.fromRed()};X.prototype.eq=function(e){return this===e||this.getX().cmp(e.getX())===0&&this.getY().cmp(e.getY())===0};X.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(this.x.cmp(t)===0)return!0;for(var i=e.clone(),n=this.curve.redN.redMul(this.z);;){if(i.iadd(this.curve.n),i.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(n),this.x.cmp(t)===0)return!0}};X.prototype.toP=X.prototype.normalize;X.prototype.mixedAdd=X.prototype.add});var _n=P(ya=>{"use strict";var hi=ya;hi.base=Dr();hi.short=ha();hi.mont=ba();hi.edwards=ma()});var ct=P(L=>{"use strict";var Cd=kt(),Ud=kr();L.inherits=Ud;function qd(r,e){return(r.charCodeAt(e)&64512)!=55296||e<0||e+1>=r.length?!1:(r.charCodeAt(e+1)&64512)==56320}function zd(r,e){if(Array.isArray(r))return r.slice();if(!r)return[];var t=[];if(typeof r=="string")if(e){if(e==="hex")for(r=r.replace(/[^a-z0-9]+/ig,""),r.length%2!=0&&(r="0"+r),n=0;n<r.length;n+=2)t.push(parseInt(r[n]+r[n+1],16))}else for(var i=0,n=0;n<r.length;n++){var f=r.charCodeAt(n);f<128?t[i++]=f:f<2048?(t[i++]=f>>6|192,t[i++]=f&63|128):qd(r,n)?(f=65536+((f&1023)<<10)+(r.charCodeAt(++n)&1023),t[i++]=f>>18|240,t[i++]=f>>12&63|128,t[i++]=f>>6&63|128,t[i++]=f&63|128):(t[i++]=f>>12|224,t[i++]=f>>6&63|128,t[i++]=f&63|128)}else for(n=0;n<r.length;n++)t[n]=r[n]|0;return t}L.toArray=zd;function Hd(r){for(var e="",t=0;t<r.length;t++)e+=xa(r[t].toString(16));return e}L.toHex=Hd;function ga(r){var e=r>>>24|r>>>8&65280|r<<8&16711680|(r&255)<<24;return e>>>0}L.htonl=ga;function Dd(r,e){for(var t="",i=0;i<r.length;i++){var n=r[i];e==="little"&&(n=ga(n)),t+=wa(n.toString(16))}return t}L.toHex32=Dd;function xa(r){return r.length===1?"0"+r:r}L.zero2=xa;function wa(r){return r.length===7?"0"+r:r.length===6?"00"+r:r.length===5?"000"+r:r.length===4?"0000"+r:r.length===3?"00000"+r:r.length===2?"000000"+r:r.length===1?"0000000"+r:r}L.zero8=wa;function kd(r,e,t,i){var n=t-e;Cd(n%4==0);for(var f=new Array(n/4),c=0,o=e;c<f.length;c++,o+=4){var h;i==="big"?h=r[o]<<24|r[o+1]<<16|r[o+2]<<8|r[o+3]:h=r[o+3]<<24|r[o+2]<<16|r[o+1]<<8|r[o],f[c]=h>>>0}return f}L.join32=kd;function Ld(r,e){for(var t=new Array(r.length*4),i=0,n=0;i<r.length;i++,n+=4){var f=r[i];e==="big"?(t[n]=f>>>24,t[n+1]=f>>>16&255,t[n+2]=f>>>8&255,t[n+3]=f&255):(t[n+3]=f>>>24,t[n+2]=f>>>16&255,t[n+1]=f>>>8&255,t[n]=f&255)}return t}L.split32=Ld;function $d(r,e){return r>>>e|r<<32-e}L.rotr32=$d;function Wd(r,e){return r<<e|r>>>32-e}L.rotl32=Wd;function Vd(r,e){return r+e>>>0}L.sum32=Vd;function Xd(r,e,t){return r+e+t>>>0}L.sum32_3=Xd;function Gd(r,e,t,i){return r+e+t+i>>>0}L.sum32_4=Gd;function jd(r,e,t,i,n){return r+e+t+i+n>>>0}L.sum32_5=jd;function Yd(r,e,t,i){var n=r[e],f=r[e+1],c=i+f>>>0,o=(c<i?1:0)+t+n;r[e]=o>>>0,r[e+1]=c}L.sum64=Yd;function Kd(r,e,t,i){var n=e+i>>>0,f=(n<e?1:0)+r+t;return f>>>0}L.sum64_hi=Kd;function Jd(r,e,t,i){var n=e+i;return n>>>0}L.sum64_lo=Jd;function Zd(r,e,t,i,n,f,c,o){var h=0,b=e;b=b+i>>>0,h+=b<e?1:0,b=b+f>>>0,h+=b<f?1:0,b=b+o>>>0,h+=b<o?1:0;var y=r+t+n+c+h;return y>>>0}L.sum64_4_hi=Zd;function Qd(r,e,t,i,n,f,c,o){var h=e+i+f+o;return h>>>0}L.sum64_4_lo=Qd;function ec(r,e,t,i,n,f,c,o,h,b){var y=0,x=e;x=x+i>>>0,y+=x<e?1:0,x=x+f>>>0,y+=x<f?1:0,x=x+o>>>0,y+=x<o?1:0,x=x+b>>>0,y+=x<b?1:0;var M=r+t+n+c+h+y;return M>>>0}L.sum64_5_hi=ec;function tc(r,e,t,i,n,f,c,o,h,b){var y=e+i+f+o+b;return y>>>0}L.sum64_5_lo=tc;function rc(r,e,t){var i=e<<32-t|r>>>t;return i>>>0}L.rotr64_hi=rc;function ic(r,e,t){var i=r<<32-t|e>>>t;return i>>>0}L.rotr64_lo=ic;function nc(r,e,t){return r>>>t}L.shr64_hi=nc;function fc(r,e,t){var i=r<<32-t|e>>>t;return i>>>0}L.shr64_lo=fc});var yr=P(Sa=>{"use strict";var _a=ct(),ac=kt();function ui(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}Sa.BlockHash=ui;ui.prototype.update=function(e,t){if(e=_a.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){e=this.pending;var i=e.length%this._delta8;this.pending=e.slice(e.length-i,e.length),this.pending.length===0&&(this.pending=null),e=_a.join32(e,0,e.length-i,this.endian);for(var n=0;n<e.length;n+=this._delta32)this._update(e,n,n+this._delta32)}return this};ui.prototype.digest=function(e){return this.update(this._pad()),ac(this.pending===null),this._digest(e)};ui.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,i=t-(e+this.padLength)%t,n=new Array(i+this.padLength);n[0]=128;for(var f=1;f<i;f++)n[f]=0;if(e<<=3,this.endian==="big"){for(var c=8;c<this.padLength;c++)n[f++]=0;n[f++]=0,n[f++]=0,n[f++]=0,n[f++]=0,n[f++]=e>>>24&255,n[f++]=e>>>16&255,n[f++]=e>>>8&255,n[f++]=e&255}else for(n[f++]=e&255,n[f++]=e>>>8&255,n[f++]=e>>>16&255,n[f++]=e>>>24&255,n[f++]=0,n[f++]=0,n[f++]=0,n[f++]=0,c=8;c<this.padLength;c++)n[f++]=0;return n}});var Sn=P(Bt=>{"use strict";var sc=ct(),mt=sc.rotr32;function oc(r,e,t,i){if(r===0)return Ma(e,t,i);if(r===1||r===3)return Ea(e,t,i);if(r===2)return Aa(e,t,i)}Bt.ft_1=oc;function Ma(r,e,t){return r&e^~r&t}Bt.ch32=Ma;function Aa(r,e,t){return r&e^r&t^e&t}Bt.maj32=Aa;function Ea(r,e,t){return r^e^t}Bt.p32=Ea;function dc(r){return mt(r,2)^mt(r,13)^mt(r,22)}Bt.s0_256=dc;function cc(r){return mt(r,6)^mt(r,11)^mt(r,25)}Bt.s1_256=cc;function hc(r){return mt(r,7)^mt(r,18)^r>>>3}Bt.g0_256=hc;function uc(r){return mt(r,17)^mt(r,19)^r>>>10}Bt.g1_256=uc});var Ra=P((Gh,Ta)=>{"use strict";var gr=ct(),lc=yr(),bc=Sn(),Mn=gr.rotl32,Lr=gr.sum32,pc=gr.sum32_5,vc=bc.ft_1,Ia=lc.BlockHash,mc=[1518500249,1859775393,2400959708,3395469782];function yt(){if(!(this instanceof yt))return new yt;Ia.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}gr.inherits(yt,Ia);Ta.exports=yt;yt.blockSize=512;yt.outSize=160;yt.hmacStrength=80;yt.padLength=64;yt.prototype._update=function(e,t){for(var i=this.W,n=0;n<16;n++)i[n]=e[t+n];for(;n<i.length;n++)i[n]=Mn(i[n-3]^i[n-8]^i[n-14]^i[n-16],1);var f=this.h[0],c=this.h[1],o=this.h[2],h=this.h[3],b=this.h[4];for(n=0;n<i.length;n++){var y=~~(n/20),x=pc(Mn(f,5),vc(y,c,o,h),b,i[n],mc[y]);b=h,h=o,o=Mn(c,30),c=f,f=x}this.h[0]=Lr(this.h[0],f),this.h[1]=Lr(this.h[1],c),this.h[2]=Lr(this.h[2],o),this.h[3]=Lr(this.h[3],h),this.h[4]=Lr(this.h[4],b)};yt.prototype._digest=function(e){return e==="hex"?gr.toHex32(this.h,"big"):gr.split32(this.h,"big")}});var An=P((jh,Pa)=>{"use strict";var xr=ct(),yc=yr(),wr=Sn(),gc=kt(),ht=xr.sum32,xc=xr.sum32_4,wc=xr.sum32_5,_c=wr.ch32,Sc=wr.maj32,Mc=wr.s0_256,Ac=wr.s1_256,Ec=wr.g0_256,Ic=wr.g1_256,Ba=yc.BlockHash,Tc=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function gt(){if(!(this instanceof gt))return new gt;Ba.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=Tc,this.W=new Array(64)}xr.inherits(gt,Ba);Pa.exports=gt;gt.blockSize=512;gt.outSize=256;gt.hmacStrength=192;gt.padLength=64;gt.prototype._update=function(e,t){for(var i=this.W,n=0;n<16;n++)i[n]=e[t+n];for(;n<i.length;n++)i[n]=xc(Ic(i[n-2]),i[n-7],Ec(i[n-15]),i[n-16]);var f=this.h[0],c=this.h[1],o=this.h[2],h=this.h[3],b=this.h[4],y=this.h[5],x=this.h[6],M=this.h[7];for(gc(this.k.length===i.length),n=0;n<i.length;n++){var S=wc(M,Ac(b),_c(b,y,x),this.k[n],i[n]),A=ht(Mc(f),Sc(f,c,o));M=x,x=y,y=b,b=ht(h,S),h=o,o=c,c=f,f=ht(S,A)}this.h[0]=ht(this.h[0],f),this.h[1]=ht(this.h[1],c),this.h[2]=ht(this.h[2],o),this.h[3]=ht(this.h[3],h),this.h[4]=ht(this.h[4],b),this.h[5]=ht(this.h[5],y),this.h[6]=ht(this.h[6],x),this.h[7]=ht(this.h[7],M)};gt.prototype._digest=function(e){return e==="hex"?xr.toHex32(this.h,"big"):xr.split32(this.h,"big")}});var Na=P((Yh,Oa)=>{"use strict";var En=ct(),Fa=An();function Pt(){if(!(this instanceof Pt))return new Pt;Fa.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}En.inherits(Pt,Fa);Oa.exports=Pt;Pt.blockSize=512;Pt.outSize=224;Pt.hmacStrength=192;Pt.padLength=64;Pt.prototype._digest=function(e){return e==="hex"?En.toHex32(this.h.slice(0,7),"big"):En.split32(this.h.slice(0,7),"big")}});var Rn=P((Kh,za)=>{"use strict";var Ke=ct(),Rc=yr(),Bc=kt(),xt=Ke.rotr64_hi,wt=Ke.rotr64_lo,Ca=Ke.shr64_hi,Ua=Ke.shr64_lo,Wt=Ke.sum64,In=Ke.sum64_hi,Tn=Ke.sum64_lo,Pc=Ke.sum64_4_hi,Fc=Ke.sum64_4_lo,Oc=Ke.sum64_5_hi,Nc=Ke.sum64_5_lo,qa=Rc.BlockHash,Cc=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function ut(){if(!(this instanceof ut))return new ut;qa.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=Cc,this.W=new Array(160)}Ke.inherits(ut,qa);za.exports=ut;ut.blockSize=1024;ut.outSize=512;ut.hmacStrength=192;ut.padLength=128;ut.prototype._prepareBlock=function(e,t){for(var i=this.W,n=0;n<32;n++)i[n]=e[t+n];for(;n<i.length;n+=2){var f=Xc(i[n-4],i[n-3]),c=Gc(i[n-4],i[n-3]),o=i[n-14],h=i[n-13],b=Wc(i[n-30],i[n-29]),y=Vc(i[n-30],i[n-29]),x=i[n-32],M=i[n-31];i[n]=Pc(f,c,o,h,b,y,x,M),i[n+1]=Fc(f,c,o,h,b,y,x,M)}};ut.prototype._update=function(e,t){this._prepareBlock(e,t);var i=this.W,n=this.h[0],f=this.h[1],c=this.h[2],o=this.h[3],h=this.h[4],b=this.h[5],y=this.h[6],x=this.h[7],M=this.h[8],S=this.h[9],A=this.h[10],E=this.h[11],O=this.h[12],T=this.h[13],z=this.h[14],H=this.h[15];Bc(this.k.length===i.length);for(var Ne=0;Ne<i.length;Ne+=2){var $=z,Ce=H,Ge=Lc(M,S),D=$c(M,S),We=Uc(M,S,A,E,O,T),g=qc(M,S,A,E,O,T),a=this.k[Ne],d=this.k[Ne+1],u=i[Ne],l=i[Ne+1],m=Oc($,Ce,Ge,D,We,g,a,d,u,l),w=Nc($,Ce,Ge,D,We,g,a,d,u,l);$=Dc(n,f),Ce=kc(n,f),Ge=zc(n,f,c,o,h,b),D=Hc(n,f,c,o,h,b);var _=In($,Ce,Ge,D),p=Tn($,Ce,Ge,D);z=O,H=T,O=A,T=E,A=M,E=S,M=In(y,x,m,w),S=Tn(x,x,m,w),y=h,x=b,h=c,b=o,c=n,o=f,n=In(m,w,_,p),f=Tn(m,w,_,p)}Wt(this.h,0,n,f),Wt(this.h,2,c,o),Wt(this.h,4,h,b),Wt(this.h,6,y,x),Wt(this.h,8,M,S),Wt(this.h,10,A,E),Wt(this.h,12,O,T),Wt(this.h,14,z,H)};ut.prototype._digest=function(e){return e==="hex"?Ke.toHex32(this.h,"big"):Ke.split32(this.h,"big")};function Uc(r,e,t,i,n){var f=r&t^~r&n;return f<0&&(f+=4294967296),f}function qc(r,e,t,i,n,f){var c=e&i^~e&f;return c<0&&(c+=4294967296),c}function zc(r,e,t,i,n){var f=r&t^r&n^t&n;return f<0&&(f+=4294967296),f}function Hc(r,e,t,i,n,f){var c=e&i^e&f^i&f;return c<0&&(c+=4294967296),c}function Dc(r,e){var t=xt(r,e,28),i=xt(e,r,2),n=xt(e,r,7),f=t^i^n;return f<0&&(f+=4294967296),f}function kc(r,e){var t=wt(r,e,28),i=wt(e,r,2),n=wt(e,r,7),f=t^i^n;return f<0&&(f+=4294967296),f}function Lc(r,e){var t=xt(r,e,14),i=xt(r,e,18),n=xt(e,r,9),f=t^i^n;return f<0&&(f+=4294967296),f}function $c(r,e){var t=wt(r,e,14),i=wt(r,e,18),n=wt(e,r,9),f=t^i^n;return f<0&&(f+=4294967296),f}function Wc(r,e){var t=xt(r,e,1),i=xt(r,e,8),n=Ca(r,e,7),f=t^i^n;return f<0&&(f+=4294967296),f}function Vc(r,e){var t=wt(r,e,1),i=wt(r,e,8),n=Ua(r,e,7),f=t^i^n;return f<0&&(f+=4294967296),f}function Xc(r,e){var t=xt(r,e,19),i=xt(e,r,29),n=Ca(r,e,6),f=t^i^n;return f<0&&(f+=4294967296),f}function Gc(r,e){var t=wt(r,e,19),i=wt(e,r,29),n=Ua(r,e,6),f=t^i^n;return f<0&&(f+=4294967296),f}});var ka=P((Jh,Da)=>{"use strict";var Bn=ct(),Ha=Rn();function Ft(){if(!(this instanceof Ft))return new Ft;Ha.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}Bn.inherits(Ft,Ha);Da.exports=Ft;Ft.blockSize=1024;Ft.outSize=384;Ft.hmacStrength=192;Ft.padLength=128;Ft.prototype._digest=function(e){return e==="hex"?Bn.toHex32(this.h.slice(0,12),"big"):Bn.split32(this.h.slice(0,12),"big")}});var La=P(_r=>{"use strict";_r.sha1=Ra();_r.sha224=Na();_r.sha256=An();_r.sha384=ka();_r.sha512=Rn()});var ja=P(Ga=>{"use strict";var tr=ct(),jc=yr(),li=tr.rotl32,$a=tr.sum32,$r=tr.sum32_3,Wa=tr.sum32_4,Va=jc.BlockHash;function _t(){if(!(this instanceof _t))return new _t;Va.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}tr.inherits(_t,Va);Ga.ripemd160=_t;_t.blockSize=512;_t.outSize=160;_t.hmacStrength=192;_t.padLength=64;_t.prototype._update=function(e,t){for(var i=this.h[0],n=this.h[1],f=this.h[2],c=this.h[3],o=this.h[4],h=i,b=n,y=f,x=c,M=o,S=0;S<80;S++){var A=$a(li(Wa(i,Xa(S,n,f,c),e[Jc[S]+t],Yc(S)),Qc[S]),o);i=o,o=c,c=li(f,10),f=n,n=A,A=$a(li(Wa(h,Xa(79-S,b,y,x),e[Zc[S]+t],Kc(S)),e0[S]),M),h=M,M=x,x=li(y,10),y=b,b=A}A=$r(this.h[1],f,x),this.h[1]=$r(this.h[2],c,M),this.h[2]=$r(this.h[3],o,h),this.h[3]=$r(this.h[4],i,b),this.h[4]=$r(this.h[0],n,y),this.h[0]=A};_t.prototype._digest=function(e){return e==="hex"?tr.toHex32(this.h,"little"):tr.split32(this.h,"little")};function Xa(r,e,t,i){return r<=15?e^t^i:r<=31?e&t|~e&i:r<=47?(e|~t)^i:r<=63?e&i|t&~i:e^(t|~i)}function Yc(r){return r<=15?0:r<=31?1518500249:r<=47?1859775393:r<=63?2400959708:2840853838}function Kc(r){return r<=15?1352829926:r<=31?1548603684:r<=47?1836072691:r<=63?2053994217:0}var Jc=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],Zc=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],Qc=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],e0=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]});var Ka=P((eu,Ya)=>{"use strict";var t0=ct(),r0=kt();function Sr(r,e,t){if(!(this instanceof Sr))return new Sr(r,e,t);this.Hash=r,this.blockSize=r.blockSize/8,this.outSize=r.outSize/8,this.inner=null,this.outer=null,this._init(t0.toArray(e,t))}Ya.exports=Sr;Sr.prototype._init=function(e){e.length>this.blockSize&&(e=new this.Hash().update(e).digest()),r0(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=new this.Hash().update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=new this.Hash().update(e)};Sr.prototype.update=function(e,t){return this.inner.update(e,t),this};Sr.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}});var bi=P(Ja=>{var Le=Ja;Le.utils=ct();Le.common=yr();Le.sha=La();Le.ripemd=ja();Le.hmac=Ka();Le.sha1=Le.sha.sha1;Le.sha256=Le.sha.sha256;Le.sha224=Le.sha.sha224;Le.sha384=Le.sha.sha384;Le.sha512=Le.sha.sha512;Le.ripemd160=Le.ripemd.ripemd160});var Qa=P((ru,Za)=>{Za.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}});var pi=P(rs=>{"use strict";var Pn=rs,Vt=bi(),Fn=_n(),i0=et(),es=i0.assert;function ts(r){r.type==="short"?this.curve=new Fn.short(r):r.type==="edwards"?this.curve=new Fn.edwards(r):this.curve=new Fn.mont(r),this.g=this.curve.g,this.n=this.curve.n,this.hash=r.hash,es(this.g.validate(),"Invalid curve"),es(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}Pn.PresetCurve=ts;function Xt(r,e){Object.defineProperty(Pn,r,{configurable:!0,enumerable:!0,get:function(){var t=new ts(e);return Object.defineProperty(Pn,r,{configurable:!0,enumerable:!0,value:t}),t}})}Xt("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:Vt.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]});Xt("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:Vt.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]});Xt("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:Vt.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]});Xt("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:Vt.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]});Xt("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:Vt.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]});Xt("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:Vt.sha256,gRed:!1,g:["9"]});Xt("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:Vt.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});var On;try{On=Qa()}catch(r){On=void 0}Xt("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:Vt.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",On]})});var fs=P((nu,ns)=>{"use strict";var n0=bi(),rr=ln(),is=kt();function Gt(r){if(!(this instanceof Gt))return new Gt(r);this.hash=r.hash,this.predResist=!!r.predResist,this.outLen=this.hash.outSize,this.minEntropy=r.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=rr.toArray(r.entropy,r.entropyEnc||"hex"),t=rr.toArray(r.nonce,r.nonceEnc||"hex"),i=rr.toArray(r.pers,r.persEnc||"hex");is(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,t,i)}ns.exports=Gt;Gt.prototype._init=function(e,t,i){var n=e.concat(t).concat(i);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var f=0;f<this.V.length;f++)this.K[f]=0,this.V[f]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656};Gt.prototype._hmac=function(){return new n0.hmac(this.hash,this.K)};Gt.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),!!e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())};Gt.prototype.reseed=function(e,t,i,n){typeof t!="string"&&(n=i,i=t,t=null),e=rr.toArray(e,t),i=rr.toArray(i,n),is(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(i||[])),this._reseed=1};Gt.prototype.generate=function(e,t,i,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");typeof t!="string"&&(n=i,i=t,t=null),i&&(i=rr.toArray(i,n||"hex"),this._update(i));for(var f=[];f.length<e;)this.V=this._hmac().update(this.V).digest(),f=f.concat(this.V);var c=f.slice(0,e);return this._update(i),this._reseed++,rr.encode(c,t)}});var ss=P((fu,as)=>{"use strict";var f0=pt(),a0=et(),Nn=a0.assert;function Xe(r,e){this.ec=r,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}as.exports=Xe;Xe.fromPublic=function(e,t,i){return t instanceof Xe?t:new Xe(e,{pub:t,pubEnc:i})};Xe.fromPrivate=function(e,t,i){return t instanceof Xe?t:new Xe(e,{priv:t,privEnc:i})};Xe.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}};Xe.prototype.getPublic=function(e,t){return typeof e=="string"&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub};Xe.prototype.getPrivate=function(e){return e==="hex"?this.priv.toString(16,2):this.priv};Xe.prototype._importPrivate=function(e,t){this.priv=new f0(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)};Xe.prototype._importPublic=function(e,t){if(e.x||e.y){this.ec.curve.type==="mont"?Nn(e.x,"Need x coordinate"):(this.ec.curve.type==="short"||this.ec.curve.type==="edwards")&&Nn(e.x&&e.y,"Need both x and y coordinate"),this.pub=this.ec.curve.point(e.x,e.y);return}this.pub=this.ec.curve.decodePoint(e,t)};Xe.prototype.derive=function(e){return e.validate()||Nn(e.validate(),"public point not validated"),e.mul(this.priv).getX()};Xe.prototype.sign=function(e,t,i){return this.ec.sign(e,this,t,i)};Xe.prototype.verify=function(e,t){return this.ec.verify(e,t,this)};Xe.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}});var cs=P((au,ds)=>{"use strict";var vi=pt(),Cn=et(),s0=Cn.assert;function mi(r,e){if(r instanceof mi)return r;this._importDER(r,e)||(s0(r.r&&r.s,"Signature without r or s"),this.r=new vi(r.r,16),this.s=new vi(r.s,16),r.recoveryParam===void 0?this.recoveryParam=null:this.recoveryParam=r.recoveryParam)}ds.exports=mi;function o0(){this.place=0}function Un(r,e){var t=r[e.place++];if(!(t&128))return t;var i=t&15;if(i===0||i>4)return!1;for(var n=0,f=0,c=e.place;f<i;f++,c++)n<<=8,n|=r[c],n>>>=0;return n<=127?!1:(e.place=c,n)}function os(r){for(var e=0,t=r.length-1;!r[e]&&!(r[e+1]&128)&&e<t;)e++;return e===0?r:r.slice(e)}mi.prototype._importDER=function(e,t){e=Cn.toArray(e,t);var i=new o0;if(e[i.place++]!==48)return!1;var n=Un(e,i);if(n===!1||n+i.place!==e.length||e[i.place++]!==2)return!1;var f=Un(e,i);if(f===!1)return!1;var c=e.slice(i.place,f+i.place);if(i.place+=f,e[i.place++]!==2)return!1;var o=Un(e,i);if(o===!1||e.length!==o+i.place)return!1;var h=e.slice(i.place,o+i.place);if(c[0]===0)if(c[1]&128)c=c.slice(1);else return!1;if(h[0]===0)if(h[1]&128)h=h.slice(1);else return!1;return this.r=new vi(c),this.s=new vi(h),this.recoveryParam=null,!0};function qn(r,e){if(e<128){r.push(e);return}var t=1+(Math.log(e)/Math.LN2>>>3);for(r.push(t|128);--t;)r.push(e>>>(t<<3)&255);r.push(e)}mi.prototype.toDER=function(e){var t=this.r.toArray(),i=this.s.toArray();for(t[0]&128&&(t=[0].concat(t)),i[0]&128&&(i=[0].concat(i)),t=os(t),i=os(i);!i[0]&&!(i[1]&128);)i=i.slice(1);var n=[2];qn(n,t.length),n=n.concat(t),n.push(2),qn(n,i.length);var f=n.concat(i),c=[48];return qn(c,f.length),c=c.concat(f),Cn.encode(c,e)}});var bs=P((su,ls)=>{"use strict";var ir=pt(),hs=fs(),d0=et(),zn=pi(),c0=mn(),us=d0.assert,Hn=ss(),yi=cs();function at(r){if(!(this instanceof at))return new at(r);typeof r=="string"&&(us(Object.prototype.hasOwnProperty.call(zn,r),"Unknown curve "+r),r=zn[r]),r instanceof zn.PresetCurve&&(r={curve:r}),this.curve=r.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=r.curve.g,this.g.precompute(r.curve.n.bitLength()+1),this.hash=r.hash||r.curve.hash}ls.exports=at;at.prototype.keyPair=function(e){return new Hn(this,e)};at.prototype.keyFromPrivate=function(e,t){return Hn.fromPrivate(this,e,t)};at.prototype.keyFromPublic=function(e,t){return Hn.fromPublic(this,e,t)};at.prototype.genKeyPair=function(e){e||(e={});for(var t=new hs({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||c0(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),i=this.n.byteLength(),n=this.n.sub(new ir(2));;){var f=new ir(t.generate(i));if(!(f.cmp(n)>0))return f.iaddn(1),this.keyFromPrivate(f)}};at.prototype._truncateToN=function(e,t){var i=e.byteLength()*8-this.n.bitLength();return i>0&&(e=e.ushrn(i)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e};at.prototype.sign=function(e,t,i,n){typeof i=="object"&&(n=i,i=null),n||(n={}),t=this.keyFromPrivate(t,i),e=this._truncateToN(new ir(e,16));for(var f=this.n.byteLength(),c=t.getPrivate().toArray("be",f),o=e.toArray("be",f),h=new hs({hash:this.hash,entropy:c,nonce:o,pers:n.pers,persEnc:n.persEnc||"utf8"}),b=this.n.sub(new ir(1)),y=0;;y++){var x=n.k?n.k(y):new ir(h.generate(this.n.byteLength()));if(x=this._truncateToN(x,!0),!(x.cmpn(1)<=0||x.cmp(b)>=0)){var M=this.g.mul(x);if(!M.isInfinity()){var S=M.getX(),A=S.umod(this.n);if(A.cmpn(0)!==0){var E=x.invm(this.n).mul(A.mul(t.getPrivate()).iadd(e));if(E=E.umod(this.n),E.cmpn(0)!==0){var O=(M.getY().isOdd()?1:0)|(S.cmp(A)!==0?2:0);return n.canonical&&E.cmp(this.nh)>0&&(E=this.n.sub(E),O^=1),new yi({r:A,s:E,recoveryParam:O})}}}}}};at.prototype.verify=function(e,t,i,n){e=this._truncateToN(new ir(e,16)),i=this.keyFromPublic(i,n),t=new yi(t,"hex");var f=t.r,c=t.s;if(f.cmpn(1)<0||f.cmp(this.n)>=0||c.cmpn(1)<0||c.cmp(this.n)>=0)return!1;var o=c.invm(this.n),h=o.mul(e).umod(this.n),b=o.mul(f).umod(this.n),y;return this.curve._maxwellTrick?(y=this.g.jmulAdd(h,i.getPublic(),b),y.isInfinity()?!1:y.eqXToP(f)):(y=this.g.mulAdd(h,i.getPublic(),b),y.isInfinity()?!1:y.getX().umod(this.n).cmp(f)===0)};at.prototype.recoverPubKey=function(r,e,t,i){us((3&t)===t,"The recovery param is more than two bits"),e=new yi(e,i);var n=this.n,f=new ir(r),c=e.r,o=e.s,h=t&1,b=t>>1;if(c.cmp(this.curve.p.umod(this.curve.n))>=0&&b)throw new Error("Unable to find sencond key candinate");b?c=this.curve.pointFromX(c.add(this.curve.n),h):c=this.curve.pointFromX(c,h);var y=e.r.invm(n),x=n.sub(f).mul(y).umod(n),M=o.mul(y).umod(n);return this.g.mulAdd(x,c,M)};at.prototype.getKeyRecoveryParam=function(r,e,t,i){if(e=new yi(e,i),e.recoveryParam!==null)return e.recoveryParam;for(var n=0;n<4;n++){var f;try{f=this.recoverPubKey(r,e,n)}catch(c){continue}if(f.eq(t))return n}throw new Error("Unable to find valid recovery factor")}});var ys=P((ou,ms)=>{"use strict";var Wr=et(),ps=Wr.assert,vs=Wr.parseBytes,Mr=Wr.cachedProperty;function He(r,e){this.eddsa=r,this._secret=vs(e.secret),r.isPoint(e.pub)?this._pub=e.pub:this._pubBytes=vs(e.pub)}He.fromPublic=function(e,t){return t instanceof He?t:new He(e,{pub:t})};He.fromSecret=function(e,t){return t instanceof He?t:new He(e,{secret:t})};He.prototype.secret=function(){return this._secret};Mr(He,"pubBytes",function(){return this.eddsa.encodePoint(this.pub())});Mr(He,"pub",function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())});Mr(He,"privBytes",function(){var e=this.eddsa,t=this.hash(),i=e.encodingLength-1,n=t.slice(0,e.encodingLength);return n[0]&=248,n[i]&=127,n[i]|=64,n});Mr(He,"priv",function(){return this.eddsa.decodeInt(this.privBytes())});Mr(He,"hash",function(){return this.eddsa.hash().update(this.secret()).digest()});Mr(He,"messagePrefix",function(){return this.hash().slice(this.eddsa.encodingLength)});He.prototype.sign=function(e){return ps(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)};He.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)};He.prototype.getSecret=function(e){return ps(this._secret,"KeyPair is public only"),Wr.encode(this.secret(),e)};He.prototype.getPublic=function(e){return Wr.encode(this.pubBytes(),e)};ms.exports=He});var xs=P((du,gs)=>{"use strict";var h0=pt(),gi=et(),u0=gi.assert,xi=gi.cachedProperty,l0=gi.parseBytes;function nr(r,e){this.eddsa=r,typeof e!="object"&&(e=l0(e)),Array.isArray(e)&&(e={R:e.slice(0,r.encodingLength),S:e.slice(r.encodingLength)}),u0(e.R&&e.S,"Signature without R or S"),r.isPoint(e.R)&&(this._R=e.R),e.S instanceof h0&&(this._S=e.S),this._Rencoded=Array.isArray(e.R)?e.R:e.Rencoded,this._Sencoded=Array.isArray(e.S)?e.S:e.Sencoded}xi(nr,"S",function(){return this.eddsa.decodeInt(this.Sencoded())});xi(nr,"R",function(){return this.eddsa.decodePoint(this.Rencoded())});xi(nr,"Rencoded",function(){return this.eddsa.encodePoint(this.R())});xi(nr,"Sencoded",function(){return this.eddsa.encodeInt(this.S())});nr.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())};nr.prototype.toHex=function(){return gi.encode(this.toBytes(),"hex").toUpperCase()};gs.exports=nr});var As=P((cu,Ms)=>{"use strict";var b0=bi(),p0=pi(),Ar=et(),v0=Ar.assert,ws=Ar.parseBytes,_s=ys(),Ss=xs();function Je(r){if(v0(r==="ed25519","only tested with ed25519 so far"),!(this instanceof Je))return new Je(r);r=p0[r].curve,this.curve=r,this.g=r.g,this.g.precompute(r.n.bitLength()+1),this.pointClass=r.point().constructor,this.encodingLength=Math.ceil(r.n.bitLength()/8),this.hash=b0.sha512}Ms.exports=Je;Je.prototype.sign=function(e,t){e=ws(e);var i=this.keyFromSecret(t),n=this.hashInt(i.messagePrefix(),e),f=this.g.mul(n),c=this.encodePoint(f),o=this.hashInt(c,i.pubBytes(),e).mul(i.priv()),h=n.add(o).umod(this.curve.n);return this.makeSignature({R:f,S:h,Rencoded:c})};Je.prototype.verify=function(e,t,i){e=ws(e),t=this.makeSignature(t);var n=this.keyFromPublic(i),f=this.hashInt(t.Rencoded(),n.pubBytes(),e),c=this.g.mul(t.S()),o=t.R().add(n.pub().mul(f));return o.eq(c)};Je.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return Ar.intFromLE(e.digest()).umod(this.curve.n)};Je.prototype.keyFromPublic=function(e){return _s.fromPublic(this,e)};Je.prototype.keyFromSecret=function(e){return _s.fromSecret(this,e)};Je.prototype.makeSignature=function(e){return e instanceof Ss?e:new Ss(this,e)};Je.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t};Je.prototype.decodePoint=function(e){e=Ar.parseBytes(e);var t=e.length-1,i=e.slice(0,t).concat(e[t]&~128),n=(e[t]&128)!=0,f=Ar.intFromLE(i);return this.curve.pointFromY(f,n)};Je.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)};Je.prototype.decodeInt=function(e){return Ar.intFromLE(e)};Je.prototype.isPoint=function(e){return e instanceof this.pointClass}});var Is=P(Es=>{"use strict";var fr=Es;fr.version=ea().version;fr.utils=et();fr.rand=mn();fr.curve=_n();fr.curves=pi();fr.ec=bs();fr.eddsa=As()});var ar=P((uu,Ts)=>{"use strict";var m0=require("stream"),{Buffer:F}=require("buffer"),y0=new TextDecoder("utf8",{fatal:!0,ignoreBOM:!0}),Er=class extends m0.Transform{constructor(e,t,i={}){let n=null,f=null;switch(typeof e){case"object":F.isBuffer(e)?n=e:e&&(i=e);break;case"string":n=e;break;case"undefined":break;default:throw new TypeError("Invalid input")}switch(typeof t){case"object":t&&(i=t);break;case"string":f=t;break;case"undefined":break;default:throw new TypeError("Invalid inputEncoding")}if(!i||typeof i!="object")throw new TypeError("Invalid options");n==null&&(n=i.input),f==null&&(f=i.inputEncoding),delete i.input,delete i.inputEncoding;let c=i.watchPipe==null?!0:i.watchPipe;delete i.watchPipe;let o=Boolean(i.readError);delete i.readError,super(i),this.readError=o,c&&this.on("pipe",h=>{let b=h._readableState.objectMode;if(this.length>0&&b!==this._readableState.objectMode)throw new Error("Do not switch objectMode in the middle of the stream");this._readableState.objectMode=b,this._writableState.objectMode=b}),n!=null&&this.end(n,f)}static isNoFilter(e){return e instanceof this}static compare(e,t){if(!(e instanceof this))throw new TypeError("Arguments must be NoFilters");return e===t?0:e.compare(t)}static concat(e,t){if(!Array.isArray(e))throw new TypeError("list argument must be an Array of NoFilters");if(e.length===0||t===0)return F.alloc(0);t==null&&(t=e.reduce((c,o)=>{if(!(o instanceof Er))throw new TypeError("list argument must be an Array of NoFilters");return c+o.length},0));let i=!0,n=!0,f=e.map(c=>{if(!(c instanceof Er))throw new TypeError("list argument must be an Array of NoFilters");let o=c.slice();return F.isBuffer(o)?n=!1:i=!1,o});if(i)return F.concat(f,t);if(n)return[].concat(...f).slice(0,t);throw new Error("Concatenating mixed object and byte streams not supported")}_transform(e,t,i){!this._readableState.objectMode&&!F.isBuffer(e)&&(e=F.from(e,t)),this.push(e),i()}_bufArray(){let e=this._readableState.buffer;if(!Array.isArray(e)){let t=e.head;for(e=[];t!=null;)e.push(t.data),t=t.next}return e}read(e){let t=super.read(e);if(t!=null){if(this.emit("read",t),this.readError&&t.length<e)throw new Error(`Read ${t.length}, wanted ${e}`)}else if(this.readError)throw new Error(`No data available, wanted ${e}`);return t}readFull(e){let t=null,i=null,n=null;return new Promise((f,c)=>{if(this.length>=e){f(this.read(e));return}if(this.writableFinished){c(new Error(`Stream finished before ${e} bytes were available`));return}t=o=>{this.length>=e&&f(this.read(e))},i=()=>{c(new Error(`Stream finished before ${e} bytes were available`))},n=c,this.on("readable",t),this.on("error",n),this.on("finish",i)}).finally(()=>{t&&(this.removeListener("readable",t),this.removeListener("error",n),this.removeListener("finish",i))})}promise(e){let t=!1;return new Promise((i,n)=>{this.on("finish",()=>{let f=this.read();e!=null&&!t&&(t=!0,e(null,f)),i(f)}),this.on("error",f=>{e!=null&&!t&&(t=!0,e(f)),n(f)})})}compare(e){if(!(e instanceof Er))throw new TypeError("Arguments must be NoFilters");if(this===e)return 0;let t=this.slice(),i=e.slice();if(F.isBuffer(t)&&F.isBuffer(i))return t.compare(i);throw new Error("Cannot compare streams in object mode")}equals(e){return this.compare(e)===0}slice(e,t){if(this._readableState.objectMode)return this._bufArray().slice(e,t);let i=this._bufArray();switch(i.length){case 0:return F.alloc(0);case 1:return i[0].slice(e,t);default:return F.concat(i).slice(e,t)}}get(e){return this.slice()[e]}toJSON(){let e=this.slice();return F.isBuffer(e)?e.toJSON():e}toString(e,t,i){let n=this.slice(t,i);return F.isBuffer(n)?!e||e==="utf8"?y0.decode(n):n.toString(e):JSON.stringify(n)}[Symbol.for("nodejs.util.inspect.custom")](e,t){let n=this._bufArray().map(f=>F.isBuffer(f)?t.stylize(f.toString("hex"),"string"):JSON.stringify(f)).join(", ");return`${this.constructor.name} [${n}]`}get length(){return this._readableState.length}writeBigInt(e){let t=e.toString(16);if(e<0){let i=BigInt(Math.floor(t.length/2));e=(BigInt(1)<<i*BigInt(8))+e,t=e.toString(16)}return t.length%2&&(t=`0${t}`),this.push(F.from(t,"hex"))}readUBigInt(e){let t=this.read(e);return F.isBuffer(t)?BigInt(`0x${t.toString("hex")}`):null}readBigInt(e){let t=this.read(e);if(!F.isBuffer(t))return null;let i=BigInt(`0x${t.toString("hex")}`);return t[0]&128&&(i-=BigInt(1)<<BigInt(t.length)*BigInt(8)),i}writeUInt8(e){let t=F.from([e]);return this.push(t)}writeUInt16LE(e){let t=F.alloc(2);return t.writeUInt16LE(e),this.push(t)}writeUInt16BE(e){let t=F.alloc(2);return t.writeUInt16BE(e),this.push(t)}writeUInt32LE(e){let t=F.alloc(4);return t.writeUInt32LE(e),this.push(t)}writeUInt32BE(e){let t=F.alloc(4);return t.writeUInt32BE(e),this.push(t)}writeInt8(e){let t=F.from([e]);return this.push(t)}writeInt16LE(e){let t=F.alloc(2);return t.writeUInt16LE(e),this.push(t)}writeInt16BE(e){let t=F.alloc(2);return t.writeUInt16BE(e),this.push(t)}writeInt32LE(e){let t=F.alloc(4);return t.writeUInt32LE(e),this.push(t)}writeInt32BE(e){let t=F.alloc(4);return t.writeUInt32BE(e),this.push(t)}writeFloatLE(e){let t=F.alloc(4);return t.writeFloatLE(e),this.push(t)}writeFloatBE(e){let t=F.alloc(4);return t.writeFloatBE(e),this.push(t)}writeDoubleLE(e){let t=F.alloc(8);return t.writeDoubleLE(e),this.push(t)}writeDoubleBE(e){let t=F.alloc(8);return t.writeDoubleBE(e),this.push(t)}writeBigInt64LE(e){let t=F.alloc(8);return t.writeBigInt64LE(e),this.push(t)}writeBigInt64BE(e){let t=F.alloc(8);return t.writeBigInt64BE(e),this.push(t)}writeBigUInt64LE(e){let t=F.alloc(8);return t.writeBigUInt64LE(e),this.push(t)}writeBigUInt64BE(e){let t=F.alloc(8);return t.writeBigUInt64BE(e),this.push(t)}readUInt8(){let e=this.read(1);return F.isBuffer(e)?e.readUInt8():null}readUInt16LE(){let e=this.read(2);return F.isBuffer(e)?e.readUInt16LE():null}readUInt16BE(){let e=this.read(2);return F.isBuffer(e)?e.readUInt16BE():null}readUInt32LE(){let e=this.read(4);return F.isBuffer(e)?e.readUInt32LE():null}readUInt32BE(){let e=this.read(4);return F.isBuffer(e)?e.readUInt32BE():null}readInt8(){let e=this.read(1);return F.isBuffer(e)?e.readInt8():null}readInt16LE(){let e=this.read(2);return F.isBuffer(e)?e.readInt16LE():null}readInt16BE(){let e=this.read(2);return F.isBuffer(e)?e.readInt16BE():null}readInt32LE(){let e=this.read(4);return F.isBuffer(e)?e.readInt32LE():null}readInt32BE(){let e=this.read(4);return F.isBuffer(e)?e.readInt32BE():null}readFloatLE(){let e=this.read(4);return F.isBuffer(e)?e.readFloatLE():null}readFloatBE(){let e=this.read(4);return F.isBuffer(e)?e.readFloatBE():null}readDoubleLE(){let e=this.read(8);return F.isBuffer(e)?e.readDoubleLE():null}readDoubleBE(){let e=this.read(8);return F.isBuffer(e)?e.readDoubleBE():null}readBigInt64LE(){let e=this.read(8);return F.isBuffer(e)?e.readBigInt64LE():null}readBigInt64BE(){let e=this.read(8);return F.isBuffer(e)?e.readBigInt64BE():null}readBigUInt64LE(){let e=this.read(8);return F.isBuffer(e)?e.readBigUInt64LE():null}readBigUInt64BE(){let e=this.read(8);return F.isBuffer(e)?e.readBigUInt64BE():null}};Ts.exports=Er});var Nt=P(Ot=>{"use strict";Ot.MT={POS_INT:0,NEG_INT:1,BYTE_STRING:2,UTF8_STRING:3,ARRAY:4,MAP:5,TAG:6,SIMPLE_FLOAT:7};Ot.TAG={DATE_STRING:0,DATE_EPOCH:1,POS_BIGINT:2,NEG_BIGINT:3,DECIMAL_FRAC:4,BIGFLOAT:5,BASE64URL_EXPECTED:21,BASE64_EXPECTED:22,BASE16_EXPECTED:23,CBOR:24,URI:32,BASE64URL:33,BASE64:34,REGEXP:35,MIME:36,SET:258};Ot.NUMBYTES={ZERO:0,ONE:24,TWO:25,FOUR:26,EIGHT:27,INDEFINITE:31};Ot.SIMPLE={FALSE:20,TRUE:21,NULL:22,UNDEFINED:23};Ot.SYMS={NULL:Symbol.for("github.com/hildjj/node-cbor/null"),UNDEFINED:Symbol.for("github.com/hildjj/node-cbor/undef"),PARENT:Symbol.for("github.com/hildjj/node-cbor/parent"),BREAK:Symbol.for("github.com/hildjj/node-cbor/break"),STREAM:Symbol.for("github.com/hildjj/node-cbor/stream")};Ot.SHIFT32=4294967296;Ot.BI={MINUS_ONE:BigInt(-1),NEG_MAX:BigInt(-1)-BigInt(Number.MAX_SAFE_INTEGER),MAXINT32:BigInt("0xffffffff"),MAXINT64:BigInt("0xffffffffffffffff"),SHIFT32:BigInt(Ot.SHIFT32)}});var Ir=P(Y=>{"use strict";var{Buffer:sr}=require("buffer"),Rs=ar(),g0=require("stream"),x0=Nt(),{NUMBYTES:wi,SHIFT32:w0,BI:_0,SYMS:Dn}=x0,S0=2097151,M0=new TextDecoder("utf8",{fatal:!0,ignoreBOM:!0});Y.utf8=r=>M0.decode(r);Y.utf8.checksUTF8=!0;function A0(r){return r instanceof g0.Readable?!0:["read","on","pipe"].every(e=>typeof r[e]=="function")}Y.isBufferish=function(e){return e&&typeof e=="object"&&(sr.isBuffer(e)||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof ArrayBuffer||e instanceof DataView)};Y.bufferishToBuffer=function(e){return sr.isBuffer(e)?e:ArrayBuffer.isView(e)?sr.from(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer?sr.from(e):null};Y.parseCBORint=function(e,t){switch(e){case wi.ONE:return t.readUInt8(0);case wi.TWO:return t.readUInt16BE(0);case wi.FOUR:return t.readUInt32BE(0);case wi.EIGHT:{let i=t.readUInt32BE(0),n=t.readUInt32BE(4);return i>S0?BigInt(i)*_0.SHIFT32+BigInt(n):i*w0+n}default:throw new Error(`Invalid additional info for int: ${e}`)}};Y.writeHalf=function(e,t){let i=sr.allocUnsafe(4);i.writeFloatBE(t,0);let n=i.readUInt32BE(0);if((n&8191)!=0)return!1;let f=n>>16&32768,c=n>>23&255,o=n&8388607;if(c>=113&&c<=142)f+=(c-112<<10)+(o>>13);else if(c>=103&&c<113){if(o&(1<<126-c)-1)return!1;f+=o+8388608>>126-c}else return!1;return e.writeUInt16BE(f),!0};Y.parseHalf=function(e){let t=e[0]&128?-1:1,i=(e[0]&124)>>2,n=(e[0]&3)<<8|e[1];if(i){if(i===31)return t*(n?NaN:Infinity)}else return t*5960464477539063e-23*n;return t*ei(2,i-25)*(1024+n)};Y.parseCBORfloat=function(e){switch(e.length){case 2:return Y.parseHalf(e);case 4:return e.readFloatBE(0);case 8:return e.readDoubleBE(0);default:throw new Error(`Invalid float size: ${e.length}`)}};Y.hex=function(e){return sr.from(e.replace(/^0x/,""),"hex")};Y.bin=function(e){e=e.replace(/\s/g,"");let t=0,i=e.length%8||8,n=[];for(;i<=e.length;)n.push(parseInt(e.slice(t,i),2)),t=i,i+=8;return sr.from(n)};Y.arrayEqual=function(e,t){return e==null&&t==null?!0:e==null||t==null?!1:e.length===t.length&&e.every((i,n)=>i===t[n])};Y.bufferToBigInt=function(e){return BigInt(`0x${e.toString("hex")}`)};Y.cborValueToString=function(e,t=-1){switch(typeof e){case"symbol":{switch(e){case Dn.NULL:return"null";case Dn.UNDEFINED:return"undefined";case Dn.BREAK:return"BREAK"}if(e.description)return e.description;let n=e.toString().match(/^Symbol\((?<name>.*)\)/);return n&&n.groups.name?n.groups.name:"Symbol"}case"string":return JSON.stringify(e);case"bigint":return e.toString();case"number":{let i=Object.is(e,-0)?"-0":String(e);return t>0?`${i}_${t}`:i}case"object":{let i=Y.bufferishToBuffer(e);if(i){let n=i.toString("hex");return t===-Infinity?n:`h'${n}'`}return typeof e[Symbol.for("nodejs.util.inspect.custom")]=="function"?e[Symbol.for("nodejs.util.inspect.custom")]():Array.isArray(e)?"[]":"{}"}}return String(e)};Y.guessEncoding=function(e,t){if(typeof e=="string")return new Rs(e,t==null?"hex":t);let i=Y.bufferishToBuffer(e);if(i)return new Rs(i);if(A0(e))return e;throw new Error("Unknown input type")};var E0={"=":"","+":"-","/":"_"};Y.base64url=function(e){return Y.bufferishToBuffer(e).toString("base64").replace(/[=+/]/g,t=>E0[t])};Y.base64=function(e){return Y.bufferishToBuffer(e).toString("base64")};Y.isBigEndian=function(){let e=new Uint8Array(4),t=new Uint32Array(e.buffer);return!((t[0]=1)&e[0])}});var Fs=P((pu,Ps)=>{"use strict";var I0=require("stream"),T0=ar(),Bs=class extends I0.Transform{constructor(e){super(e);this._writableState.objectMode=!1,this._readableState.objectMode=!0,this.bs=new T0,this.__restart()}_transform(e,t,i){for(this.bs.write(e);this.bs.length>=this.__needed;){let n=null,f=this.__needed===null?void 0:this.bs.read(this.__needed);try{n=this.__parser.next(f)}catch(c){return i(c)}this.__needed&&(this.__fresh=!1),n.done?(this.push(n.value),this.__restart()):this.__needed=n.value||Infinity}return i()}*_parse(){throw new Error("Must be implemented in subclass")}__restart(){this.__needed=null,this.__parser=this._parse(),this.__fresh=!0}_flush(e){e(this.__fresh?null:new Error("unexpected end of input"))}};Ps.exports=Bs});var kn=P((vu,zs)=>{"use strict";var R0=Nt(),St=Ir(),Tr=Symbol("INTERNAL_JSON");function Vr(r,e){if(St.isBufferish(r))r.toJSON=e;else if(Array.isArray(r))for(let t of r)Vr(t,e);else if(r&&typeof r=="object"&&(!(r instanceof jt)||r.tag<21||r.tag>23))for(let t of Object.values(r))Vr(t,e)}function Os(){return St.base64(this)}function Ns(){return St.base64url(this)}function Cs(){return this.toString("hex")}function B0(r,e,t,i){let n=new DataView(r),[f,c]={2:[n.getUint16,n.setUint16],4:[n.getUint32,n.setUint32],8:[n.getBigUint64,n.setBigUint64]}[e],o=t+i;for(let h=t;h<o;h+=e)c.call(n,h,f.call(n,h,!0))}var Us={0:r=>new Date(r),1:r=>new Date(r*1e3),2:r=>St.bufferToBigInt(r),3:r=>R0.BI.MINUS_ONE-St.bufferToBigInt(r),21:(r,e)=>(St.isBufferish(r)?e[Tr]=Ns:Vr(r,Ns),e),22:(r,e)=>(St.isBufferish(r)?e[Tr]=Os:Vr(r,Os),e),23:(r,e)=>(St.isBufferish(r)?e[Tr]=Cs:Vr(r,Cs),e),32:r=>new URL(r),33:(r,e)=>{if(!r.match(/^[a-zA-Z0-9_-]+$/))throw new Error("Invalid base64url characters");let t=r.length%4;if(t===1)throw new Error("Invalid base64url length");if(t===2){if("AQgw".indexOf(r[r.length-1])===-1)throw new Error("Invalid base64 padding")}else if(t===3&&"AEIMQUYcgkosw048".indexOf(r[r.length-1])===-1)throw new Error("Invalid base64 padding");return e},34:(r,e)=>{let t=r.match(/^[a-zA-Z0-9+/]+(?<padding>={0,2})$/);if(!t)throw new Error("Invalid base64 characters");if(r.length%4!=0)throw new Error("Invalid base64 length");if(t.groups.padding==="="){if("AQgw".indexOf(r[r.length-2])===-1)throw new Error("Invalid base64 padding")}else if(t.groups.padding==="=="&&"AEIMQUYcgkosw048".indexOf(r[r.length-3])===-1)throw new Error("Invalid base64 padding");return e},35:r=>new RegExp(r),258:r=>new Set(r)},Rr={64:Uint8Array,65:Uint16Array,66:Uint32Array,68:Uint8ClampedArray,69:Uint16Array,70:Uint32Array,72:Int8Array,73:Int16Array,74:Int32Array,77:Int16Array,78:Int32Array,81:Float32Array,82:Float64Array,85:Float32Array,86:Float64Array};typeof BigUint64Array!="undefined"&&(Rr[67]=BigUint64Array,Rr[71]=BigUint64Array);typeof BigInt64Array!="undefined"&&(Rr[75]=BigInt64Array,Rr[79]=BigInt64Array);function P0(r,e){if(!St.isBufferish(r))throw new TypeError("val not a buffer");let{tag:t}=e,i=Rr[t];if(!i)throw new Error(`Invalid typed array tag: ${t}`);let n=t&4,f=(t&16)>>4,c=ei(2,f+(t&3));!n!==St.isBigEndian()&&c>1&&B0(r.buffer,c,r.byteOffset,r.byteLength);let o=r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength);return new i(o)}for(let r of Object.keys(Rr))Us[r]=P0;var qs={},jt=class{constructor(e,t,i){if(this.tag=e,this.value=t,this.err=i,typeof this.tag!="number")throw new Error(`Invalid tag type (${typeof this.tag})`);if(this.tag<0||(this.tag|0)!==this.tag)throw new Error(`Tag must be a positive integer: ${this.tag}`)}toJSON(){if(this[Tr])return this[Tr].call(this.value);let e={tag:this.tag,value:this.value};return this.err&&(e.err=this.err),e}toString(){return`${this.tag}(${JSON.stringify(this.value)})`}encodeCBOR(e){return e._pushTag(this.tag),e.pushAny(this.value)}convert(e){let t=e==null?void 0:e[this.tag];if(typeof t!="function"&&(t=jt.TAGS[this.tag],typeof t!="function"))return this;try{return t.call(this,this.value,this)}catch(i){return i&&i.message&&i.message.length>0?this.err=i.message:this.err=i,this}}static get TAGS(){return qs}static set TAGS(e){qs=e}static reset(){jt.TAGS=K({},Us)}};jt.INTERNAL_JSON=Tr;jt.reset();zs.exports=jt});var $n=P((mu,Hs)=>{"use strict";var{MT:F0,SIMPLE:_i,SYMS:Ln}=Nt(),Xr=class{constructor(e){if(typeof e!="number")throw new Error(`Invalid Simple type: ${typeof e}`);if(e<0||e>255||(e|0)!==e)throw new Error(`value must be a small positive integer: ${e}`);this.value=e}toString(){return`simple(${this.value})`}[Symbol.for("nodejs.util.inspect.custom")](e,t){return`simple(${this.value})`}encodeCBOR(e){return e._pushInt(this.value,F0.SIMPLE_FLOAT)}static isSimple(e){return e instanceof Xr}static decode(e,t=!0,i=!1){switch(e){case _i.FALSE:return!1;case _i.TRUE:return!0;case _i.NULL:return t?null:Ln.NULL;case _i.UNDEFINED:return t?void 0:Ln.UNDEFINED;case-1:if(!t||!i)throw new Error("Invalid BREAK");return Ln.BREAK;default:return new Xr(e)}}};Hs.exports=Xr});var jr=P((gu,$s)=>{"use strict";var O0=Fs(),N0=kn(),C0=$n(),or=Ir(),Si=ar(),yu=require("stream"),U0=Nt(),{MT:Oe,NUMBYTES:Br,SYMS:Ct,BI:Ds}=U0,{Buffer:ks}=require("buffer"),Pr=Symbol("count"),Yt=Symbol("major type"),Ls=Symbol("error"),Gr=Symbol("not found");function Wn(r,e,t){let i=[];return i[Pr]=t,i[Ct.PARENT]=r,i[Yt]=e,i}function q0(r,e){let t=new Si;return t[Pr]=-1,t[Ct.PARENT]=r,t[Yt]=e,t}var Mi=class extends Error{constructor(e,t){super(`Unexpected data: 0x${e.toString(16)}`);this.name="UnexpectedDataError",this.byte=e,this.value=t}};function Ai(r,e){switch(typeof r){case"function":return{options:{},cb:r};case"string":return{options:{encoding:r},cb:e};case"object":return{options:r||{},cb:e};default:throw new TypeError("Unknown option type")}}var tt=class extends O0{constructor(e={}){let y=e,{tags:t={},max_depth:i=-1,preferWeb:n=!1,required:f=!1,encoding:c="hex",extendedResults:o=!1,preventDuplicateKeys:h=!1}=y,b=Ye(y,["tags","max_depth","preferWeb","required","encoding","extendedResults","preventDuplicateKeys"]);super(K({defaultEncoding:c},b));this.running=!0,this.max_depth=i,this.tags=t,this.preferWeb=n,this.extendedResults=o,this.required=f,this.preventDuplicateKeys=h,o&&(this.bs.on("read",this._onRead.bind(this)),this.valueBytes=new Si)}static nullcheck(e){switch(e){case Ct.NULL:return null;case Ct.UNDEFINED:return;case Gr:throw new Error("Value not found");default:return e}}static decodeFirstSync(e,t={}){if(e==null)throw new TypeError("input required");({options:t}=Ai(t));let y=t,{encoding:i="hex"}=y,n=Ye(y,["encoding"]),f=new tt(n),c=or.guessEncoding(e,i),o=f._parse(),h=o.next();for(;!h.done;){let x=c.read(h.value);if(x==null||x.length!==h.value)throw new Error("Insufficient data");f.extendedResults&&f.valueBytes.write(x),h=o.next(x)}let b=null;if(f.extendedResults)b=h.value,b.unused=c.read();else if(b=tt.nullcheck(h.value),c.length>0){let x=c.read(1);throw c.unshift(x),new Mi(x[0],b)}return b}static decodeAllSync(e,t={}){if(e==null)throw new TypeError("input required");({options:t}=Ai(t));let h=t,{encoding:i="hex"}=h,n=Ye(h,["encoding"]),f=new tt(n),c=or.guessEncoding(e,i),o=[];for(;c.length>0;){let b=f._parse(),y=b.next();for(;!y.done;){let x=c.read(y.value);if(x==null||x.length!==y.value)throw new Error("Insufficient data");f.extendedResults&&f.valueBytes.write(x),y=b.next(x)}o.push(tt.nullcheck(y.value))}return o}static decodeFirst(e,t={},i=null){if(e==null)throw new TypeError("input required");({options:t,cb:i}=Ai(t,i));let x=t,{encoding:n="hex",required:f=!1}=x,c=Ye(x,["encoding","required"]),o=new tt(c),h=Gr,b=or.guessEncoding(e,n),y=new Promise((M,S)=>{o.on("data",A=>{h=tt.nullcheck(A),o.close()}),o.once("error",A=>o.extendedResults&&A instanceof Mi?(h.unused=o.bs.slice(),M(h)):(h!==Gr&&(A.value=h),h=Ls,o.close(),S(A))),o.once("end",()=>{switch(h){case Gr:return f?S(new Error("No CBOR found")):M(h);case Ls:return;default:return M(h)}})});return typeof i=="function"&&y.then(M=>i(null,M),i),b.pipe(o),y}static decodeAll(e,t={},i=null){if(e==null)throw new TypeError("input required");({options:t,cb:i}=Ai(t,i));let b=t,{encoding:n="hex"}=b,f=Ye(b,["encoding"]),c=new tt(f),o=[];c.on("data",y=>o.push(tt.nullcheck(y)));let h=new Promise((y,x)=>{c.on("error",x),c.on("end",()=>y(o))});return typeof i=="function"&&h.then(y=>i(void 0,y),y=>i(y,void 0)),or.guessEncoding(e,n).pipe(c),h}close(){this.running=!1,this.__fresh=!0}_onRead(e){this.valueBytes.write(e)}*_parse(){let e=null,t=0,i=null;for(;;){if(this.max_depth>=0&&t>this.max_depth)throw new Error(`Maximum depth ${this.max_depth} exceeded`);let[n]=yield 1;if(!this.running)throw this.bs.unshift(ks.from([n])),new Mi(n);let f=n>>5,c=n&31,o=e==null?void 0:e[Yt],h=e==null?void 0:e.length;switch(c){case Br.ONE:this.emit("more-bytes",f,1,o,h),[i]=yield 1;break;case Br.TWO:case Br.FOUR:case Br.EIGHT:{let y=1<<c-24;this.emit("more-bytes",f,y,o,h);let x=yield y;i=f===Oe.SIMPLE_FLOAT?x:or.parseCBORint(c,x);break}case 28:case 29:case 30:throw this.running=!1,new Error(`Additional info not implemented: ${c}`);case Br.INDEFINITE:switch(f){case Oe.POS_INT:case Oe.NEG_INT:case Oe.TAG:throw new Error(`Invalid indefinite encoding for MT ${f}`)}i=-1;break;default:i=c}switch(f){case Oe.POS_INT:break;case Oe.NEG_INT:i===Number.MAX_SAFE_INTEGER?i=Ds.NEG_MAX:i=typeof i=="bigint"?Ds.MINUS_ONE-i:-1-i;break;case Oe.BYTE_STRING:case Oe.UTF8_STRING:switch(i){case 0:this.emit("start-string",f,i,o,h),f===Oe.UTF8_STRING?i="":i=this.preferWeb?new Uint8Array(0):ks.allocUnsafe(0);break;case-1:this.emit("start",f,Ct.STREAM,o,h),e=q0(e,f),t++;continue;default:this.emit("start-string",f,i,o,h),i=yield i,f===Oe.UTF8_STRING?i=or.utf8(i):this.preferWeb&&(i=new Uint8Array(i.buffer,i.byteOffset,i.length))}break;case Oe.ARRAY:case Oe.MAP:switch(i){case 0:i=f===Oe.MAP?{}:[];break;case-1:this.emit("start",f,Ct.STREAM,o,h),e=Wn(e,f,-1),t++;continue;default:this.emit("start",f,i,o,h),e=Wn(e,f,i*(f-3)),t++;continue}break;case Oe.TAG:this.emit("start",f,i,o,h),e=Wn(e,f,1),e.push(i),t++;continue;case Oe.SIMPLE_FLOAT:if(typeof i=="number"){if(c===Br.ONE&&i<32)throw new Error(`Invalid two-byte encoding of simple value ${i}`);let y=e!=null;i=C0.decode(i,y,y&&e[Pr]<0)}else i=or.parseCBORfloat(i)}this.emit("value",i,o,h,c);let b=!1;for(;e!=null;){if(i===Ct.BREAK)e[Pr]=1;else if(Array.isArray(e))e.push(i);else{let x=e[Yt];if(x!=null&&x!==f)throw this.running=!1,new Error("Invalid major type in indefinite encoding");e.write(i)}if(--e[Pr]!=0){b=!0;break}if(--t,delete e[Pr],Array.isArray(e))switch(e[Yt]){case Oe.ARRAY:i=e;break;case Oe.MAP:{let x=!0;if(e.length%2!=0)throw new Error(`Invalid map length: ${e.length}`);for(let M=0,S=e.length;M<S;M+=2)if(typeof e[M]!="string"||e[M]==="__proto__"){x=!1;break}if(x){i={};for(let M=0,S=e.length;M<S;M+=2){if(this.preventDuplicateKeys&&Object.prototype.hasOwnProperty.call(i,e[M]))throw new Error("Duplicate keys in a map");i[e[M]]=e[M+1]}}else{i=new Map;for(let M=0,S=e.length;M<S;M+=2){if(this.preventDuplicateKeys&&i.has(e[M]))throw new Error("Duplicate keys in a map");i.set(e[M],e[M+1])}}break}case Oe.TAG:{i=new N0(e[0],e[1]).convert(this.tags);break}}else if(e instanceof Si)switch(e[Yt]){case Oe.BYTE_STRING:i=e.slice(),this.preferWeb&&(i=new Uint8Array(i.buffer,i.byteOffset,i.length));break;case Oe.UTF8_STRING:i=e.toString("utf-8");break}this.emit("stop",e[Yt]);let y=e;e=e[Ct.PARENT],delete y[Ct.PARENT],delete y[Yt]}if(!b){if(this.extendedResults){let y=this.valueBytes.slice(),x={value:tt.nullcheck(i),bytes:y,length:y.length};return this.valueBytes=new Si,x}return i}}}};tt.NOT_FOUND=Gr;$s.exports=tt});var Gs=P((xu,Xs)=>{"use strict";var z0=require("stream"),Ws=Ir(),H0=jr(),Vs=ar(),{MT:De,NUMBYTES:Ei,SYMS:Vn}=Nt(),{Buffer:D0}=require("buffer");function Xn(r){return r>1?"s":""}function k0(r,e){switch(typeof r){case"function":return{options:{},cb:r};case"string":return{options:{encoding:r},cb:e};case"number":return{options:{max_depth:r},cb:e};case"object":return{options:r||{},cb:e};default:throw new TypeError("Unknown option type")}}var Yr=class extends z0.Transform{constructor(e={}){let b=e,{depth:t=1,max_depth:i=10,no_summary:n=!1,tags:f={},preferWeb:c,encoding:o}=b,h=Ye(b,["depth","max_depth","no_summary","tags","preferWeb","encoding"]);super(st(K({},h),{readableObjectMode:!1,writableObjectMode:!1}));this.depth=t,this.max_depth=i,this.all=new Vs,f[24]||(f[24]=this._tag_24.bind(this)),this.parser=new H0({tags:f,max_depth:i,preferWeb:c,encoding:o}),this.parser.on("value",this._on_value.bind(this)),this.parser.on("start",this._on_start.bind(this)),this.parser.on("start-string",this._on_start_string.bind(this)),this.parser.on("stop",this._on_stop.bind(this)),this.parser.on("more-bytes",this._on_more.bind(this)),this.parser.on("error",this._on_error.bind(this)),n||this.parser.on("data",this._on_data.bind(this)),this.parser.bs.on("read",this._on_read.bind(this))}_tag_24(e){let t=new Yr({depth:this.depth+1,no_summary:!0});t.on("data",i=>this.push(i)),t.on("error",i=>this.emit("error",i)),t.end(e)}_transform(e,t,i){this.parser.write(e,t,i)}_flush(e){return this.parser._flush(e)}static comment(e,t={},i=null){if(e==null)throw new Error("input required");({options:t,cb:i}=k0(t,i));let n=new Vs,b=t,{encoding:f="hex"}=b,c=Ye(b,["encoding"]),o=new Yr(c),h=null;return typeof i=="function"?(o.on("end",()=>{i(null,n.toString("utf8"))}),o.on("error",i)):h=new Promise((y,x)=>{o.on("end",()=>{y(n.toString("utf8"))}),o.on("error",x)}),o.pipe(n),Ws.guessEncoding(e,f).pipe(o),h}_on_error(e){this.push("ERROR: "),this.push(e.toString()),this.push(`
`)}_on_read(e){this.all.write(e);let t=e.toString("hex");this.push(new Array(this.depth+1).join("  ")),this.push(t);let i=(this.max_depth-this.depth)*2-t.length;i<1&&(i=1),this.push(new Array(i+1).join(" ")),this.push("-- ")}_on_more(e,t,i,n){let f="";switch(this.depth++,e){case De.POS_INT:f="Positive number,";break;case De.NEG_INT:f="Negative number,";break;case De.ARRAY:f="Array, length";break;case De.MAP:f="Map, count";break;case De.BYTE_STRING:f="Bytes, length";break;case De.UTF8_STRING:f="String, length";break;case De.SIMPLE_FLOAT:t===1?f="Simple value,":f="Float,";break}this.push(`${f} next ${t} byte${Xn(t)}
`)}_on_start_string(e,t,i,n){let f="";switch(this.depth++,e){case De.BYTE_STRING:f=`Bytes, length: ${t}`;break;case De.UTF8_STRING:f=`String, length: ${t.toString()}`;break}this.push(`${f}
`)}_on_start(e,t,i,n){switch(this.depth++,i){case De.ARRAY:this.push(`[${n}], `);break;case De.MAP:n%2?this.push(`{Val:${Math.floor(n/2)}}, `):this.push(`{Key:${Math.floor(n/2)}}, `);break}switch(e){case De.TAG:this.push(`Tag #${t}`),t===24&&this.push(" Encoded CBOR data item");break;case De.ARRAY:t===Vn.STREAM?this.push("Array (streaming)"):this.push(`Array, ${t} item${Xn(t)}`);break;case De.MAP:t===Vn.STREAM?this.push("Map (streaming)"):this.push(`Map, ${t} pair${Xn(t)}`);break;case De.BYTE_STRING:this.push("Bytes (streaming)");break;case De.UTF8_STRING:this.push("String (streaming)");break}this.push(`
`)}_on_stop(e){this.depth--}_on_value(e,t,i,n){if(e!==Vn.BREAK)switch(t){case De.ARRAY:this.push(`[${i}], `);break;case De.MAP:i%2?this.push(`{Val:${Math.floor(i/2)}}, `):this.push(`{Key:${Math.floor(i/2)}}, `);break}let f=Ws.cborValueToString(e,-Infinity);switch(typeof e=="string"||D0.isBuffer(e)?(e.length>0&&(this.push(f),this.push(`
`)),this.depth--):(this.push(f),this.push(`
`)),n){case Ei.ONE:case Ei.TWO:case Ei.FOUR:case Ei.EIGHT:this.depth--}}_on_data(){this.push("0x"),this.push(this.all.read().toString("hex")),this.push(`
`)}};Xs.exports=Yr});var Js=P((wu,Ks)=>{"use strict";var L0=require("stream"),$0=jr(),js=Ir(),W0=ar(),{MT:je,SYMS:Ys}=Nt();function V0(r,e){switch(typeof r){case"function":return{options:{},cb:r};case"string":return{options:{encoding:r},cb:e};case"object":return{options:r||{},cb:e};default:throw new TypeError("Unknown option type")}}var Ii=class extends L0.Transform{constructor(e={}){let b=e,{separator:t=`
`,stream_errors:i=!1,tags:n,max_depth:f,preferWeb:c,encoding:o}=b,h=Ye(b,["separator","stream_errors","tags","max_depth","preferWeb","encoding"]);super(st(K({},h),{readableObjectMode:!1,writableObjectMode:!1}));this.float_bytes=-1,this.separator=t,this.stream_errors=i,this.parser=new $0({tags:n,max_depth:f,preferWeb:c,encoding:o}),this.parser.on("more-bytes",this._on_more.bind(this)),this.parser.on("value",this._on_value.bind(this)),this.parser.on("start",this._on_start.bind(this)),this.parser.on("stop",this._on_stop.bind(this)),this.parser.on("data",this._on_data.bind(this)),this.parser.on("error",this._on_error.bind(this))}_transform(e,t,i){return this.parser.write(e,t,i)}_flush(e){return this.parser._flush(t=>this.stream_errors?(t&&this._on_error(t),e()):e(t))}static diagnose(e,t={},i=null){if(e==null)throw new TypeError("input required");({options:t,cb:i}=V0(t,i));let b=t,{encoding:n="hex"}=b,f=Ye(b,["encoding"]),c=new W0,o=new Ii(f),h=null;return typeof i=="function"?(o.on("end",()=>i(null,c.toString("utf8"))),o.on("error",i)):h=new Promise((y,x)=>{o.on("end",()=>y(c.toString("utf8"))),o.on("error",x)}),o.pipe(c),js.guessEncoding(e,n).pipe(o),h}_on_error(e){this.stream_errors?this.push(e.toString()):this.emit("error",e)}_on_more(e,t,i,n){e===je.SIMPLE_FLOAT&&(this.float_bytes={2:1,4:2,8:3}[t])}_fore(e,t){switch(e){case je.BYTE_STRING:case je.UTF8_STRING:case je.ARRAY:t>0&&this.push(", ");break;case je.MAP:t>0&&(t%2?this.push(": "):this.push(", "))}}_on_value(e,t,i){if(e===Ys.BREAK)return;this._fore(t,i);let n=this.float_bytes;this.float_bytes=-1,this.push(js.cborValueToString(e,n))}_on_start(e,t,i,n){switch(this._fore(i,n),e){case je.TAG:this.push(`${t}(`);break;case je.ARRAY:this.push("[");break;case je.MAP:this.push("{");break;case je.BYTE_STRING:case je.UTF8_STRING:this.push("(");break}t===Ys.STREAM&&this.push("_ ")}_on_stop(e){switch(e){case je.TAG:this.push(")");break;case je.ARRAY:this.push("]");break;case je.MAP:this.push("}");break;case je.BYTE_STRING:case je.UTF8_STRING:this.push(")");break}}_on_data(){this.push(this.separator)}};Ks.exports=Ii});var jn=P((_u,to)=>{"use strict";var X0=require("stream"),Gn=ar(),Ti=Ir(),G0=Nt(),{MT:G,NUMBYTES:rt,SHIFT32:Zs,SIMPLE:Ri,SYMS:Qs,TAG:Ut,BI:Bi}=G0,{Buffer:$e}=require("buffer"),j0=G.SIMPLE_FLOAT<<5|rt.TWO,Y0=G.SIMPLE_FLOAT<<5|rt.FOUR,K0=G.SIMPLE_FLOAT<<5|rt.EIGHT,J0=G.SIMPLE_FLOAT<<5|Ri.TRUE,Z0=G.SIMPLE_FLOAT<<5|Ri.FALSE,Q0=G.SIMPLE_FLOAT<<5|Ri.UNDEFINED,eh=G.SIMPLE_FLOAT<<5|Ri.NULL,Kr=$e.from([255]),th=$e.from("f97e00","hex"),rh=$e.from("f9fc00","hex"),ih=$e.from("f97c00","hex"),nh=$e.from("f98000","hex"),Pi={},eo={};function fh(r){if(!r)return"number";switch(r.toLowerCase()){case"number":return"number";case"float":return"float";case"int":case"integer":return"int";case"string":return"string"}throw new TypeError(`dateType invalid, got "${r}"`)}var N=class extends X0.Transform{constructor(e={}){let x=e,{canonical:t=!1,encodeUndefined:i,disallowUndefinedKeys:n=!1,dateType:f="number",collapseBigIntegers:c=!1,detectLoops:o=!1,omitUndefinedProperties:h=!1,genTypes:b=[]}=x,y=Ye(x,["canonical","encodeUndefined","disallowUndefinedKeys","dateType","collapseBigIntegers","detectLoops","omitUndefinedProperties","genTypes"]);super(st(K({},y),{readableObjectMode:!1,writableObjectMode:!0}));if(this.canonical=t,this.encodeUndefined=i,this.disallowUndefinedKeys=n,this.dateType=fh(f),this.collapseBigIntegers=this.canonical?!0:c,this.detectLoops=void 0,typeof o=="boolean")o&&(this.detectLoops=new WeakSet);else if(o instanceof WeakSet)this.detectLoops=o;else throw new TypeError("detectLoops must be boolean or WeakSet");if(this.omitUndefinedProperties=h,this.semanticTypes=K({},N.SEMANTIC_TYPES),Array.isArray(b))for(let M=0,S=b.length;M<S;M+=2)this.addSemanticType(b[M],b[M+1]);else for(let[M,S]of Object.entries(b))this.addSemanticType(M,S)}_transform(e,t,i){let n=this.pushAny(e);return i(n===!1?new Error("Push Error"):void 0)}_flush(e){return e()}_pushUInt8(e){let t=$e.allocUnsafe(1);return t.writeUInt8(e,0),this.push(t)}_pushUInt16BE(e){let t=$e.allocUnsafe(2);return t.writeUInt16BE(e,0),this.push(t)}_pushUInt32BE(e){let t=$e.allocUnsafe(4);return t.writeUInt32BE(e,0),this.push(t)}_pushFloatBE(e){let t=$e.allocUnsafe(4);return t.writeFloatBE(e,0),this.push(t)}_pushDoubleBE(e){let t=$e.allocUnsafe(8);return t.writeDoubleBE(e,0),this.push(t)}_pushNaN(){return this.push(th)}_pushInfinity(e){let t=e<0?rh:ih;return this.push(t)}_pushFloat(e){if(this.canonical){let t=$e.allocUnsafe(2);if(Ti.writeHalf(t,e))return this._pushUInt8(j0)&&this.push(t)}return Math.fround(e)===e?this._pushUInt8(Y0)&&this._pushFloatBE(e):this._pushUInt8(K0)&&this._pushDoubleBE(e)}_pushInt(e,t,i){let n=t<<5;if(e<24)return this._pushUInt8(n|e);if(e<=255)return this._pushUInt8(n|rt.ONE)&&this._pushUInt8(e);if(e<=65535)return this._pushUInt8(n|rt.TWO)&&this._pushUInt16BE(e);if(e<=4294967295)return this._pushUInt8(n|rt.FOUR)&&this._pushUInt32BE(e);let f=Number.MAX_SAFE_INTEGER;return t===G.NEG_INT&&f--,e<=f?this._pushUInt8(n|rt.EIGHT)&&this._pushUInt32BE(Math.floor(e/Zs))&&this._pushUInt32BE(e%Zs):t===G.NEG_INT?this._pushFloat(i):this._pushFloat(e)}_pushIntNum(e){return Object.is(e,-0)?this.push(nh):e<0?this._pushInt(-e-1,G.NEG_INT,e):this._pushInt(e,G.POS_INT)}_pushNumber(e){return isNaN(e)?this._pushNaN():isFinite(e)?Math.round(e)===e?this._pushIntNum(e):this._pushFloat(e):this._pushInfinity(e)}_pushString(e){let t=$e.byteLength(e,"utf8");return this._pushInt(t,G.UTF8_STRING)&&this.push(e,"utf8")}_pushBoolean(e){return this._pushUInt8(e?J0:Z0)}_pushUndefined(e){switch(typeof this.encodeUndefined){case"undefined":return this._pushUInt8(Q0);case"function":return this.pushAny(this.encodeUndefined(e));case"object":{let t=Ti.bufferishToBuffer(this.encodeUndefined);if(t)return this.push(t)}}return this.pushAny(this.encodeUndefined)}_pushNull(e){return this._pushUInt8(eh)}_pushTag(e){return this._pushInt(e,G.TAG)}_pushJSBigint(e){let t=G.POS_INT,i=Ut.POS_BIGINT;if(e<0&&(e=-e+Bi.MINUS_ONE,t=G.NEG_INT,i=Ut.NEG_BIGINT),this.collapseBigIntegers&&e<=Bi.MAXINT64)return e<=4294967295?this._pushInt(Number(e),t):this._pushUInt8(t<<5|rt.EIGHT)&&this._pushUInt32BE(Number(e/Bi.SHIFT32))&&this._pushUInt32BE(Number(e%Bi.SHIFT32));let n=e.toString(16);n.length%2&&(n=`0${n}`);let f=$e.from(n,"hex");return this._pushTag(i)&&N._pushBuffer(this,f)}_pushObject(e,t){if(!e)return this._pushNull(e);if(t=K({indefinite:!1,skipTypes:!1},t),!t.indefinite&&this.detectLoops){if(this.detectLoops.has(e))throw new Error(`Loop detected while CBOR encoding.
Call removeLoopDetectors before resuming.`);this.detectLoops.add(e)}if(!t.skipTypes){let c=e.encodeCBOR;if(typeof c=="function")return c.call(e,this);let o=this.semanticTypes[e.constructor.name];if(o)return o.call(e,this,e)}let i=Object.keys(e).filter(c=>{let o=typeof e[c];return o!=="function"&&(!this.omitUndefinedProperties||o!=="undefined")}),n={};if(this.canonical&&i.sort((c,o)=>{let h=n[c]||(n[c]=N.encode(c)),b=n[o]||(n[o]=N.encode(o));return h.compare(b)}),t.indefinite){if(!this._pushUInt8(G.MAP<<5|rt.INDEFINITE))return!1}else if(!this._pushInt(i.length,G.MAP))return!1;let f=null;for(let c=0,o=i.length;c<o;c++){let h=i[c];if(this.canonical&&(f=n[h])){if(!this.push(f))return!1}else if(!this._pushString(h))return!1;if(!this.pushAny(e[h]))return!1}if(t.indefinite){if(!this.push(Kr))return!1}else this.detectLoops&&this.detectLoops.delete(e);return!0}_encodeAll(e){let t=new Gn({highWaterMark:this.readableHighWaterMark});this.pipe(t);for(let i of e)this.pushAny(i);return this.end(),t.read()}addSemanticType(e,t){let i=typeof e=="string"?e:e.name,n=this.semanticTypes[i];if(t){if(typeof t!="function")throw new TypeError("fun must be of type function");this.semanticTypes[i]=t}else n&&delete this.semanticTypes[i];return n}pushAny(e){switch(typeof e){case"number":return this._pushNumber(e);case"bigint":return this._pushJSBigint(e);case"string":return this._pushString(e);case"boolean":return this._pushBoolean(e);case"undefined":return this._pushUndefined(e);case"object":return this._pushObject(e);case"symbol":switch(e){case Qs.NULL:return this._pushNull(null);case Qs.UNDEFINED:return this._pushUndefined(void 0);default:throw new TypeError(`Unknown symbol: ${e.toString()}`)}default:throw new TypeError(`Unknown type: ${typeof e}, ${typeof e.toString=="function"?e.toString():""}`)}}static pushArray(e,t,i){i=K({indefinite:!1},i);let n=t.length;if(i.indefinite){if(!e._pushUInt8(G.ARRAY<<5|rt.INDEFINITE))return!1}else if(!e._pushInt(n,G.ARRAY))return!1;for(let f=0;f<n;f++)if(!e.pushAny(t[f]))return!1;return!(i.indefinite&&!e.push(Kr))}removeLoopDetectors(){return this.detectLoops?(this.detectLoops=new WeakSet,!0):!1}static _pushDate(e,t){switch(e.dateType){case"string":return e._pushTag(Ut.DATE_STRING)&&e._pushString(t.toISOString());case"int":return e._pushTag(Ut.DATE_EPOCH)&&e._pushIntNum(Math.round(t.getTime()/1e3));case"float":return e._pushTag(Ut.DATE_EPOCH)&&e._pushFloat(t.getTime()/1e3);case"number":default:return e._pushTag(Ut.DATE_EPOCH)&&e.pushAny(t.getTime()/1e3)}}static _pushBuffer(e,t){return e._pushInt(t.length,G.BYTE_STRING)&&e.push(t)}static _pushNoFilter(e,t){return N._pushBuffer(e,t.slice())}static _pushRegexp(e,t){return e._pushTag(Ut.REGEXP)&&e.pushAny(t.source)}static _pushSet(e,t){if(!e._pushTag(Ut.SET)||!e._pushInt(t.size,G.ARRAY))return!1;for(let i of t)if(!e.pushAny(i))return!1;return!0}static _pushURL(e,t){return e._pushTag(Ut.URI)&&e.pushAny(t.toString())}static _pushBoxed(e,t){return e.pushAny(t.valueOf())}static _pushMap(e,t,i){i=K({indefinite:!1},i);let n=[...t.entries()];if(e.omitUndefinedProperties&&(n=n.filter(([f,c])=>c!==void 0)),i.indefinite){if(!e._pushUInt8(G.MAP<<5|rt.INDEFINITE))return!1}else if(!e._pushInt(n.length,G.MAP))return!1;if(e.canonical){let f=new N({genTypes:e.semanticTypes,canonical:e.canonical,detectLoops:Boolean(e.detectLoops),dateType:e.dateType,disallowUndefinedKeys:e.disallowUndefinedKeys,collapseBigIntegers:e.collapseBigIntegers}),c=new Gn({highWaterMark:e.readableHighWaterMark});f.pipe(c),n.sort(([o],[h])=>{f.pushAny(o);let b=c.read();f.pushAny(h);let y=c.read();return b.compare(y)});for(let[o,h]of n){if(e.disallowUndefinedKeys&&typeof o=="undefined")throw new Error("Invalid Map key: undefined");if(!(e.pushAny(o)&&e.pushAny(h)))return!1}}else for(let[f,c]of n){if(e.disallowUndefinedKeys&&typeof f=="undefined")throw new Error("Invalid Map key: undefined");if(!(e.pushAny(f)&&e.pushAny(c)))return!1}return!(i.indefinite&&!e.push(Kr))}static _pushTypedArray(e,t){let i=64,n=t.BYTES_PER_ELEMENT,{name:f}=t.constructor;return f.startsWith("Float")?(i|=16,n/=2):f.includes("U")||(i|=8),(f.includes("Clamped")||n!==1&&!Ti.isBigEndian())&&(i|=4),i|={1:0,2:1,4:2,8:3}[n],e._pushTag(i)?N._pushBuffer(e,$e.from(t.buffer,t.byteOffset,t.byteLength)):!1}static _pushArrayBuffer(e,t){return N._pushBuffer(e,$e.from(t))}static encodeIndefinite(e,t,i={}){if(t==null){if(this==null)throw new Error("No object to encode");t=this}let{chunkSize:n=4096}=i,f=!0,c=typeof t,o=null;if(c==="string"){f=f&&e._pushUInt8(G.UTF8_STRING<<5|rt.INDEFINITE);let h=0;for(;h<t.length;){let b=h+n;f=f&&e._pushString(t.slice(h,b)),h=b}f=f&&e.push(Kr)}else if(o=Ti.bufferishToBuffer(t)){f=f&&e._pushUInt8(G.BYTE_STRING<<5|rt.INDEFINITE);let h=0;for(;h<o.length;){let b=h+n;f=f&&N._pushBuffer(e,o.slice(h,b)),h=b}f=f&&e.push(Kr)}else if(Array.isArray(t))f=f&&N.pushArray(e,t,{indefinite:!0});else if(t instanceof Map)f=f&&N._pushMap(e,t,{indefinite:!0});else{if(c!=="object")throw new Error("Invalid indefinite encoding");f=f&&e._pushObject(t,{indefinite:!0,skipTypes:!0})}return f}static encode(...e){return new N()._encodeAll(e)}static encodeCanonical(...e){return new N({canonical:!0})._encodeAll(e)}static encodeOne(e,t){return new N(t)._encodeAll([e])}static encodeAsync(e,t){return new Promise((i,n)=>{let f=[],c=new N(t);c.on("data",o=>f.push(o)),c.on("error",n),c.on("finish",()=>i($e.concat(f))),c.pushAny(e),c.end()})}static get SEMANTIC_TYPES(){return eo}static set SEMANTIC_TYPES(e){eo=e}static reset(){N.SEMANTIC_TYPES=K({},Pi)}};Object.assign(Pi,{Array:N.pushArray,Date:N._pushDate,Buffer:N._pushBuffer,[$e.name]:N._pushBuffer,Map:N._pushMap,NoFilter:N._pushNoFilter,[Gn.name]:N._pushNoFilter,RegExp:N._pushRegexp,Set:N._pushSet,ArrayBuffer:N._pushArrayBuffer,Uint8ClampedArray:N._pushTypedArray,Uint8Array:N._pushTypedArray,Uint16Array:N._pushTypedArray,Uint32Array:N._pushTypedArray,Int8Array:N._pushTypedArray,Int16Array:N._pushTypedArray,Int32Array:N._pushTypedArray,Float32Array:N._pushTypedArray,Float64Array:N._pushTypedArray,URL:N._pushURL,Boolean:N._pushBoxed,Number:N._pushBoxed,String:N._pushBoxed});typeof BigUint64Array!="undefined"&&(Pi[BigUint64Array.name]=N._pushTypedArray);typeof BigInt64Array!="undefined"&&(Pi[BigInt64Array.name]=N._pushTypedArray);N.reset();to.exports=N});var no=P((Su,io)=>{"use strict";var{Buffer:ro}=require("buffer"),ah=jn(),sh=jr(),{MT:oh}=Nt(),Mt=class extends Map{constructor(e){super(e)}static _encode(e){return ah.encodeCanonical(e).toString("base64")}static _decode(e){return sh.decodeFirstSync(e,"base64")}get(e){return super.get(Mt._encode(e))}set(e,t){return super.set(Mt._encode(e),t)}delete(e){return super.delete(Mt._encode(e))}has(e){return super.has(Mt._encode(e))}*keys(){for(let e of super.keys())yield Mt._decode(e)}*entries(){for(let e of super.entries())yield[Mt._decode(e[0]),e[1]]}[Symbol.iterator](){return this.entries()}forEach(e,t){if(typeof e!="function")throw new TypeError("Must be function");for(let i of super.entries())e.call(this,i[1],Mt._decode(i[0]),this)}encodeCBOR(e){if(!e._pushInt(this.size,oh.MAP))return!1;if(e.canonical){let t=Array.from(super.entries()).map(i=>[ro.from(i[0],"base64"),i[1]]);t.sort((i,n)=>i[0].compare(n[0]));for(let i of t)if(!(e.push(i[0])&&e.pushAny(i[1])))return!1}else for(let t of super.entries())if(!(e.push(ro.from(t[0],"base64"))&&e.pushAny(t[1])))return!1;return!0}};io.exports=Mt});var fo=P(q=>{"use strict";q.Commented=Gs();q.Diagnose=Js();q.Decoder=jr();q.Encoder=jn();q.Simple=$n();q.Tagged=kn();q.Map=no();q.comment=q.Commented.comment;q.decodeAll=q.Decoder.decodeAll;q.decodeFirst=q.Decoder.decodeFirst;q.decodeAllSync=q.Decoder.decodeAllSync;q.decodeFirstSync=q.Decoder.decodeFirstSync;q.diagnose=q.Diagnose.diagnose;q.encode=q.Encoder.encode;q.encodeCanonical=q.Encoder.encodeCanonical;q.encodeOne=q.Encoder.encodeOne;q.encodeAsync=q.Encoder.encodeAsync;q.decode=q.Decoder.decodeFirstSync;q.leveldb={decode:q.Decoder.decodeFirstSync,encode:q.Encoder.encode,buffer:!0,name:"cbor"};q.reset=function(){q.Encoder.reset(),q.Tagged.reset()}});yf(exports);Fo(exports,{DID_DOCUMENTS:()=>Kn,TRUSTED_ISSUERS:()=>Jn,verifyPassURI:()=>xo,verifyPassURIOffline:()=>go});var Kt=lt(Mf()),wh=Kt.default.base16,Af=Kt.default.base32,_h=Kt.default.base32hex,Sh=Kt.default.base64,Mh=Kt.default.base64url,Ah=Kt.default.codec;var Yf=lt(Of()),Kf=lt(jf()),md=(0,Kf.getResolver)(),yd=new Yf.Resolver(K({},md));function gd(r){return ti(this,null,function*(){return yield yd.resolve(r)})}var Jf={resolve:gd};function hn(){return Date.now()/1e3}function Zf(r){let e=r;for(;e.length%8!=0;)e+="=";return e}var co=lt(Qf()),ho=lt(Is());var ao=lt(require("buffer")),so=lt(require("process")),Yn=lt(require("util")),Fi=lt(fo());global.process=so.default;global.TextDecoder=Yn.default.TextDecoder;global.TextEncoder=Yn.default.TextEncoder;var oo=r=>Fi.default.encodeOne(r,{genTypes:[ao.Buffer,Fi.default.Encoder._pushBuffer]}),Oi=r=>Fi.default.decode(r);var Fr=lt(require("buffer")),dh=ho.default.ec,ch=new dh("p256");function uo(r,e){let[t,,i,n]=r.value;if(!e.x||!e.y)return!1;let f=Fr.Buffer.from(e.x,"base64"),c=Fr.Buffer.from(e.y,"base64"),o=`04${f.toString("hex")}${c.toString("hex")}`,h=ch.keyFromPublic(o,"hex"),b=Fr.Buffer.from(t),y=Fr.Buffer.alloc(0),x=Fr.Buffer.from(i),S=oo(["Signature1",b,y,x]),A=co.sha256.digest(S),E={r:n.slice(0,n.length/2),s:n.slice(n.length/2)};return h.verify(A,E)}var U=class extends Error{constructor(e,t=null){super(e.message);this.violates=e,this.cwtClaims=t}};function lo(r){if(r.length!==16)throw new U({message:`CTI must be 16 octets, but was ${r.length} octets.`,section:"RFC4122.4.1",link:"https://datatracker.ietf.org/doc/html/rfc4122#section-4.1",description:"The COVID Pass is malformed or has been modified."});let e=r.toString("hex"),t=e.slice(0,8),i=e.slice(8,12),n=e.slice(12,16),f=e.slice(16,18),c=e.slice(18,20),o=e.slice(20,32);return`urn:uuid:${`${t}-${i}-${n}-${f}${c}-${o}`}`}function bo(r){let e=r.get(7),t;if(e)try{t=lo(e)}catch(x){}let i=r.get(1),n;i&&typeof i=="string"&&(n=i.toString());let f=r.get(5),c;f&&typeof f=="number"&&(c=f);let o=r.get(4),h;o&&typeof o=="number"&&(h=o);let b=r.get("vc"),y;return b&&(y=b),{jti:t,iss:n,nbf:c,exp:h,vc:y}}function po(r){if(!r.jti)throw new U({message:"CWT Token ID claim MUST be present",section:"2.1.0.1.1",link:"https://nzcp.covid19.health.nz/#cwt-claims",description:"The COVID Pass is malformed or has been modified."});if(!r.iss)throw new U({message:"Issuer claim MUST be present",section:"2.1.0.2.1",link:"https://nzcp.covid19.health.nz/#cwt-claims",description:"The COVID Pass is malformed or has been modified."});if(!r.nbf)throw new U({message:"Not Before claim MUST be present and MUST be a timestamp encoded as an integer in the NumericDate format (as specified in [RFC8392] section 2)",section:"2.1.0.3.1",link:"https://nzcp.covid19.health.nz/#cwt-claims",description:"The COVID Pass is malformed or has been modified."});if(!r.exp)throw new U({message:"Not Before claim MUST be present and MUST be a timestamp encoded as an integer in the NumericDate format (as specified in [RFC8392] section 2)",section:"2.1.0.4.1",link:"https://nzcp.covid19.health.nz/#cwt-claims",description:"The COVID Pass is malformed or has been modified."});if(!(hn()>=r.nbf))throw new U({message:"The current datetime is after or equal to the value of the `nbf` claim",link:"https://nzcp.covid19.health.nz/#cwt-claims",section:"2.1.0.3.3",description:"The COVID Pass is not yet activated."});if(!(hn()<r.exp))throw new U({message:"The current datetime is before the value of the `exp` claim",link:"https://nzcp.covid19.health.nz/#cwt-claims",section:"2.1.0.4.3",description:"The COVID Pass has expired."});if(!r.vc)throw new U({message:"Verifiable Credential CWT claim MUST be present",section:"2.1.0.5.1",link:"https://nzcp.covid19.health.nz/#cwt-claims",description:"The COVID Pass is malformed or has been modified."});if(!(r.vc["@context"]instanceof Array&&r.vc["@context"][0]==="https://www.w3.org/2018/credentials/v1"&&r.vc["@context"][1]==="https://nzcp.covid19.health.nz/contexts/v1"))throw new U({message:"Verifiable Credential JSON-LD Context property doesn't conform to New Zealand COVID Pass example",link:"https://nzcp.covid19.health.nz/#verifiable-credential-claim-structure",section:"2.3.2",description:"The COVID Pass is malformed or has been modified."});if(!(r.vc.type instanceof Array&&r.vc.type[0]==="VerifiableCredential"&&r.vc.type[1]==="PublicCovidPass"))throw new U({message:"Verifiable Credential Type property doesn't conform to New Zealand COVID Pass example",link:"https://nzcp.covid19.health.nz/#verifiable-credential-claim-structure",section:"2.3.5",description:"The COVID Pass is malformed or has been modified."});if(r.vc.version!=="1.0.0")throw new U({message:"Verifiable Credential Version property MUST be 1.0.0",link:"https://nzcp.covid19.health.nz/#verifiable-credential-claim-structure",section:"2.3.8",description:"The QR code is not a valid NZ COVID Pass."});if(r.vc.credentialSubject){if(!r.vc.credentialSubject.givenName)throw new U({message:"Missing REQUIRED 'givenName' in credentialSubject property",link:"https://nzcp.covid19.health.nz/#publiccovidpass",section:"2.4.1.2.1",description:'"Given Name" missing from NZ COVID Pass.'});if(!r.vc.credentialSubject.dob)throw new U({message:"Missing REQUIRED 'dob' in credentialSubject property",link:"https://nzcp.covid19.health.nz/#publiccovidpass",section:"2.4.1.2.2",description:'"Date of Birth" missing from NZ COVID Pass.'})}else throw new U({message:"Verifiable Credential Credential Subject property MUST be present",link:"https://nzcp.covid19.health.nz/#verifiable-credential-claim-structure",section:"2.3.9",description:"The COVID Pass is malformed or has been modified."});return{jti:r.jti,iss:r.iss,nbf:r.nbf,exp:r.exp,vc:r.vc}}function vo(r){let e=r.get(4),t=r.get(1);return{kid:e?e.toString():void 0,alg:t===-7?"ES256":void 0}}var hh="https://w3.org/ns/did/v1",uh="did:web:nzcp.covid19.health.nz",lh=[{id:"did:web:nzcp.covid19.health.nz#key-1",controller:"did:web:nzcp.covid19.health.nz",type:"JsonWebKey2020",publicKeyJwk:{kty:"EC",crv:"P-256",x:"zRR-XGsCp12Vvbgui4DD6O6cqmhfPuXMhi1OxPl8760",y:"Iv5SU6FuW-TRYh5_GOrJlcV_gpF_GpFQhCOD8LSk3T0"}}],bh=["did:web:nzcp.covid19.health.nz#key-1"],mo={"@context":hh,id:uh,verificationMethod:lh,assertionMethod:bh};var ph="did:web:nzcp.identity.health.nz",vh=["https://w3.org/ns/did/v1","https://w3id.org/security/suites/jws-2020/v1"],mh=[{id:"did:web:nzcp.identity.health.nz#z12Kf7UQ",controller:"did:web:nzcp.identity.health.nz",type:"JsonWebKey2020",publicKeyJwk:{kty:"EC",crv:"P-256",x:"DQCKJusqMsT0u7CjpmhjVGkHln3A3fS-ayeH4Nu52tc",y:"lxgWzsLtVI8fqZmTPPo9nZ-kzGs7w7XO8-rUU68OxmI"}}],yh=["did:web:nzcp.identity.health.nz#z12Kf7UQ"],yo={id:ph,"@context":vh,verificationMethod:mh,assertionMethod:yh};var Kn={MOH_LIVE:yo,MOH_EXAMPLE:mo},Jn={MOH_LIVE:"did:web:nzcp.identity.health.nz",MOH_EXAMPLE:"did:web:nzcp.covid19.health.nz"};var go=(r,e)=>{var f,c,o;let t=e&&e.didDocument?Array.isArray(e.didDocument)?e.didDocument:[e.didDocument]:[Kn.MOH_LIVE],i=t.map(h=>h.id),n=e&&e.trustedIssuer?Array.isArray(e.trustedIssuer)?e.trustedIssuer:[e.trustedIssuer]:i;try{let h=wo(r),b=_o(h),y=So(h),x=Mo(y,n),M=(f=t.find(A=>A.id===x))!=null?f:null,S=Ao(x,b,y,M,h);return{success:!0,violates:null,expires:new Date(S.exp*1e3),validFrom:new Date(S.nbf*1e3),credentialSubject:S.vc.credentialSubject,raw:S}}catch(h){let b=h;if("violates"in b){let y=b,x=y.cwtClaims;return{success:!1,violates:y.violates,expires:(x==null?void 0:x.exp)?new Date((x==null?void 0:x.exp)*1e3):null,validFrom:(x==null?void 0:x.nbf)?new Date((x==null?void 0:x.nbf)*1e3):null,credentialSubject:(o=(c=x==null?void 0:x.vc)==null?void 0:c.credentialSubject)!=null?o:null,raw:x}}else return{success:!1,violates:{message:h.message,section:"unknown",link:""},expires:null,validFrom:null,credentialSubject:null,raw:null}}},xo=(r,e)=>ti(void 0,null,function*(){var i,n;let t=e&&e.trustedIssuer?Array.isArray(e.trustedIssuer)?e.trustedIssuer:[e.trustedIssuer]:[Jn.MOH_LIVE];try{let f=wo(r),c=_o(f),o=So(f),h=Mo(o,t),b=yield Jf.resolve(h);if(b.didResolutionMetadata.error)throw new U({message:b.didResolutionMetadata.error,link:"https://nzcp.covid19.health.nz/#ref:DID-CORE",section:"DID-CORE.1",description:"Could not resolve trusted issuer."});let y=Ao(h,c,o,b.didDocument,f);return{success:!0,violates:null,expires:new Date(y.exp*1e3),validFrom:new Date(y.nbf*1e3),credentialSubject:y.vc.credentialSubject,raw:y}}catch(f){let c=f;if("violates"in c){let o=c,h=o.cwtClaims;return{success:!1,violates:o.violates,expires:(h==null?void 0:h.exp)?new Date((h==null?void 0:h.exp)*1e3):null,validFrom:(h==null?void 0:h.nbf)?new Date((h==null?void 0:h.nbf)*1e3):null,credentialSubject:(n=(i=h==null?void 0:h.vc)==null?void 0:i.credentialSubject)!=null?n:null,raw:h}}else return{success:!1,violates:{message:f.message,section:"unknown",link:""},expires:null,validFrom:null,credentialSubject:null,raw:null}}}),wo=r=>{if(typeof r!="string")throw new U({message:"The payload of the QR Code MUST be a string",section:"4.3",link:"https://nzcp.covid19.health.nz/#2d-barcode-encoding",description:"The COVID Pass is malformed or has been modified."});let e=/(NZCP:\/)(\d+)\/([A-Za-z2-7=]+)/,t=r.match(e);if(!t)throw new U({message:"The payload of the QR Code MUST be in the form `NZCP:/<version-identifier>/<base32-encoded-CWT>`",section:"4.4",link:"https://nzcp.covid19.health.nz/#2d-barcode-encoding",description:"The QR code is not a valid NZ COVID Pass."});let[,i,n,f]=t;if(i!=="NZCP:/")throw new U({message:"The payload of the QR Code MUST begin with the prefix of `NZCP:/`",section:"4.5",link:"https://nzcp.covid19.health.nz/#2d-barcode-encoding",description:"The QR code is not a valid NZ COVID Pass."});if(n!=="1")throw new U({message:"The version-identifier portion of the payload for the specification MUST be 1",section:"4.6",link:"https://nzcp.covid19.health.nz/#2d-barcode-encoding",description:"The QR code is not a valid NZ COVID Pass."});let c;try{c=Af.parse(Zf(f))}catch(h){throw new U({message:"The payload of the QR Code MUST be base32 encoded",section:"4.7",link:"https://nzcp.covid19.health.nz/#2d-barcode-encoding",description:"The COVID Pass is malformed or has been modified."})}return Oi(c)},_o=r=>{let e=Oi(r.value[0]),t=vo(e);if(!t.kid)throw new U({message:"`kid` header MUST be present in the protected header section of the `COSE_Sign1` structure",section:"2.2.1.1",link:"https://nzcp.covid19.health.nz/#cwt-headers",description:"The COVID Pass is malformed or has been modified."});if(t.alg!=="ES256")throw new U({message:"`alg` claim value MUST be present in the protected header section of the `COSE_Sign1` structure and MUST be set to the value corresponding to `ES256` algorithm registration",section:"2.2.2.2",link:"https://nzcp.covid19.health.nz/#cwt-headers",description:"The COVID Pass is malformed or has been modified."});return t},So=r=>{let e=Oi(r.value[2]);return bo(e)},Mo=(r,e)=>{let t=r.iss;if(!t)throw new U({message:"Issuer claim MUST be present",section:"2.1.0.2.1",link:"https://nzcp.covid19.health.nz/#cwt-claims",description:"The COVID Pass is malformed or has been modified."});if(!e.includes(t))throw new U({message:"`iss` value reported in the pass does not match one listed in the trusted issuers",link:"https://nzcp.covid19.health.nz/#trusted-issuers",section:"6.3",description:"The COVID Pass was not issued by a trusted issuer."});return t},Ao=(r,e,t,i,n)=>{let f=`${r}#${e.kid}`;if(!(i==null?void 0:i.assertionMethod))throw new U({message:"The public key referenced by the decoded CWT MUST be listed/authorized under the assertionMethod verification relationship in the resolved DID document.",link:"https://nzcp.covid19.health.nz/#did-document",section:"5.1.1",description:"The COVID Pass is malformed or has been modified."});let c=i.assertionMethod;if(typeof c=="string"&&(c=[c]),!c.includes(f))throw new U({message:"The public key referenced by the decoded CWT MUST be listed/authorized under the assertionMethod verification relationship in the resolved DID document.",link:"https://nzcp.covid19.health.nz/#did-document",section:"5.1.1",description:"The COVID Pass is malformed or has been modified."});if(!i.verificationMethod)throw new U({message:"No matching verificationMethod method for the assertionMethod",link:"https://nzcp.covid19.health.nz/#ref:DID-CORE",section:"DID-CORE.2",description:"The COVID Pass is malformed or has been modified."});let o=i.verificationMethod.find(y=>y.id===f);if(!o)throw new U({message:"No matching verificationMethod for the assertionMethod",link:"https://nzcp.covid19.health.nz/#ref:DID-CORE",section:"DID-CORE.2",description:"The COVID Pass is malformed or has been modified."});let h=o==null?void 0:o.publicKeyJwk;if(!h||!(h==null?void 0:h.x)||!(h==null?void 0:h.y))throw new U({message:"The public key referenced by the decoded CWT MUST be a valid P-256 public key",link:"https://nzcp.covid19.health.nz/#did-document",section:"5.1.2",description:"The COVID Pass is malformed or has been modified."});if((o==null?void 0:o.type)!=="JsonWebKey2020")throw new U({message:"The expression of the public key referenced by the decoded CWT MUST be in the form of a JWK as per [RFC7517].",link:"https://nzcp.covid19.health.nz/#did-document",section:"5.1.3",description:"The COVID Pass is malformed or has been modified."});if(h.crv!=="P-256"||h.kty!=="EC")throw new U({message:"This public key JWK expression MUST set a crv property which has a value of P-256. Additionally, the JWK MUST have a kty property set to EC.",link:"https://nzcp.covid19.health.nz/#did-document",section:"5.1.5",description:"The COVID Pass is malformed or has been modified."});if(!uo(n,h))throw new U({message:"Retrieved public key does not validate `COSE_Sign1` structure",link:"https://nzcp.covid19.health.nz/#cryptographic-digital-signature-algorithm-selection",section:"3",description:"The COVID Pass is malformed or has been modified."});try{return po(t)}catch(y){throw"violates"in y?new U(y.violates,t):y}};0&&(module.exports={DID_DOCUMENTS,TRUSTED_ISSUERS,verifyPassURI,verifyPassURIOffline});
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
