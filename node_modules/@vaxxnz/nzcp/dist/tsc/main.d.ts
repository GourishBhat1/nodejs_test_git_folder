import { VerificationResult, Violates } from "./generalTypes";
import { CredentialSubject } from "./cwtTypes";
import { DIDDocument } from "did-resolver";
declare const DID_DOCUMENTS: {
    MOH_LIVE: {
        id: string;
        "@context": string[];
        verificationMethod: {
            id: string;
            controller: string;
            type: string;
            publicKeyJwk: {
                kty: string;
                crv: string;
                x: string;
                y: string;
            };
        }[];
        assertionMethod: string[];
    };
    MOH_EXAMPLE: {
        "@context": string;
        id: string;
        verificationMethod: {
            id: string;
            controller: string;
            type: string;
            publicKeyJwk: {
                kty: string;
                crv: string;
                x: string;
                y: string;
            };
        }[];
        assertionMethod: string[];
    };
};
declare const TRUSTED_ISSUERS: {
    MOH_LIVE: string;
    MOH_EXAMPLE: string;
};
export { VerificationResult, CredentialSubject, Violates, DIDDocument };
export { DID_DOCUMENTS, TRUSTED_ISSUERS };
export declare type VerifyPassURIOfflineOptions = {
    trustedIssuer?: string | string[];
    didDocument?: DIDDocument | DIDDocument[];
};
export declare const verifyPassURIOffline: (uri: string, options?: VerifyPassURIOfflineOptions | undefined) => VerificationResult;
export declare type VerifyPassURIOptions = {
    trustedIssuer?: string | string[];
};
export declare const verifyPassURI: (uri: string, options?: VerifyPassURIOptions | undefined) => Promise<VerificationResult>;
